# ---------- 1) –ë–∞–∑–æ–≤—ã–π —Ä–∞–Ω—Ç–∞–π–º ----------
FROM python:3.10-slim-bookworm AS runtime
ENV DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 ca-certificates tzdata curl \
 && rm -rf /var/lib/apt/lists/*
WORKDIR /app
ENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1

# ‚ùó –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ –∫–æ–ø–∏—Ä—É–µ–º –∏ –¥–∞—ë–º –ø—Ä–∞–≤–∞ ‚Äî –ü–û–ö–ê –ï–©–Å ROOT
# (USER tgmgr –±—É–¥–µ—Ç –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ)

# ---------- 2) Builder: Python + deps + Nuitka ----------
FROM python:3.10-slim-bookworm AS builder
ENV DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc g++ make libpq-dev libffi-dev libssl-dev zlib1g-dev patchelf \
 && rm -rf /var/lib/apt/lists/*
WORKDIR /app

# –∫—ç—à pip –º–µ–∂–¥—É —Å–±–æ—Ä–∫–∞–º–∏
RUN --mount=type=cache,target=/root/.cache/pip python -m pip install -U pip wheel
COPY requirements.txt .
RUN --mount=type=cache,target=/root/.cache/pip \
    PIP_DISABLE_PIP_VERSION_CHECK=1 PIP_NO_CACHE_DIR=1 \
    pip install --prefer-binary -r requirements.txt

# Nuitka
RUN --mount=type=cache,target=/root/.cache/pip pip install nuitka==2.4

# –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
COPY . .

# –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∫–∞—Ç–∞–ª–æ–≥–∏ ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø–∞–∫–µ—Ç—ã
RUN set -eux; for d in app handlers keyboards utils states tasks; do \
      [ -d "$d" ] && [ -f "$d/__init__.py" ] || { mkdir -p "$d"; touch "$d/__init__.py"; }; \
    done

# ---------- 3) –ö–æ–º–ø–∏–ª—è—Ü–∏—è –¢–û–õ–¨–ö–û utils/, tasks/, states/ –≤ .so ----------
# ---------- 3) –ö–æ–º–ø–∏–ª—è—Ü–∏—è –¢–û–õ–¨–ö–û utils/, tasks/, states/ –≤ .so ----------
RUN set -eux; \
  find utils tasks states -type f -name "*.py" ! -name "__init__.py" | while read -r f; do \
    echo ">>> Compiling $f"; \
    python -m nuitka \
      --module "$f" \
      --output-dir="$(dirname "$f")" \
      --jobs="$(nproc)" \
      --nofollow-import-to=tests; \
  done; \
  echo "=== CHECK: .so —Ä—è–¥–æ–º —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏ ==="; \
  find utils tasks states -type f -name "*.so" | head -25 || echo "‚ö†Ô∏è No .so found"; \
  echo "=== CLEAN SOURCES (–∫—Ä–æ–º–µ __init__.py) ==="; \
  find utils tasks states -type f -name "*.py" ! -name "__init__.py" -delete; \
  find utils tasks states -type f -name "*.pyc" -delete
  
# –º–∞–ª–µ–Ω—å–∫–∏–π –ª–∞—É–Ω—á–µ—Ä
RUN printf '%s\n' \
 'import asyncio, bot' \
 'asyncio.run(bot.main())' > /app/entry.py

# ---------- 4) –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ ----------
FROM runtime AS app

# –ø–µ—Ä–µ–Ω–æ—Å–∏–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –∏ site-packages
COPY --from=builder /usr/local /usr/local

# –∫–æ–ø–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
COPY --from=builder /app/ /app/

# üî• 1. –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
RUN useradd -r -u 10001 -g users tgmgr

# üî• 2. –î–∞—ë–º –ø—Ä–∞–≤–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!)
RUN chown -R tgmgr:users /app

# üî• 3. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–µ–≥–æ
USER tgmgr

# –∑–∞–ø—É—Å–∫
CMD ["python", "-u", "/app/entry.py"]