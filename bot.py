# üìÜ –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞—Ä–∫–∞—Å Telegram-–±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ (aiogram v3)

import os
import asyncio
import logging

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.strategy import FSMStrategy
from aiogram.types import BotCommand
from handlers import register_all_handlers
from config import BOT_TOKEN, ADMIN_IDS
from app.db import DB_CONFIG  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥ –ë–î –ø–æ–¥—Ç—è–Ω—É–ª—Å—è
from app.lic_client import LicenseClient, LicenseError

# ‚îÄ‚îÄ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.getLogger("asyncio").setLevel(logging.CRITICAL)
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")
log = logging.getLogger("bot")

print("‚úÖ Database config loaded successfully!")

async def on_startup(bot: Bot):
    await bot.set_my_commands([
        BotCommand(command="boost", description="üëÅ –ù–∞–∫—Ä—É—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ—Å—Ç–æ–≤"),
        # –î–æ–±–∞–≤—å —Å—é–¥–∞ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    ])

# ‚îÄ‚îÄ –û—Å–Ω–æ–≤–Ω–æ–π async-–≤—Ö–æ–¥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚îÄ‚îÄ –û—Å–Ω–æ–≤–Ω–æ–π async-–≤—Ö–æ–¥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    # 1) –õ–∏—Ü–µ–Ω–∑–∏—è
    lic = LicenseClient()
    try:
        await lic.ensure_license()
    except LicenseError as e:
        log.error("License check failed: %s", e)
        raise SystemExit(1)
    #lic.spawn_auto_renew(asyncio.get_event_loop())

    # 2) –ë–æ—Ç/–¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(fsm_strategy=FSMStrategy.CHAT)

    # >>> –í–†–ï–ú–ï–ù–ù–´–ï –¢–ï–°–¢–û–í–´–ï –•–≠–ù–î–õ–ï–†–´ (–ø–æ –∂–µ–ª–∞–Ω–∏—é –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
    # from aiogram import Router, types, F
    # test = Router()
    # @test.message(F.text == "/ping")
    # async def ping(m: types.Message): await m.answer("pong")
    # @test.message()
    # async def mirror(m: types.Message): await m.answer(f"echo: {m.text}")
    # dp.include_router(test)
    # <<<

    register_all_handlers(dp)
    dp.startup.register(on_startup)

    # >>> –í–°–¢–ê–í–¨ –í–û–¢ –≠–¢–ò 3 –°–¢–†–û–ö–ò –ü–ï–†–ï–î start_polling <<<
    me = await bot.get_me()
    print(f"ü§ñ Running as @{me.username} (id={me.id})")
    await bot.delete_webhook(drop_pending_updates=True)
    # >>> –ö–û–ù–ï–¶ –í–°–¢–ê–í–ö–ò <<<

    log.info("ü§ñ Bot is starting polling‚Ä¶")
    await dp.start_polling(bot)


# ‚îÄ‚îÄ –¢–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    asyncio.run(main())
