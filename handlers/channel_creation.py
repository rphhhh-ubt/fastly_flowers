import random, json, os, asyncio, unicodedata, re
from aiogram import Router, F, Bot, types
from aiogram.types import Message, FSInputFile, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import BOT_TOKEN
from utils.check_access import admin_only
from app.db import get_all_accounts, create_task_entry, insert_task_create_log, get_connection, update_task_status, update_task_accounts_count
from app.telegram_client import get_client
from utils.username_generator import generate_valid_username
from telethon.tl.functions.channels import CreateChannelRequest, EditPhotoRequest, UpdateUsernameRequest
from telethon.tl.types import InputChatUploadedPhoto, MessageMediaWebPage
from telethon.tl.functions.messages import DeleteMessagesRequest
from telethon.tl.functions.account import UpdatePersonalChannelRequest
from keyboards.main_menu import start_menu_keyboard
from utils.lock import run_with_lock
from zipfile import ZipFile
from PIL import Image
from keyboards.cancel_keyboard import cancel_keyboard
from telethon import functions as tfunc, types as ttypes



router = Router()
selected_accounts_create = {}
UPLOAD_FOLDER = "./avatar_uploads/"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
used_accounts = set()
used_accounts_lock = asyncio.Lock()


class ChannelCreation(StatesGroup):
    waiting_for_titles = State()
    waiting_for_descriptions = State()
    waiting_for_usernames = State()
    waiting_for_avatars = State()
    waiting_for_reactions_mode = State()
    waiting_for_reactions_list = State()
    waiting_for_donor_channels = State()
    waiting_for_copy_limit = State()



# –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –≤—ã–∫–∏–¥—ã–≤–∞–µ–º –≤—Å—ë, –≥–¥–µ –µ—Å—Ç—å –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã/–ø—É–Ω–∫—Ç—É–∞—Ü–∏—è,
# –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –≥—Ä–∞—Ñ–µ–º–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ —ç–º–æ–¥–∑–∏.
_EMOJI_RE = re.compile(
    "["                             # —à–∏—Ä–æ–∫–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã emoji
    "\U0001F300-\U0001F5FF"         # Misc Symbols and Pictographs
    "\U0001F600-\U0001F64F"         # Emoticons
    "\U0001F680-\U0001F6FF"         # Transport & Map
    "\U0001F700-\U0001F77F"         # Alchemical
    "\U0001F780-\U0001F7FF"         # Geometric Extended
    "\U0001F800-\U0001F8FF"         # Supplemental Arrows-C
    "\U0001F900-\U0001F9FF"         # Supplemental Symbols and Pictographs
    "\U0001FA00-\U0001FAFF"         # Chess symbols, etc.
    "\u2600-\u26FF"                 # Misc symbols
    "\u2700-\u27BF"                 # Dingbats
    "]"
)

_ZWJ = "\u200D"     # zero width joiner
_VS16 = "\uFE0F"    # variation selector-16

def _is_single_emoji_token(tok: str) -> bool:
    if not tok:
        return False
    tok = tok.strip()
    # —É–±–∏—Ä–∞–µ–º variation selector; –¥–æ–ø—É—Å–∫–∞–µ–º —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –±–∞–∑–æ–≤—ã–π —ç–º–æ–¥–∑–∏
    cleaned = tok.replace(_VS16, "")
    # –µ—Å–ª–∏ –µ—Å—Ç—å ZWJ-–∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ (—Å–µ–º—å–∏, –ø—Ä–æ—Ñ—ã) ‚Äî –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º (API —á–∞—Å—Ç–æ —Ä—É–≥–∞–µ—Ç—Å—è)
    if _ZWJ in cleaned:
        return False
    # —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –æ–¥–Ω–æ–≥–æ ¬´—ç–º–æ–¥–∑–∏-–ø–æ—Ö–æ–∂–µ–≥–æ¬ª —Å–∏–º–≤–æ–ª–∞
    matches = list(_EMOJI_RE.finditer(cleaned))
    # –¥–æ–ø—É—Å–∫–∞–µ–º —Ä–æ–≤–Ω–æ –æ–¥–Ω—É ¬´—ç–º–æ–¥–∑–∏¬ª –ø–æ–∑–∏—Ü–∏—é –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –Ω–µ-—ç–º–æ–¥–∑–∏
    return len(matches) == 1 and matches[0].span() == (0, len(cleaned))

def sanitize_reactions_tokens(raw_tokens: list[str], limit: int = 11):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (valid, rejected):
      valid    ‚Äî –æ—á–∏—â–µ–Ω–Ω—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ (–¥–æ limit —à—Ç—É–∫),
      rejected ‚Äî —Ç–æ, —á—Ç–æ –æ—Ç–±—Ä–æ—à–µ–Ω–æ.
    """
    seen = set()
    valid = []
    rejected = []
    for tok in raw_tokens:
        t = tok.strip().strip(",.;:")  # —Å—Ä–µ–∂–µ–º –æ—á–µ–≤–∏–¥–Ω—É—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
        if not t:
            continue
        if _is_single_emoji_token(t):
            if t not in seen:
                seen.add(t)
                valid.append(t)
                if len(valid) >= limit:
                    break
        else:
            rejected.append(tok)
    return valid, rejected

async def load_used_accounts():
    global used_accounts
    try:
        if os.path.exists(USED_ACCOUNTS_FILE):
            with open(USED_ACCOUNTS_FILE, "r", encoding="utf-8") as f:
                used_accounts = {line.strip() for line in f if line.strip()}
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")


def extract_username_or_id(line: str) -> str | None:
    line = line.strip()
    if not line:
        return None

    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–∏–¥–∞ https://t.me/... 
    if line.startswith("https://t.me/ "):
        parts = line.split("/")
        if len(parts) >= 4:
            username = parts[3].strip()
            if username.isdigit() or not username.startswith("@"):
                return username
            else:
                return username[1:]  # –£–±–∏—Ä–∞–µ–º @
        return None

    # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @
    elif line.startswith("@"):
        return line[1:].strip()

    # –ü—Ä–æ—Å—Ç–æ username
    else:
        return line.strip()

def get_task_create_logs(task_id: int):
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT account_id, log_text FROM task_create WHERE task_id = %s", (task_id,))
    logs = cursor.fetchall()
    cursor.close()
    conn.close()
    return logs

def reactions_mode_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ", callback_data="react_mode_default")],
        [InlineKeyboardButton(text="üö´ –ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏", callback_data="react_mode_off")],
        #[InlineKeyboardButton(text="‚úèÔ∏è –°–≤–æ–π —Å–ø–∏—Å–æ–∫", callback_data="react_mode_custom")],
        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_to_main_menu")]
    ])


@router.message(Command("create_channels"))
@admin_only
async def create_channels(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await load_used_accounts()
    async with used_accounts_lock:
        used_accounts.clear()
    if os.path.exists(USED_ACCOUNTS_FILE):
        os.remove(USED_ACCOUNTS_FILE)
    async with run_with_lock(f"channel_create_init_{user_id}"):
        await state.clear()
        await state.set_state(ChannelCreation.waiting_for_titles)

        sent_msg = await message.answer(
            "üì• –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞–Ω–∞–ª–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ):"
        )
        await state.update_data(bot_message_id=sent_msg.message_id)


@router.message(ChannelCreation.waiting_for_titles)
async def receive_titles(message: Message, state: FSMContext):
    user_id = message.from_user.id
    titles = []

    if message.document:
        file_path = os.path.join(UPLOAD_FOLDER, message.document.file_name)
        await message.bot.download(message.document, destination=file_path)
        with open(file_path, "r", encoding="utf-8") as f:
            titles = [line.strip() for line in f if line.strip()]
        os.remove(file_path)
    else:
        titles = [line.strip() for line in message.text.split("\n") if line.strip()]

    if not titles:
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤.")
        return

    await state.update_data(titles=titles)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    data = await state.get_data()
    bot_msg_id = data.get("bot_message_id")

    next_step_text = "üì• –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∫–∞–Ω–∞–ª–æ–≤:"
    try:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_msg_id,
            text=next_step_text,
            reply_markup=cancel_keyboard()
        )
    except Exception as e:
        sent_msg = await message.answer(next_step_text, reply_markup=cancel_keyboard())
        await state.update_data(bot_message_id=sent_msg.message_id)

    await state.set_state(ChannelCreation.waiting_for_descriptions)




@router.message(ChannelCreation.waiting_for_descriptions)
async def receive_descriptions(message: Message, state: FSMContext):
    user_id = message.from_user.id
    descriptions = []

    if message.document:
        file_path = os.path.join(UPLOAD_FOLDER, message.document.file_name)
        await message.bot.download(message.document, destination=file_path)
        with open(file_path, "r", encoding="utf-8") as f:
            descriptions = [line.strip() for line in f if line.strip()]
        os.remove(file_path)
    else:
        descriptions = [line.strip() for line in message.text.split("\n") if line.strip()]

    if not descriptions:
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è.")
        return

    await state.update_data(descriptions=descriptions)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    data = await state.get_data()
    bot_msg_id = data.get("bot_message_id")

    next_step_text = "üì• –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —Å username‚Äô–∞–º–∏ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ), –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ 'generate' –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:"
    try:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_msg_id,
            text=next_step_text,
            reply_markup=cancel_keyboard()
        )
    except Exception as e:
        sent_msg = await message.answer(next_step_text, reply_markup=cancel_keyboard())
        await state.update_data(bot_message_id=sent_msg.message_id)

    await state.set_state(ChannelCreation.waiting_for_usernames)



@router.message(ChannelCreation.waiting_for_usernames)
async def receive_usernames(message: Message, state: FSMContext):
    if message.text and message.text.lower() == "generate":
        await state.update_data(generate_usernames=True, usernames=[])
    elif message.document:
        file_path = os.path.join(UPLOAD_FOLDER, message.document.file_name)
        await message.bot.download(message.document, destination=file_path)
        with open(file_path, "r", encoding="utf-8") as f:
            usernames = [line.strip() for line in f if line.strip()]
        os.remove(file_path)
        await state.update_data(generate_usernames=False, usernames=usernames)
    else:
        await message.answer("‚ùó –û—à–∏–±–∫–∞. –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç 'generate' –∏–ª–∏ —Ñ–∞–π–ª —Å username‚Äô–∞–º–∏.")
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    bot_msg_id = data.get("bot_message_id")

    next_step_text = "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ ZIP —Å –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏ (–¥–æ 50 —à—Ç—É–∫):\n\n‚ö†Ô∏è –í–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å:\n\nTelegram –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 10 –ú–ë –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ jpg. \n\n–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –±—É–¥–µ—Ç –º–Ω–æ–≥–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ ‚Äî —ç—Ç–æ —Å–∫–∞–∂–µ—Ç—Å—è –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞ –∏ –æ–±—â–µ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."
    try:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_msg_id,
            text=next_step_text,
            reply_markup=cancel_keyboard()
        )
    except Exception as e:
        sent_msg = await message.answer(next_step_text, reply_markup=cancel_keyboard())
        await state.update_data(bot_message_id=sent_msg.message_id)

    await state.set_state(ChannelCreation.waiting_for_avatars)



@router.message(ChannelCreation.waiting_for_avatars, F.document)
async def receive_avatars_zip(message: Message, state: FSMContext):
    if not message.document.file_name.lower().endswith(".zip"):
        await message.answer("‚ùó –ü—Ä–∏—à–ª–∏—Ç–µ ZIP-–∞—Ä—Ö–∏–≤ —Å –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏.")
        return

    zip_path = os.path.join(UPLOAD_FOLDER, "avatars.zip")
    await message.bot.download(message.document.file_id, destination=zip_path)
    saved_paths = []

    try:
        with ZipFile(zip_path, "r") as zip_ref:
            zip_ref.extractall(UPLOAD_FOLDER)
            extracted = zip_ref.namelist()
            for i, filename in enumerate(extracted[:50]):
                ext = os.path.splitext(filename)[1].lower()
                if ext in [".jpg", ".jpeg", ".png"]:
                    saved_paths.append(os.path.join(UPLOAD_FOLDER, filename))
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ –∞—Ä—Ö–∏–≤–∞.")
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ ZIP: {e}")
        return
    finally:
        if os.path.exists(zip_path):
            os.remove(zip_path)

    random.shuffle(saved_paths)
    if not saved_paths:
        await message.answer("‚ö†Ô∏è –í –∞—Ä—Ö–∏–≤–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫ (—Ç–æ–ª—å–∫–æ JPG/PNG).")
        return

    await state.update_data(saved_paths=saved_paths)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    bot_msg_id = data.get("bot_message_id")

    next_step_text = (
        "üß© –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç–∞—Ö –∫–∞–Ω–∞–ª–∞:\n"
        "‚Ä¢ ¬´–û—Å—Ç–∞–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ¬ª ‚Äî –∫–∞–∫ —É –¢–µ–ª–µ–≥—Ä–∞–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
        "‚Ä¢ ¬´–ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏¬ª ‚Äî —Ä–µ–∞–∫—Ü–∏–∏ –±—É–¥—É—Ç –≤—ã–∫–ª—é—á–µ–Ω—ã\n"
        "‚Ä¢ ¬´–°–≤–æ–π —Å–ø–∏—Å–æ–∫¬ª ‚Äî —É–∫–∞–∂–µ—Ç–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:"
    )
    try:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_msg_id,
            text=next_step_text,
            reply_markup=reactions_mode_keyboard()
        )
    except Exception:
        sent_msg = await message.answer(next_step_text, reply_markup=reactions_mode_keyboard())
        await state.update_data(bot_message_id=sent_msg.message_id)

    await state.set_state(ChannelCreation.waiting_for_reactions_mode)

@router.callback_query(F.data.in_({"react_mode_default", "react_mode_off", "react_mode_custom"}))
async def select_reactions_mode(callback: CallbackQuery, state: FSMContext):
    mode_map = {
        "react_mode_default": "default",
        "react_mode_off": "off",
        "react_mode_custom": "custom",
    }
    mode = mode_map[callback.data]
    await state.update_data(reactions_mode=mode)

    data = await state.get_data()
    bot_msg_id = data.get("bot_message_id")

    if mode == "custom":
        txt = (
            "‚úèÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π (—ç–º–æ–¥–∑–∏).\n"
            "–ú–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "üëç üòÇ üî• üòÆ\n"
            "–∏–ª–∏\n"
            "üëç\nüòÇ\nüî•\nüòÆ"
        )
        try:
            await callback.message.edit_text(txt, reply_markup=cancel_keyboard())
        except Exception:
            await callback.message.answer(txt, reply_markup=cancel_keyboard())
        await state.set_state(ChannelCreation.waiting_for_reactions_list)
    else:
        # —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–Ω–æ—Ä–∞–º
        next_step_text = "üì• –ü—Ä–∏—à–ª–∏—Ç–µ —Å–ø–∏—Å–æ–∫ username‚Äô–æ–≤ –∏–ª–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã-–¥–æ–Ω–æ—Ä—ã (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ .txt —Ñ–∞–π–ª–æ–º):"
        try:
            await callback.message.edit_text(next_step_text, reply_markup=cancel_keyboard())
        except Exception:
            await callback.message.answer(next_step_text, reply_markup=cancel_keyboard())
        await state.set_state(ChannelCreation.waiting_for_donor_channels)

    await callback.answer()


@router.message(ChannelCreation.waiting_for_reactions_list)
async def receive_reactions_list(message: Message, state: FSMContext):
    # —Å–æ–±–∏—Ä–∞–µ–º —Å—ã—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã (–ø–æ–¥–¥–µ—Ä–∂–∏–º –ø—Ä–æ–±–µ–ª—ã/–∑–∞–ø—è—Ç—ã–µ/–ø–µ—Ä–µ–Ω–æ—Å—ã)
    raw = []
    if message.document:
        file_path = os.path.join(UPLOAD_FOLDER, message.document.file_name)
        await message.bot.download(message.document, destination=file_path)
        with open(file_path, "r", encoding="utf-8") as f:
            text = f.read()
        os.remove(file_path)
    else:
        text = message.text or ""

    # —Å–ø–ª–∏—Ç–∏–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º, –∑–∞–ø—è—Ç—ã–º –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º
    raw = re.split(r"[\s,]+", text.strip())

    reactions, rejected = sanitize_reactions_tokens(raw, limit=11)

    if not reactions:
        # –Ω–∏—á–µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –ø—Ä–∏–º–µ—Ä
        await message.answer(
            "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ —ç–º–æ–¥–∑–∏.\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Ä—è–¥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —ç–º–æ–¥–∑–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
            "üëç üòÇ üî• üòÆ"
        )
        return

    await state.update_data(reactions=reactions)

    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except Exception:
        pass

    data = await state.get_data()
    bot_msg_id = data.get("bot_message_id")

    # –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–∏–¥–±–µ–∫
    feedback = "‚úÖ –ü—Ä–∏–º—É —Ä–µ–∞–∫—Ü–∏–∏: " + " ".join(reactions)
    if rejected:
        feedback += f"\n‚ö†Ô∏è –û—Ç–±—Ä–æ—à–µ–Ω–æ: {' '.join(rejected[:10])}" + (" ‚Ä¶" if len(rejected) > 10 else "")

    next_step_text = (
        f"{feedback}\n\n"
        "üì• –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å–ø–∏—Å–æ–∫ username‚Äô–æ–≤ –∏–ª–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã-–¥–æ–Ω–æ—Ä—ã "
        "(–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ .txt —Ñ–∞–π–ª–æ–º):"
    )

    try:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_msg_id,
            text=next_step_text,
            reply_markup=cancel_keyboard()
        )
    except Exception:
        sent_msg = await message.answer(next_step_text, reply_markup=cancel_keyboard())
        await state.update_data(bot_message_id=sent_msg.message_id)

    await state.set_state(ChannelCreation.waiting_for_donor_channels)



@router.message(ChannelCreation.waiting_for_donor_channels)
async def receive_donor_channels(message: Message, state: FSMContext):
    donor_channels = []
    if message.document:
        file = await message.document.download(destination_dir=UPLOAD_FOLDER)
        with open(file.path, "r", encoding="utf-8") as f:
            donor_channels = [extract_username_or_id(line) for line in f.readlines()]
        os.remove(file.path)
    else:
        lines = message.text.split('\n')
        donor_channels = [extract_username_or_id(line) for line in lines]

    donor_channels = [d for d in donor_channels if d is not None]

    if not donor_channels:
        await message.answer("‚ùó –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤-–¥–æ–Ω–æ—Ä–æ–≤ –ø—É—Å—Ç.")
        return

    await state.update_data(donor_channels=donor_channels)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    bot_msg_id = data.get("bot_message_id")

    next_step_text = "üìä –£–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å –¥–æ–Ω–æ—Ä–∞ (—á–∏—Å–ª–æ):"
    try:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_msg_id,
            text=next_step_text,
            reply_markup=cancel_keyboard()
        )
    except Exception as e:
        sent_msg = await message.answer(next_step_text, reply_markup=cancel_keyboard())
        await state.update_data(bot_message_id=sent_msg.message_id)

    await state.set_state(ChannelCreation.waiting_for_copy_limit)



from keyboards.main_menu import start_menu_keyboard  # —É–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å —Å–≤–µ—Ä—Ö—É

@router.message(ChannelCreation.waiting_for_copy_limit)
async def receive_copy_limit(message: Message, state: FSMContext):
    try:
        copy_post_limit = int(message.text.strip())
        if copy_post_limit <= 0:
            raise ValueError
    except:
        await message.answer("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    await state.update_data(copy_post_limit=copy_post_limit)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    bot_msg_id = data.get("bot_message_id")

    start_task_text = "üöÄ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤, –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –í–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–æ–≥..."

    try:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_msg_id,
            text=start_task_text
            
        )
    except Exception as e:
        sent_msg = await message.answer(start_task_text)
        await state.update_data(bot_message_id=sent_msg.message_id)
        bot_msg_id = sent_msg.message_id  # –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–µ

    await asyncio.sleep(2)

    # –ó–∞–º–µ–Ω–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
    main_menu_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    try:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_msg_id,
            text=main_menu_text,
            reply_markup=start_menu_keyboard()
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await message.answer(main_menu_text, reply_markup=start_menu_keyboard())

    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–∞–Ω–∞–ª–æ–≤
    data = await state.get_data()
    await create_channels_process(message, state, data)



# –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞ –ù–ò–ß–ï–ì–û –¥–ª—è —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ

async def create_channels_process(message: Message, state: FSMContext, data: dict):
    titles          = data["titles"]
    descriptions    = data["descriptions"]
    usernames       = data["usernames"]
    generate        = data["generate_usernames"]
    saved_paths     = data["saved_paths"]
    donor_channels  = data["donor_channels"]
    copy_post_limit = data["copy_post_limit"]

    all_accounts    = get_all_accounts()
    selected_ids    = data.get("selected_account_ids", [])
    user_id         = message.from_user.id

    # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    selected_accounts = [a for a in all_accounts if a["id"] in selected_ids]

    # ‚ö†Ô∏è –ù–∞ –≤—Å—è–∫–∏–π: —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ –ø–æ session_string –µ—â—ë –¥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á
    # (–µ—Å–ª–∏ –ø–æ –æ—à–∏–±–∫–µ –≤ –≤—ã–±–æ—Ä–∫–µ –æ–∫–∞–∑–∞–ª–∏—Å—å 2 –∑–∞–ø–∏—Å–∏ —Å –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–µ–π)
    unique_by_session = {}
    for acc in selected_accounts:
        ss = acc.get("session_string")
        if ss and ss not in unique_by_session:
            unique_by_session[ss] = acc
    filtered_accounts = list(unique_by_session.values())
    
    reactions_mode   = data.get("reactions_mode", "default")  # default|off|custom
    reactions_list   = data.get("reactions", [])
    payload = {
        "accounts": selected_ids,
        "copy_post_limit": copy_post_limit,
        "generate_usernames": generate,
        "titles": titles,
        "descriptions": descriptions,
        "usernames": usernames,
        "donor_channels": donor_channels,
        "reactions_mode": reactions_mode,
        "reactions": reactions_list,
    }

    task_id = create_task_entry(
        task_type="create_and_set_channel",
        created_by=user_id,
        payload=json.dumps(payload)
    )

    if not filtered_accounts:
        await message.answer("‚ùó –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
        update_task_status(task_id, "completed")
        return

    # ‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏ ‚Äî –±–µ–∑ —Ñ–∞–π–ª–æ–≤
    used_accounts: set[str] = set()
    used_accounts_lock = asyncio.Lock()
    used_avatars: set[str] = set()
    used_avatars_lock = asyncio.Lock()

    async def process_account(idx: int, account: dict) -> str:
        log = ""
        account_key = account["session_string"]
        acc_username = account.get("username") or f"id{account['id']}"
        account_id = account["id"]

        # –ù–µ –¥–∞—ë–º –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ø–∞—Å—Ç—å –≤ —Ä–∞–±–æ—Ç—É –¥–≤–∞–∂–¥—ã –≤ —Ä–∞–º–∫–∞—Ö –≠–¢–û–ô –∑–∞–¥–∞—á–∏
        async with used_accounts_lock:
            if account_key in used_accounts:
                return f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {acc_username} —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—â–µ–Ω\n"
            used_accounts.add(account_key)

        proxy = {
            "proxy_host": account["proxy_host"],
            "proxy_port": account["proxy_port"],
            "proxy_username": account["proxy_username"],
            "proxy_password": account["proxy_password"],
        }

        try:
            client = await get_client(account["session_string"], proxy)
            try:
                await client.connect()
            except Exception as e:
                log += f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è @{acc_username}: {e}\n"
                return log

            title = titles[idx % len(titles)]
            about = descriptions[idx % len(descriptions)]
            ch_username = generate_valid_username() if generate else usernames[idx % len(usernames)]

            # –°–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª
            result = await client(CreateChannelRequest(title=title, about=about, megagroup=False))
            channel = result.chats[0]

            # Username —Å –¥–æ 5 —Ä–µ—Ç—Ä–∞–µ–≤
            success = False
            for attempt in range(5):
                try:
                    await client(UpdateUsernameRequest(channel=channel, username=ch_username))
                    success = True
                    break
                except Exception as e:
                    print(f"‚ö†Ô∏è [{acc_username}] –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/5 username '{ch_username}': {e}")
                    ch_username = generate_valid_username()
            if not success:
                log += f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –¥–ª—è @{acc_username}\n"
                await client.disconnect()
                insert_task_create_log(task_id, account_id, log)
                return log

            # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
            try:
                await client(UpdatePersonalChannelRequest(channel=channel))
                log += f"üë§ –ö–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–ª—è @{acc_username}\n"
            except Exception as e:
                log += f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –∫–∞–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π: {e}\n"

            # –ê–≤–∞—Ç–∞—Ä–∫–∞ (–æ–±—â–∏–π –ø—É–ª, —á—Ç–æ–±—ã –Ω–µ —Ä–∞—Å—Ö–æ–¥–æ–≤–∞—Ç—å –æ–¥–Ω—É –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–≤–∞–∂–¥—ã)
            avatar_set = False
            avatar_path_used = None
            for _ in range(5):
                if avatar_set:
                    break
                async with used_avatars_lock:
                    for photo_path in saved_paths:
                        if photo_path in used_avatars:
                            continue
                        try:
                            with Image.open(photo_path) as img:
                                if img.width < 200 or img.height < 200:
                                    log += f"‚ö†Ô∏è –ê–≤–∞—Ç–∞—Ä–∫–∞ {photo_path} —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è, –ø—Ä–æ–ø—É—â–µ–Ω–∞\n"
                                    continue
                            uploaded = await client.upload_file(photo_path)
                            input_photo = InputChatUploadedPhoto(uploaded)
                            await client(EditPhotoRequest(channel=channel, photo=input_photo))
                            used_avatars.add(photo_path)
                            avatar_path_used = photo_path
                            avatar_set = True
                            break
                        except Exception as e:
                            log += f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ {photo_path}: {e}\n"
                            used_avatars.discard(photo_path)
                            continue

            if not avatar_set:
                log += f"üñºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –¥–ª—è @{acc_username}\n"
            else:
                log += f"üñºÔ∏è –ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ {avatar_path_used}\n"
                
            # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–∫—Ü–∏–π ---

            try:
                mode = payload.get("reactions_mode", "default")
                custom = payload.get("reactions", [])

                if mode == "off":
                    await client(
                        tfunc.messages.SetChatAvailableReactionsRequest(
                            peer=channel,
                            available_reactions=ttypes.ChatReactionsNone()
                        )
                    )
                    log += "üö´ –†–µ–∞–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã\n"

                elif mode == "custom":
                    rx = [ttypes.ReactionEmoji(emoticon=e) for e in custom if e]
                    if not rx:
                        await client(
                            tfunc.messages.SetChatAvailableReactionsRequest(
                                peer=channel,
                                available_reactions=ttypes.ChatReactionsAll()
                            )
                        )
                        log += "‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π –ø—É—Å—Ç ‚Äî –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ\n"
                    else:
                        await client(
                            tfunc.messages.SetChatAvailableReactionsRequest(
                                peer=channel,
                                available_reactions=ttypes.ChatReactionsSome(reactions=rx)
                            )
                        )
                        log += f"‚úÖ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏: {' '.join(custom)}\n"

                else:
                    await client(
                        tfunc.messages.SetChatAvailableReactionsRequest(
                            peer=channel,
                            available_reactions=ttypes.ChatReactionsAll()
                        )
                    )
                    log += "‚úÖ –û—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏\n"

            except Exception as e:
                log += f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∞–∫—Ü–∏–π: {e}\n"



            url = f"https://t.me/{ch_username}"
            log += f"‚úÖ {title} ‚Äî {url}\n"

            # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ("–ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω", "–§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", –ø–∏–Ω—ã –∏ —Ç.–ø.)
            from telethon import types as tltypes
            try:
                await asyncio.sleep(2.0)  # –¥–∞—ë–º —Ç–µ–ª–µ–≥–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—ã–µ –∏–≤–µ–Ω—Ç—ã
                svc_ids = []
                async for m in client.iter_messages(channel, limit=50):
                    action = getattr(m, "action", None)
                    is_service = isinstance(m, tltypes.MessageService)
                    is_known_action = isinstance(action, (
                        tltypes.MessageActionChannelCreate,
                        tltypes.MessageActionChatEditPhoto,
                        tltypes.MessageActionChatEditTitle,
                        tltypes.MessageActionHistoryClear,
                        tltypes.MessageActionPinMessage,
                        tltypes.MessageActionChatJoinedByLink,
                        tltypes.MessageActionChatAddUser,
                    ))
                    # –ù–ï —É–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞/—Ç–µ–∫—Å—Ç ‚Äî —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å
                    if is_service or is_known_action:
                        svc_ids.append(m.id)

                if svc_ids:
                    await client.delete_messages(channel, svc_ids)
                    log += f"üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(svc_ids)} —à—Ç.\n"
                else:
                    log += "üóëÔ∏è –°–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"

            except Exception as e:
                log += f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}\n"
                
             
            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
            donor = donor_channels[idx % len(donor_channels)]
            clean_donor = extract_username_or_id(donor)
            if not clean_donor:
                log += f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–Ω–æ—Ä–∞: {donor}\n"
                await client.disconnect()
                insert_task_create_log(task_id, account_id, log)
                return log
            try:
                from_channel = await client.get_entity(clean_donor)
            except Exception as e:
                log += f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª @{clean_donor}: {e}\n"
                await client.disconnect()
                insert_task_create_log(task_id, account_id, log)
                return log

            post_count = 0
            posts = []
            async for msg in client.iter_messages(from_channel, limit=copy_post_limit):
                if msg.message is None and msg.media is None:  # –ø—É—Å—Ç—è–∫–∏
                    continue
                if msg.forward or getattr(msg, 'action', None):
                    continue
                if msg.media and isinstance(msg.media, MessageMediaWebPage):
                    continue
                posts.append(msg)

            posts.reverse()
            for msg in posts:
                try:
                    if msg.media and isinstance(msg.media, MessageMediaWebPage):
                        await client.send_message(channel, msg.text or "üîó –°—Å—ã–ª–∫–∞ –±–µ–∑ –º–µ–¥–∏–∞")
                        log += "üìé –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç (web-preview –ø—Ä–æ–ø—É—â–µ–Ω–æ)\n"
                        post_count += 1
                        continue
                    if msg.text and msg.media:
                        try:
                            await client.send_message(channel, msg.text, file=msg.media)
                            log += "üìé –¢–µ–∫—Å—Ç+–º–µ–¥–∏–∞\n"
                        except Exception as media_err:
                            print(f"[DEBUG] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {media_err}")
                            await client.send_message(channel, msg.text)
                            log += "üìé –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (–º–µ–¥–∏–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)\n"
                    elif msg.text:
                        await client.send_message(channel, msg.text)
                        log += "üìé –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç\n"
                    elif msg.media:
                        try:
                            await client.send_file(channel, msg.media, caption="")
                            log += "üìé –ú–µ–¥–∏–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞\n"
                        except Exception as media_err:
                            log += f"‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞: {media_err}\n"
                            continue
                    post_count += 1
                except Exception as send_err:
                    log += f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {send_err}\n"
                    continue

                        
            log += f"üìé –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {post_count} –ø–æ—Å—Ç–æ–≤ –∏–∑ {clean_donor}\n"

            await client.disconnect()
            insert_task_create_log(task_id, account_id, log)
            return log

        except Exception as e:
            log += f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ @{acc_username}: {e}\n"
            insert_task_create_log(task_id, account_id, log)
            return log

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
    results = await asyncio.gather(
        *[process_account(i, acc) for i, acc in enumerate(filtered_accounts)],
        return_exceptions=True
    )

    # –°–≤–æ–¥–∫–∞
    accounts_count = len(filtered_accounts)
    update_task_accounts_count(task_id, accounts_count)
    update_task_status(task_id, "completed")

    # –õ–æ–≥ –∏–∑ –ë–î (–ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º)
    logs = get_task_create_logs(task_id)
    log_str = "\n\n".join([f"–ê–∫–∫–∞—É–Ω—Ç {account_id}:\n{log_text}" for account_id, log_text in logs])

    log_path = os.path.join(UPLOAD_FOLDER, f"create_channels_log_{task_id}.txt")
    with open(log_path, "w", encoding="utf-8") as f:
        f.write(log_str)

    ok_button = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –û–ö", callback_data="delete_log_message")]]
    )
    await message.answer_document(
        FSInputFile(log_path),
        caption="üìÑ –õ–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–æ–≤",
        reply_markup=ok_button
    )
    try:
        os.remove(log_path)
    except FileNotFoundError:
        pass

    await state.clear()




@router.callback_query(F.data == "proceed_create_channel")
@admin_only
async def run_create_channel(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    selected_ids = selected_accounts_create.get(user_id, [])

    if not selected_ids:
        await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç!", show_alert=True)
        return

    await state.clear()
    await state.set_state(ChannelCreation.waiting_for_titles)
    await state.update_data(selected_account_ids=selected_ids)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ edit!), —á—Ç–æ–±—ã –±—ã–ª bot_message_id
    sent_msg = await callback.message.answer(
        "üì• –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞–Ω–∞–ª–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ):",
        reply_markup=cancel_keyboard()
    )

    await state.update_data(bot_message_id=sent_msg.message_id)
    await callback.message.delete()
    await callback.answer()


@router.callback_query(F.data == "delete_log_message")
async def delete_log_message_handler(callback: CallbackQuery):
    try:
        await callback.message.delete()
        await callback.answer("‚úÖ –õ–æ–≥ —É–¥–∞–ª—ë–Ω!", show_alert=False)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–≥–∞: {e}")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–æ–≥.", show_alert=True)



@router.callback_query(F.data == "cancel_to_main_menu")
async def cancel_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üëã –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=start_menu_keyboard()
    )
    await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=False)
