# handlers/bulk_profile_update_task.py

import os, zipfile, uuid, datetime, pytz, asyncio, json
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from states.bulk_profile_update_states import BulkProfileUpdateFSM
from utils.check_access import admin_only
from app.db import get_all_accounts, get_account_by_id, get_connection
from aiogram.types import FSInputFile
from app.telegram_client import get_client
from telethon.tl.functions.account import UpdateProfileRequest, UpdateUsernameRequest
from telethon.tl.functions.photos import UploadProfilePhotoRequest
from app.memory_storage import bulk_profile_tasks_storage
from random import choice
from telethon.errors import UsernameOccupiedError, UsernameInvalidError
from PIL import Image
from telethon.tl.types import InputFile
from telethon.tl.functions.photos import GetUserPhotosRequest, DeletePhotosRequest
from telethon.tl.types import InputPhoto
from keyboards.main_menu import start_menu_keyboard as main_menu_keyboard
from typing import List, Dict, Any, Iterable, Optional
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest  # —É —Ç–µ–±—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ try/except
from app.db import get_account_groups_with_count   # —á—Ç–æ–±—ã –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å –≥—Ä—É–ø–ø—ã



from keyboards.bulk_profile_update_keyboards import (
    skip_firstname_keyboard,
    skip_lastname_keyboard,
    skip_bio_keyboard,
    run_now_keyboard,
    confirm_task_keyboard,
    ok_to_delete_keyboard,
    skip_avatar_keyboard,
    skip_username_keyboard,
)      

router = Router()




STATE_KEYS = {
    "ACCOUNTS": "bulk_all_accounts",
    "SELECTED": "bulk_selected_ids",
    "GROUP": "bulk_active_group",
    "PAGE": "bulk_page",
}

STATE_ACCOUNTS = "bulk_all_accounts"
STATE_SELECTED = "bulk_selected_ids"
STATE_PAGE     = "bulk_page"
PER_PAGE = 10  # —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å —Ç–≤–æ–∏–º bulk_accounts_keyboard


async def _get_bulk_state(state: FSMContext):
    data = await state.get_data()
    accounts = data.get(STATE_KEYS["ACCOUNTS"], [])
    selected = set(data.get(STATE_KEYS["SELECTED"], set()))
    active_group = data.get(STATE_KEYS["GROUP"], "all")
    page = int(data.get(STATE_KEYS["PAGE"], 0))
    return accounts, selected, active_group, page

async def _set_bulk_state(state: FSMContext, **kwargs):
    await state.update_data(**kwargs)

def _group_ids(accounts: List[Dict[str, Any]], group_id: int) -> set[int]:
    return {a["id"] for a in accounts if a.get("group_id") == group_id}



async def safe_edit_markup(message: types.Message, reply_markup: InlineKeyboardMarkup):
    try:
        await message.edit_reply_markup(reply_markup=reply_markup)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise


async def safe_edit_text(message: types.Message, text: str, reply_markup: InlineKeyboardMarkup, parse_mode: str | None = None):
    try:
        await message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise


def bulk_accounts_keyboard(
    accounts: List[Dict[str, Any]],
    selected: Iterable[int] | None,
    page: int = 0,
    per_page: int = 10,
    groups: Optional[List[Dict[str, Any]]] = None,  # [{'id','name','emoji','count'}, ...]
) -> InlineKeyboardMarkup:
    selected = set(selected or [])

    total = len(accounts)
    start = page * per_page
    chunk = accounts[start:start + per_page]

    rows: List[List[InlineKeyboardButton]] = []

    # —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
    for acc in chunk:
        acc_id = acc["id"]
        uname  = acc.get("username") or "-"
        if uname != "-" and not str(uname).startswith("@"):
            uname = f"@{uname}"
        phone  = acc.get("phone") or "-"
        mark   = "‚úÖ" if acc_id in selected else "‚èπÔ∏è"
        txt    = f"{mark} {acc_id} ‚ñ∏ {uname} ‚ñ∏ {phone}"
        rows.append([InlineKeyboardButton(text=txt, callback_data=f"bulk_toggle:{acc_id}")])

    # –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"bulk_page:{page-1}"))
    if start + per_page < total:
        nav.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"bulk_page:{page+1}"))
    if nav:
        rows.append(nav)

    # —á–∏–ø—Å—ã –≥—Ä—É–ø–ø (–≤–Ω–∏–∑—É): –±—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã
    chips: List[InlineKeyboardButton] = []
    if groups:
        for g in groups:
            cnt = int(g.get("count") or 0)
            if cnt < 1:
                continue  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã —Å 1+
            name = f"{g.get('emoji','')} {g.get('name','')}".strip()
            label = f"{name} ({cnt})"
            chips.append(InlineKeyboardButton(text=label, callback_data=f"bulk_group_pick:{g['id']}"))

    # –ø–æ 3 —á–∏–ø—Å–∞ –≤ —Ä—è–¥
    for i in range(0, len(chips), 3):
        rows.append(chips[i:i+3])

    # –º–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–≥–ª–æ–±–∞–ª—å–Ω–æ)
    rows.append([
        InlineKeyboardButton(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="bulk_select_all"),
        InlineKeyboardButton(text="‚èπÔ∏è –°–Ω—è—Ç—å –≤—Å–µ",   callback_data="bulk_clear_all"),
    ])

    rows.append([
        InlineKeyboardButton(text="‚û° –î–∞–ª–µ–µ",  callback_data="bulk_next"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_main"),
    ])

    return InlineKeyboardMarkup(inline_keyboard=rows)






# –°—Ç–∞—Ä—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data == "start_bulk_profile_update")
@admin_only
async def start_bulk_update(callback: types.CallbackQuery, state: FSMContext):
    accounts = get_all_accounts()
    if not accounts:
        await callback.message.edit_text("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        await callback.answer()
        return

    groups = get_account_groups_with_count()

    await state.set_state(BulkProfileUpdateFSM.selecting_accounts)
    await state.update_data(
        accounts=accounts,
        selected_accounts=[],
        page=0,
    )

    await callback.message.edit_text(
        "üîÑ <b>–®–∞–≥ 1:</b> –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ¬ª.\n"
        "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Å–µ—Ö –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã (–∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ —Å–ø–∏—Å–∫–∞).\n"
        "–ö–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚û° –î–∞–ª–µ–µ¬ª.",
        reply_markup=bulk_accounts_keyboard(accounts, selected=[], page=0, groups=groups),
        parse_mode="HTML"
    )
    await callback.answer()



@router.callback_query(F.data.startswith("bulk_toggle:"), BulkProfileUpdateFSM.selecting_accounts)
@admin_only
async def bulk_toggle_account(callback: types.CallbackQuery, state: FSMContext):
    acc_id = int(callback.data.split(":")[1])
    data = await state.get_data()
    accounts = data.get("accounts", [])
    selected = set(data.get("selected_accounts", []))
    page = int(data.get("page", 0))

    if acc_id in selected: selected.remove(acc_id)
    else: selected.add(acc_id)
    await state.update_data(selected_accounts=list(selected))

    try:
        await callback.message.edit_reply_markup(
            reply_markup=bulk_accounts_keyboard(accounts, selected, page=page, groups=get_account_groups_with_count())
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise
    await callback.answer()

@router.callback_query(F.data.startswith("bulk_page:"), BulkProfileUpdateFSM.selecting_accounts)
@admin_only
async def bulk_page(callback: types.CallbackQuery, state: FSMContext):
    page = int(callback.data.split(":")[1])
    data = await state.get_data()
    accounts = data.get("accounts", [])
    selected = set(data.get("selected_accounts", []))
    await state.update_data(page=page)

    await callback.message.edit_reply_markup(
        reply_markup=bulk_accounts_keyboard(accounts, selected, page=page, groups=get_account_groups_with_count())
    )
    await callback.answer()

@router.callback_query(F.data == "bulk_select_all", BulkProfileUpdateFSM.selecting_accounts)
@admin_only
async def bulk_select_all(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    accounts = data.get("accounts", [])
    all_ids = [a["id"] for a in accounts]
    page = int(data.get("page", 0))
    await state.update_data(selected_accounts=all_ids)

    await callback.message.edit_reply_markup(
        reply_markup=bulk_accounts_keyboard(accounts, set(all_ids), page=page, groups=get_account_groups_with_count())
    )
    await callback.answer("‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ")

@router.callback_query(F.data == "bulk_clear_all", BulkProfileUpdateFSM.selecting_accounts)
@admin_only
async def bulk_clear_all(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    accounts = data.get("accounts", [])
    page = int(data.get("page", 0))
    await state.update_data(selected_accounts=[])

    await callback.message.edit_reply_markup(
        reply_markup=bulk_accounts_keyboard(accounts, set(), page=page, groups=get_account_groups_with_count())
    )
    await callback.answer("‚ôªÔ∏è –°–±—Ä–æ—à–µ–Ω –≤—ã–±–æ—Ä")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–î–∞–ª–µ–µ" –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
@router.callback_query((F.data == "bulk_next") | (F.data == "proceed_after_selecting_accounts"))
@admin_only
async def proceed_after_selecting_accounts(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_ids = data.get("selected_accounts", [])

    if not selected_ids:
        await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç!", show_alert=True)
        return

    await state.update_data(selected_accounts=selected_ids)
    await state.set_state(BulkProfileUpdateFSM.uploading_avatars)

    new_msg = await callback.message.edit_text(
        "üñº <b>–®–∞–≥ 2:</b> –ó–∞–≥—Ä—É–∑–∏—Ç–µ ZIP –∞—Ä—Ö–∏–≤ —Å –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏ (.jpg).\n\n"
        "–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã JPG. –î—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
        reply_markup=skip_avatar_keyboard(),
        parse_mode="HTML"
    )
    await state.update_data(current_menu_id=new_msg.message_id)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ ZIP –∞—Ä—Ö–∏–≤–∞ —Å –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏
@router.message(BulkProfileUpdateFSM.uploading_avatars, F.document)
@admin_only
async def upload_avatars_zip(message: types.Message, state: FSMContext):
    document = message.document

    if not document.file_name.endswith(".zip"):
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP –∞—Ä—Ö–∏–≤ —Å –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏ (.jpg).")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞—Ä—Ö–∏–≤–æ–º
    data = await state.get_data()
    messages_to_delete = data.get("messages_to_delete", [])
    messages_to_delete.append(message.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)
    # ‚úÖ –ü—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.delete()
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ZIP-—Ñ–∞–π–ª –∏–∑ —á–∞—Ç–∞: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ
    temp_folder = f"/tmp/bulk_profile_update_{uuid.uuid4().hex}/"
    os.makedirs(temp_folder, exist_ok=True)

    file_path = temp_folder + document.file_name

    await message.bot.download(document, destination=file_path)

    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
    avatars_folder = temp_folder + "avatars/"
    os.makedirs(avatars_folder, exist_ok=True)

    try:
        with zipfile.ZipFile(file_path, "r") as zip_ref:
            zip_ref.extractall(avatars_folder)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ ZIP: {e}")
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ JPG —Ñ–∞–π–ª—ã
    jpg_files = []
    for root, _, files in os.walk(avatars_folder):
        for file in files:
            if file.lower().endswith(".jpg"):
                jpg_files.append(os.path.join(root, file))

    if not jpg_files:
        await message.answer("‚ùå –í –∞—Ä—Ö–∏–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ JPG —Ñ–∞–π–ª–∞!")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç–∏ –∫ –∞–≤–∞—Ç–∞—Ä–∫–∞–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(avatars_folder=avatars_folder, avatars_list=jpg_files)
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é
    data = await state.get_data()
    old_menu_id = data.get("current_menu_id")
    if old_menu_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=old_menu_id)
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é: {e}")


    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.set_state(BulkProfileUpdateFSM.uploading_usernames)

    new_msg = await message.answer(
        "‚úçÔ∏è <b>–®–∞–≥ 3:</b> –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ username:\n\n"
        "- –õ–∏–±–æ —Ç–µ–∫—Å—Ç–æ–º (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫—É)\n"
        "- –õ–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .txt —Ñ–∞–π–ª",
        reply_markup=skip_username_keyboard(),
        parse_mode="HTML"
    )
    await state.update_data(current_menu_id=new_msg.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ (—Ç–µ–∫—Å—Ç –∏–ª–∏ .txt —Ñ–∞–π–ª)
@router.message(BulkProfileUpdateFSM.uploading_usernames)
@admin_only
async def upload_usernames(message: types.Message, state: FSMContext):
    usernames = []

    if message.document:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª
        document = message.document
        if not document.file_name.endswith(".txt"):
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ TXT —Ñ–∞–π–ª —Å —é–∑–µ—Ä–Ω–µ–π–º–∞–º–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞—Ä—Ö–∏–≤–æ–º
        data = await state.get_data()
        messages_to_delete = data.get("messages_to_delete", [])
        messages_to_delete.append(message.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)
        
        # ‚úÖ –ü—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—å
        try:
            await message.delete()
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å username: {e}")

        temp_file = f"/tmp/{uuid.uuid4().hex}.txt"
        await message.bot.download(document, destination=temp_file)

        with open(temp_file, "r", encoding="utf-8") as f:
            lines = f.readlines()
            usernames = [line.strip() for line in lines if line.strip()]
        
        os.remove(temp_file)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        try:
            await message.delete()
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å username: {e}")
        
        lines = message.text.strip().splitlines()
        usernames = [line.strip() for line in lines if line.strip()]

    if not usernames:
        await message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    data = await state.get_data()
    selected_ids = data.get("selected_accounts", [])

    if len(usernames) < len(selected_ids):
        await message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤!\n\n–í—ã–±—Ä–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_ids)}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤: {len(usernames)}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤, —á—Ç–æ–±—ã –∫–∞–∂–¥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –¥–æ—Å—Ç–∞–ª—Å—è —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π username.",
            parse_mode="HTML"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ –≤ FSM
    await state.update_data(usernames_list=usernames)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é
    data = await state.get_data()
    old_menu_id = data.get("current_menu_id")
    if old_menu_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=old_menu_id)
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é: {e}")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.set_state(BulkProfileUpdateFSM.uploading_firstnames)

    new_msg = await message.answer(
        "üë§ <b>–®–∞–≥ 4:</b> –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω:\n\n"
        "- –õ–∏–±–æ —Ç–µ–∫—Å—Ç–æ–º (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫—É)\n"
        "- –õ–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .txt —Ñ–∞–π–ª\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º—ë–Ω.",
        reply_markup=skip_firstname_keyboard(),
        parse_mode="HTML"
    )
    await state.update_data(current_menu_id=new_msg.message_id)
    
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –ò–ú–Å–ù (—Ç–µ–∫—Å—Ç –∏–ª–∏ .txt —Ñ–∞–π–ª)
@router.message(BulkProfileUpdateFSM.uploading_firstnames)
@admin_only
async def upload_firstnames(message: types.Message, state: FSMContext):
    firstnames = []

    if message.document:
        document = message.document
        if not document.file_name.endswith(".txt"):
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ TXT —Ñ–∞–π–ª —Å –∏–º–µ–Ω–∞–º–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
            return
            
         # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞—Ä—Ö–∏–≤–æ–º
        data = await state.get_data()
        messages_to_delete = data.get("messages_to_delete", [])
        messages_to_delete.append(message.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)
        
        # ‚úÖ –ü—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—å
        try:
            await message.delete()
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å firstname: {e}")

        temp_file = f"/tmp/{uuid.uuid4().hex}.txt"
        await message.bot.download(document, destination=temp_file)

        with open(temp_file, "r", encoding="utf-8") as f:
            lines = f.readlines()
            firstnames = [line.strip() for line in lines if line.strip()]
        
        os.remove(temp_file)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        try:
            await message.delete()
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å firstname: {e}")

        lines = message.text.strip().splitlines()
        firstnames = [line.strip() for line in lines if line.strip()]

    if not firstnames:
        await message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ù–µ –æ–±–Ω–æ–≤–ª—è—Ç—å –ò–º—è¬ª.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–µ–Ω–∞
    await state.update_data(firstnames_list=firstnames)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é
    data = await state.get_data()
    old_menu_id = data.get("current_menu_id")
    if old_menu_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=old_menu_id)
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é: {e}")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.set_state(BulkProfileUpdateFSM.uploading_lastnames)

    new_msg = await message.answer(
        "üë§ <b>–®–∞–≥ 5:</b> –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Ñ–∞–º–∏–ª–∏–π:\n\n"
        "- –õ–∏–±–æ —Ç–µ–∫—Å—Ç–æ–º (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫—É)\n"
        "- –õ–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .txt —Ñ–∞–π–ª\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–π.",
        reply_markup=skip_lastname_keyboard(),
        parse_mode="HTML"
    )
    await state.update_data(current_menu_id=new_msg.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –§–ê–ú–ò–õ–ò–ô (—Ç–µ–∫—Å—Ç –∏–ª–∏ .txt —Ñ–∞–π–ª)
@router.message(BulkProfileUpdateFSM.uploading_lastnames)
@admin_only
async def upload_lastnames(message: types.Message, state: FSMContext):
    lastnames = []

    if message.document:
        document = message.document
        if not document.file_name.endswith(".txt"):
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ TXT —Ñ–∞–π–ª —Å —Ñ–∞–º–∏–ª–∏—è–º–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
            return
            
         # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞—Ä—Ö–∏–≤–æ–º
        data = await state.get_data()
        messages_to_delete = data.get("messages_to_delete", [])
        messages_to_delete.append(message.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)
        
         # ‚úÖ –ü—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—å
        try:
            await message.delete()
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å lastname: {e}")

        temp_file = f"/tmp/{uuid.uuid4().hex}.txt"
        await message.bot.download(document, destination=temp_file)

        with open(temp_file, "r", encoding="utf-8") as f:
            lines = f.readlines()
            lastnames = [line.strip() for line in lines if line.strip()]
        
        os.remove(temp_file)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        try:
            await message.delete()
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å lastname: {e}")
        lines = message.text.strip().splitlines()
        lastnames = [line.strip() for line in lines if line.strip()]

    if not lastnames:
        await message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ñ–∞–º–∏–ª–∏–π –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ù–µ –æ–±–Ω–æ–≤–ª—è—Ç—å –§–∞–º–∏–ª–∏—é¬ª.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–º–∏–ª–∏–∏
    await state.update_data(lastnames_list=lastnames)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é
    data = await state.get_data()
    old_menu_id = data.get("current_menu_id")
    if old_menu_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=old_menu_id)
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é: {e}")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.set_state(BulkProfileUpdateFSM.uploading_bios)

    new_msg = await message.answer(
        "üìù <b>–®–∞–≥ 6:</b> –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ BIO:\n\n"
        "- –õ–∏–±–æ —Ç–µ–∫—Å—Ç–æ–º (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫—É)\n"
        "- –õ–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .txt —Ñ–∞–π–ª\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –±–∏–æ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ç–µ–∫—Å—Ç–∞.",
        reply_markup=skip_bio_keyboard(),
        parse_mode="HTML"
    )
    await state.update_data(current_menu_id=new_msg.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–ò–û (—Ç–µ–∫—Å—Ç –∏–ª–∏ .txt —Ñ–∞–π–ª)
@router.message(BulkProfileUpdateFSM.uploading_bios)
@admin_only
async def upload_bios(message: types.Message, state: FSMContext):
    bios = []

    if message.document:
        document = message.document
        if not document.file_name.endswith(".txt"):
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ TXT —Ñ–∞–π–ª —Å –±–∏–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
            return
            
         # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞—Ä—Ö–∏–≤–æ–º
        data = await state.get_data()
        messages_to_delete = data.get("messages_to_delete", [])
        messages_to_delete.append(message.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)
        
         # ‚úÖ –ü—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—å
        try:
            await message.delete()
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å bio: {e}")

        temp_file = f"/tmp/{uuid.uuid4().hex}.txt"
        await message.bot.download(document, destination=temp_file)

        with open(temp_file, "r", encoding="utf-8") as f:
            lines = f.readlines()
            bios = [line.strip() for line in lines if line.strip()]
        
        os.remove(temp_file)
    else:
         # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        try:
            await message.delete()
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å bio: {e}")
        lines = message.text.strip().splitlines()
        bios = [line.strip() for line in lines if line.strip()]

    if not bios:
        await message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ BIO –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—á–∏—Å—Ç–∏—Ç—å BIO¬ª.")
        return

    data = await state.get_data()
    selected_ids = data.get("selected_accounts", [])

    if len(bios) < len(selected_ids):
        await message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BIO!\n\n–í—ã–±—Ä–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_ids)}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ BIO: {len(bios)}\n\n"
            "–ö–∞–∂–¥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –Ω—É–∂–Ω–æ —Å–≤–æ—ë —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ BIO. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫.",
            parse_mode="HTML"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ BIO
    await state.update_data(bios_list=bios)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é
    data = await state.get_data()
    old_menu_id = data.get("current_menu_id")
    if old_menu_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=old_menu_id)
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é: {e}")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É: –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞
    await state.set_state(BulkProfileUpdateFSM.choosing_schedule)

    new_msg = await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.",
        reply_markup=run_now_keyboard(),
        parse_mode="HTML"
    )
    await state.update_data(current_menu_id=new_msg.message_id)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
@router.callback_query(F.data == "run_now")
@admin_only
async def run_task_now(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(scheduled_at=None)  # –ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    await state.set_state(BulkProfileUpdateFSM.confirming_task)

    await callback.message.edit_text(
        "‚úÖ –ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!\n\n–ù–∞–∂–º–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞.",
        reply_markup=confirm_task_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞
@router.message(BulkProfileUpdateFSM.choosing_schedule)
@admin_only
async def set_task_schedule(message: types.Message, state: FSMContext):
    try:
        user_input = message.text.strip()
        dt = datetime.datetime.strptime(user_input, "%d.%m.%Y %H:%M")

        # –ü—Ä–∏–≤–µ–¥–µ–º –∫ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ú–æ—Å–∫–≤–∞ (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–Ω–æ –ø–æ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥—Ä—É–≥–æ–π)
        moscow_tz = pytz.timezone("Europe/Moscow")
        dt = moscow_tz.localize(dt)

        now = datetime.datetime.now(moscow_tz)
        if dt < now:
            await message.answer("‚ùå –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º.")
            return

        await state.update_data(scheduled_at=dt.isoformat())
        await state.set_state(BulkProfileUpdateFSM.confirming_task)

        await message.answer(
            f"‚úÖ –ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {dt.strftime('%d.%m.%Y %H:%M')}\n\n–ù–∞–∂–º–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞.",
            reply_markup=confirm_task_keyboard()
        )

    except Exception:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <b>30.04.2025 14:00</b>",
            parse_mode="HTML"
        )


@router.callback_query(F.data == "confirm_bulk_profile_update")
@admin_only
async def confirm_bulk_profile_update(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    skip_avatar = data.get("skip_avatar", False)
    selected_accounts = data.get("selected_accounts", [])
    avatars = data.get("avatars_list", [])
    usernames = data.get("usernames_list", [])
    firstnames = data.get("firstnames_list", [])
    lastnames = data.get("lastnames_list", [])
    bios = data.get("bios_list", [])
    scheduled_at = data.get("scheduled_at", None)

    if scheduled_at:
        await callback.message.edit_text("üïë –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.")
        await callback.answer()
        return
        
    conn = get_connection()
    cur = conn.cursor()
    
    task_type = "bulk_profile_update"
    payload = {
        "accounts": selected_accounts,
        "usernames": usernames,
        "firstnames": firstnames,
        "lastnames": lastnames,
        "bios": bios,
        "avatars": avatars,
        "skip_avatar": skip_avatar,
        "scheduled_at": scheduled_at
    }

    cur.execute(
        """
        INSERT INTO tasks (account_id, type, payload, status, is_active, is_master, created_at)
        VALUES (%s, %s, %s, %s, true, true, now())
        RETURNING id
        """,
        (None, task_type, json.dumps(payload), "pending")
    )
    task_id = cur.fetchone()[0]
    conn.commit()
    cur.close()
    conn.close()

    new_task = {
        "id": task_id,
        "created_at": datetime.datetime.now().strftime("%d.%m.%Y %H:%M"),
        "status": "–ê–∫—Ç–∏–≤–Ω–æ",
        "accounts_count": len(selected_accounts),
        "description": "–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"
    }
    bulk_profile_tasks_storage["tasks"].append(new_task)

    launch_msg = await callback.message.edit_text(
    "üöÄ –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞! –ò–¥—ë—Ç –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π, –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –∑–∞–¥–∞—á–∏ –í–∞–º –ø—Ä–∏–¥–µ—Ç –ª–æ–≥!"
    )

    # –ñ–¥—ë–º 2 —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
    await asyncio.sleep(2)

    # –ü—Ä–æ–±—É–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∏–ª–∏ –º–µ–Ω—é –∑–∞–¥–∞—á)
    try:
        await launch_msg.edit_text(
            "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –º–µ–Ω—é –∑–∞–¥–∞—á (–≤—Å—Ç–∞–≤—å —Å—é–¥–∞ –Ω—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç)",
            reply_markup=main_menu_keyboard()  # –∏–ª–∏ menu_tasks_keyboard()
        )
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞: {e}")


    logs = []

    async def update_single_account(
        account_id, 
        avatar_path=None, 
        username=None, 
        firstname=None, 
        lastname=None, 
        bio=None, 
        logs=None,
        skip_avatar=False,
        task_log_id=None
    ):
        account_log = []
        try:
            account = get_account_by_id(account_id)
            proxy = None
            if account.get("proxy_host"):
                proxy = {
                    "proxy_host": account.get("proxy_host"),
                    "proxy_port": account.get("proxy_port"),
                    "proxy_username": account.get("proxy_username"),
                    "proxy_password": account.get("proxy_password"),
                }

            client = await get_client(account["session_string"], proxy)
            await client.connect()

            account_log.append(f"–ê–∫–∫–∞—É–Ω—Ç ID: {account_id}, Username: @{account.get('username', '-')}")
            print(f"[DEBUG] –í–Ω—É—Ç—Ä–∏ update_single_account: task_log_id = {task_log_id}")
            
            if not skip_avatar:
                account_log.append("üñºÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–≤–∞—Ç–∞—Ä–æ–∫")
                photos = await client(GetUserPhotosRequest(
                    user_id='me',
                    offset=0,
                    max_id=0,
                    limit=10
                ))

                if photos.photos:
                    photo_ids = [InputPhoto(
                        id=p.id,
                        access_hash=p.access_hash,
                        file_reference=p.file_reference
                    ) for p in photos.photos]

                    await client(DeletePhotosRequest(id=photo_ids))
                    account_log.append(f"üóë –£–¥–∞–ª–µ–Ω–æ {len(photo_ids)} —Å—Ç–∞—Ä—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫")
                    print(f"[DEBUG] –£–¥–∞–ª–µ–Ω–æ {len(photo_ids)} –∞–≤–∞—Ç–∞—Ä–æ–∫ —É –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id}")
                else:
                    print(f"[DEBUG] –£ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫")

                if avatar_path and os.path.exists(avatar_path):
                    try:
                        size = os.path.getsize(avatar_path)
                        if size > 5 * 1024 * 1024:
                            raise ValueError("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>5MB)")
                        print(f"[DEBUG] –ê–≤–∞—Ç–∞—Ä–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {avatar_path}, —Ä–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç")
                        file = await client.upload_file(avatar_path)
                        await client(UploadProfilePhotoRequest(file=file))
                        account_log.append("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ –∞–≤–∞—Ç–∞—Ä –∞–∫–∫–∞—É–Ω—Ç–∞")
                        print("[DEBUG] –ê–≤–∞—Ç–∞—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    except Exception as e:
                        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
                        account_log.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
                else:
                    print(f"[WARN] –ê–≤–∞—Ç–∞—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {avatar_path}")
                    account_log.append("‚ùå –ê–≤–∞—Ç–∞—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
            else:
                account_log.append("‚è≠ –®–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –ø—Ä–æ–ø—É—â–µ–Ω")
                print("[DEBUG] –®–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –ø—Ä–æ–ø—É—â–µ–Ω")

            if username:
                try:
                    await client(UpdateUsernameRequest(username=username))
                    account_log.append("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ username")
                except UsernameOccupiedError:
                    account_log.append("‚ùå Username –∑–∞–Ω—è—Ç")
                except UsernameInvalidError:
                    account_log.append("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username")
                except Exception as e:
                    account_log.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ username: {e}")

            update_data = {}
            if firstname:
                update_data["first_name"] = firstname
            if lastname:
                update_data["last_name"] = lastname
            if bio is not None:
                update_data["about"] = bio

            if update_data:
                try:
                    await client(UpdateProfileRequest(**update_data))
                    account_log.append("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –±–∏–æ")
                except Exception as e:
                    account_log.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")

            await client.disconnect()

        except Exception as e:
            account_log.append(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id}: {e}")

        if logs is not None:
            logs.append("\n".join(account_log))
            logs.append("________________________")


    # –û–±—Ä–µ–∑–∞–µ–º —Å–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –¥–ª–∏–Ω–Ω–µ–µ, —á–µ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    if usernames and len(usernames) > len(selected_accounts):
        usernames = usernames[:len(selected_accounts)]
    if firstnames and len(firstnames) > len(selected_accounts):
        firstnames = firstnames[:len(selected_accounts)]
    if lastnames and len(lastnames) > len(selected_accounts):
        lastnames = lastnames[:len(selected_accounts)]
    if bios and len(bios) > len(selected_accounts):
        bios = bios[:len(selected_accounts)]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —é–∑–µ—Ä–Ω–µ–π–º–æ–≤
    if usernames and len(usernames) < len(selected_accounts):
        await callback.message.edit_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        await callback.answer()
        return

    tasks = []
    for idx, account_id in enumerate(selected_accounts):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–∫
        avatar = None
        if not skip_avatar and avatars:
            if len(avatars) >= len(selected_accounts):
                avatar = avatars[idx]
            else:
                avatar = choice(avatars)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤
        uname = usernames[idx] if usernames and idx < len(usernames) else None

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º—ë–Ω
        fname = None
        if firstnames:
            if len(firstnames) >= len(selected_accounts):
                fname = firstnames[idx]
            else:
                fname = choice(firstnames)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–π
        lname = None
        if lastnames:
            if len(lastnames) >= len(selected_accounts):
                lname = lastnames[idx]
            else:
                lname = choice(lastnames)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ BIO
        bio = None
        if bios:
            if len(bios) >= len(selected_accounts):
                bio = bios[idx]
            else:
                bio = choice(bios)

        tasks.append(
            update_single_account(
                account_id=account_id,
                avatar_path=avatar,
                username=uname,
                firstname=fname,
                lastname=lname,
                bio=bio,
                logs=logs,
                skip_avatar=skip_avatar,
                task_log_id=task_id
            )
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    now_str = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
    logs.append(f"–ó–∞–¥–∞—á–∞ ‚Ññ{task_id} –Ω–∞—á–∞—Ç–∞")
    logs.append(f"üïì –í—Ä–µ–º—è: {now_str}")
    logs.append(f"üë• –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_accounts)}\n")


    await asyncio.gather(*tasks)
    
    # ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ó–ê–î–ê–ß–ò –í –ë–î
    try:
        conn_update = get_connection()
        cur_update = conn_update.cursor()
        cur_update.execute("""
            UPDATE tasks
            SET status = %s, updated_at = now()
            WHERE id = %s
        """, ("completed", task_id))
        conn_update.commit()
        cur_update.close()
        conn_update.close()
        print(f"[INFO] –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ 'completed'")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ –ë–î –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    conn = get_connection()
    cur = conn.cursor()
    for entry in logs:
        cur.execute("""
            INSERT INTO task_logs (task_id, timestamp, message, status)
            VALUES (%s, now(), %s, 'done')
        """, (task_id, entry))
    conn.commit()
    cur.close()
    conn.close()


    for task in bulk_profile_tasks_storage["tasks"]:
        if task["id"] == task_id:
            task["status"] = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
            task["finished_at"] = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
            break

    temp_log_path = f"/tmp/bulk_profile_update_log_{uuid.uuid4().hex}.txt"

    if not logs:
        logs.append("‚ùó –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –æ—à–∏–±–∫–∞–º–∏ –∏–ª–∏ –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")

    try:
        with open(temp_log_path, "w", encoding="utf-8") as f:
            f.write("\n\n".join(logs))
            
    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞: {e}")
        await state.clear()
        return
            
    # ‚è∫Ô∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏ –≤ –ë–î –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    try:
        conn = get_connection()
        cur = conn.cursor()
        for entry in logs:
            cur.execute("""
                INSERT INTO task_logs (task_id, timestamp, message, status)
                VALUES (%s, now(), %s, 'done')
            """, (task_id, entry))
        conn.commit()
        cur.close()
        conn.close()
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ –≤ –ë–î: {e}")
  

    if os.path.exists(temp_log_path) and os.path.getsize(temp_log_path) > 0:
        try:
            log_file = FSInputFile(temp_log_path)
            await callback.message.answer_document(
                document=log_file,
                caption="üìù –õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏",
                reply_markup=ok_to_delete_keyboard()
            )
        except Exception as e:
            await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞: {e}")
    else:
        await callback.message.answer("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –ª–æ–≥-—Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")

    try:
        os.remove(temp_log_path)
    except Exception:
        pass
        
    data = await state.get_data()
    messages_to_delete = data.get("messages_to_delete", [])
    user_id = callback.from_user.id

    for msg_id in messages_to_delete:
        try:
            await callback.bot.delete_message(chat_id=user_id, message_id=msg_id)
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")


    await state.clear()




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –û–ö ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.callback_query(F.data == "delete_log_message")
@admin_only
async def delete_log_message(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –í—Å–µ–≥–¥–∞ –ª—É—á—à–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ callback, –Ω–æ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ
    try:
        await callback.answer("‚úÖ –õ–æ–≥ —É–¥–∞–ª—ë–Ω!", show_alert=False)
    except Exception as e:
        print(f"[WARN] –û—Ç–≤–µ—Ç –Ω–∞ callback –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å BIO"
@router.callback_query(F.data == "skip_bio")
@admin_only
async def skip_bio(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(bios_list=None)  # BIO –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π
    await state.set_state(BulkProfileUpdateFSM.choosing_schedule)

    await callback.message.edit_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.",
        reply_markup=run_now_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–µ –æ–±–Ω–æ–≤–ª—è—Ç—å –ò–º—è"
@router.callback_query(F.data == "skip_firstname")
@admin_only
async def skip_firstname(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(firstnames_list=None)
    await state.set_state(BulkProfileUpdateFSM.uploading_lastnames)

    await callback.message.edit_text(
        "üë§ <b>–®–∞–≥ 5:</b> –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Ñ–∞–º–∏–ª–∏–π:\n\n"
        "- –õ–∏–±–æ —Ç–µ–∫—Å—Ç–æ–º (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫—É)\n"
        "- –õ–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .txt —Ñ–∞–π–ª\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–π.",
        reply_markup=skip_lastname_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–µ –æ–±–Ω–æ–≤–ª—è—Ç—å –§–∞–º–∏–ª–∏—é"
@router.callback_query(F.data == "skip_lastname")
@admin_only
async def skip_lastname(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(lastnames_list=None)
    await state.set_state(BulkProfileUpdateFSM.uploading_bios)

    await callback.message.edit_text(
        "üìù <b>–®–∞–≥ 6:</b> –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ BIO:\n\n"
        "- –õ–∏–±–æ —Ç–µ–∫—Å—Ç–æ–º (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫—É)\n"
        "- –õ–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .txt —Ñ–∞–π–ª\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –±–∏–æ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ç–µ–∫—Å—Ç–∞.",
        reply_markup=skip_bio_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "skip_avatar")
@admin_only
async def skip_avatar(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(
        avatars_list=None,
        skip_avatar=True
    )
    await state.set_state(BulkProfileUpdateFSM.uploading_usernames)

    await callback.message.edit_text(
        "‚úçÔ∏è –®–∞–≥ 3: –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ username:\n\n"
        "- –õ–∏–±–æ —Ç–µ–∫—Å—Ç–æ–º (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫—É)\n"
        "- –õ–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .txt —Ñ–∞–π–ª\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É username.",
        reply_markup=skip_username_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "skip_username")
@admin_only
async def skip_username(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(usernames_list=None)
    await state.set_state(BulkProfileUpdateFSM.uploading_firstnames)
    await callback.message.edit_text(
        "üë§ <b>–®–∞–≥ 4:</b> –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω:\n\n- –õ–∏–±–æ —Ç–µ–∫—Å—Ç–æ–º (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫—É)\n- –õ–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .txt —Ñ–∞–π–ª\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º—ë–Ω.",
        reply_markup=skip_firstname_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "clear_bio")
@admin_only
async def clear_bio(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(bios_list=[""])  # –û—á–∏—Å—Ç–∫–∞ –±–∏–æ
    await state.set_state(BulkProfileUpdateFSM.choosing_schedule)
    await callback.message.edit_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.",
        reply_markup=run_now_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "task_pick_accounts")
async def bulk_pick_accounts_start(callback: types.CallbackQuery, state: FSMContext):
    accounts = get_all_accounts()  # [{'id','username','phone','group_id', ...}]
    groups   = get_account_groups_with_count()

    await state.update_data(**{
        STATE_ACCOUNTS: accounts,
        STATE_SELECTED: set(),
        STATE_PAGE: 0,
    })

    kb = bulk_accounts_keyboard(accounts, set(), page=0, per_page=10, groups=groups)
    await callback.message.edit_text(
        "–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ¬ª.\n"
        "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Å–µ—Ö –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.\n"
        "–ö–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚û° –î–∞–ª–µ–µ¬ª.",
        reply_markup=kb
    )
    await callback.answer()

@router.callback_query(F.data.startswith("bulk_toggle:"))
async def bulk_toggle_account(callback: types.CallbackQuery, state: FSMContext):
    acc_id = int(callback.data.split(":")[1])
    data = await state.get_data()
    accounts = data.get(STATE_ACCOUNTS, [])
    selected = set(data.get(STATE_SELECTED, set()))
    page     = int(data.get(STATE_PAGE, 0))

    if acc_id in selected:
        selected.remove(acc_id)
    else:
        selected.add(acc_id)

    await state.update_data(**{STATE_SELECTED: selected})

    groups = get_account_groups_with_count()
    kb = bulk_accounts_keyboard(accounts, selected, page=page, per_page=10, groups=groups)
    await callback.message.edit_text("–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data.startswith("bulk_page:"))
async def bulk_change_page(callback: types.CallbackQuery, state: FSMContext):
    new_page = int(callback.data.split(":")[1])
    data = await state.get_data()
    accounts = data.get(STATE_ACCOUNTS, [])
    selected = set(data.get(STATE_SELECTED, set()))
    await state.update_data(**{STATE_PAGE: new_page})

    groups = get_account_groups_with_count()
    kb = bulk_accounts_keyboard(accounts, selected, page=new_page, per_page=10, groups=groups)
    await callback.message.edit_text("–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data == "bulk_select_all")
async def bulk_select_all(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    accounts = data.get(STATE_ACCOUNTS, [])
    selected = {a["id"] for a in accounts}  # –≥–ª–æ–±–∞–ª—å–Ω–æ –≤—Å–µ
    await state.update_data(**{STATE_SELECTED: selected})

    groups = get_account_groups_with_count()
    page = int(data.get(STATE_PAGE, 0))
    kb = bulk_accounts_keyboard(accounts, selected, page=page, per_page=10, groups=groups)
    await callback.message.edit_text("–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.", reply_markup=kb)
    await callback.answer("–í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã")

@router.callback_query(F.data == "bulk_clear_all")
async def bulk_clear_all(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    accounts = data.get(STATE_ACCOUNTS, [])
    await state.update_data(**{STATE_SELECTED: set()})

    groups = get_account_groups_with_count()
    page = int(data.get(STATE_PAGE, 0))
    kb = bulk_accounts_keyboard(accounts, set(), page=page, per_page=10, groups=groups)
    await callback.message.edit_text("–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.", reply_markup=kb)
    await callback.answer("–°–Ω—è—Ç—ã –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã")

# –ù–û–í–û–ï: –±—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –ø–æ –≥—Ä—É–ø–ø–µ
    
@router.callback_query(F.data.startswith("bulk_group_pick:"), BulkProfileUpdateFSM.selecting_accounts)
@admin_only
async def bulk_pick_group(callback: types.CallbackQuery, state: FSMContext):
    group_id = int(callback.data.split(":")[1])
    data = await state.get_data()
    accounts = data.get("accounts", [])
    page     = int(data.get("page", 0))

    # ids –≤—Å–µ—Ö –∞–∫–∫–æ–≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
    ids_in_group = {a["id"] for a in accounts if a.get("group_id") == group_id}

    # –µ—Å–ª–∏ –≥—Ä—É–ø–ø—ã –ø—É—Å—Ç–∞—è (–Ω–µ –¥–æ–ª–∂–Ω–æ, –º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ count>=1) ‚Äì –Ω–∞ –≤—Å—è–∫–∏–π
    if not ids_in_group:
        await callback.answer("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤", show_alert=False)
        return

    # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ‚Äî —Ç–æ–ª—å–∫–æ —ç—Ç–∞ –≥—Ä—É–ø–ø–∞
    await state.update_data(selected_accounts=list(ids_in_group))

    # –µ—Å–ª–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã–±–æ—Ä –≤–∏–∑—É–∞–ª—å–Ω–æ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è ‚Äî –º–æ–∂–Ω–æ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    start = page * PER_PAGE
    page_ids = {a["id"] for a in accounts[start:start + PER_PAGE]}
    changed_on_page = bool(ids_in_group & page_ids)  # –Ω–∞ —ç–∫—Ä–∞–Ω–µ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ

    kb = bulk_accounts_keyboard(
        accounts, ids_in_group,
        page=page, per_page=PER_PAGE,
        groups=get_account_groups_with_count()
    )

    if changed_on_page:
        await safe_edit_markup(callback.message, kb)

    await callback.answer(f"–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ (–∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(ids_in_group)})")


    # –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = bulk_accounts_keyboard(
        accounts, selected,
        page=page, per_page=PER_PAGE,
        groups=get_account_groups_with_count()
    )
    await safe_edit_markup(callback.message, kb)
    await callback.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ –≥—Ä—É–ø–ø—ã: {len(to_add)}")


