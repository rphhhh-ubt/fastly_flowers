# handlers/accounts.py
from telethon.tl.custom import Button
from telethon.tl.types import KeyboardButtonCallback  # –¢–∏–ø inline-–∫–Ω–æ–ø–∫–∏
import inspect
from datetime import datetime
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram import Router, types, F, Bot
from config import BOT_TOKEN
from utils.check_access import admin_only
from states.import_accounts import ImportStates
#from utils.import_accounts import import_accounts_from_zip
from app.utils.import_accounts import import_accounts_from_zip
from app.telegram_client import create_client_from_session, verify_account_status, get_client
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, CallbackQuery
from keyboards.account_actions import account_actions_keyboard
from utils.account_helpers import build_account_card
from app.db import (
    get_available_api_key,
    check_spamblock_status,
    get_all_accounts,
    get_account_by_id,
    update_account_info,
    update_spamblock_check,
    update_account_status_to_banned,
    update_account_status_to_active,
    update_account_status_to_needs_login,
    update_account_status_to_proxy_error,
    update_account_status_to_unknown,
    update_spamblock_check_full,
    get_all_proxies,
    count_accounts_using_proxy,
    get_proxy_by_id,
    update_account_proxy,
    log_spambot_message,
    has_spambot_log, 
    get_spambot_log,
    get_spambot_logs_for_account,
    update_account_status_to_frozen,
    get_connection,
    delete_account_by_id,
)
import os, zipfile, asyncio, traceback, socks, re, dateparser, pytz, tempfile, uuid
from keyboards.accounts_list import accounts_list_keyboard
from keyboards.back_menu import back_to_accounts_menu
from keyboards.accounts_menu import accounts_menu_keyboard
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.tl.functions.users import GetFullUserRequest
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from telethon.errors import RPCError
from telethon.tl.functions.account import UpdateUsernameRequest, UpdateProfileRequest
from keyboards.delete_accounts_keyboard import delete_accounts_keyboard
from keyboards.bulk_profile_update_keyboards import select_accounts_keyboard
from aiogram.filters.state import StateFilter
from utils.freeze_checker import is_profile_frozen



router = Router()
TEMP_FOLDER = "/tmp/uploads/"

def ok_delete_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùé –û–ö (—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ)", callback_data="delete_code_msg")]
    ])



@router.callback_query(F.data.startswith("accpg:"))
async def switch_accounts_page(callback: types.CallbackQuery):
    # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    try:
        _, page_str = callback.data.split(":")
        page = int(page_str)
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", show_alert=False)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∏–ª–∏ —Ç—É—Ç –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å DB limit/offset)
    accounts = get_all_accounts()  # –≤–µ—Ä–Ω—ë—Ç list[dict]

    # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    kb = accounts_list_keyboard(accounts, page=page)

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ç–∫—É (–±—ã—Å—Ç—Ä–µ–µ –∏ —á–∏—â–µ)
        await callback.message.edit_reply_markup(reply_markup=kb)
    except Exception as e:
        # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ, —Ç–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
        # –Ω–æ —á–∞—â–µ –≤—Å–µ–≥–æ edit_reply_markup –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–Ω–æ–≤–æ‚Ä¶")
        await callback.message.answer("–í—ã–±–µ—Ä–∏ –∞–∫–∫–∞—É–Ω—Ç:", reply_markup=kb)

    await callback.answer()


@router.message(Command("accounts"))
@admin_only
async def cmd_accounts(message: types.Message):
    accounts = get_all_accounts()

    if not accounts:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        return

    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç:",
        reply_markup=accounts_keyboard(accounts)
    )

@router.callback_query(F.data.startswith("account_"))
@admin_only
async def account_details(callback: types.CallbackQuery):
    
    # ---- –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º ID ----
    parts = callback.data.split("_")
    if len(parts) < 2 or not parts[1].isdigit():
        # –≠—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Äî –≤—ã—Ö–æ–¥–∏–º
        return
    account_id = int(parts[1])
    # --------------------------------

    bot = Bot(token=BOT_TOKEN)
    account = get_account_by_id(account_id)

    if not account:
        await callback.answer("‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        await bot.session.close()
        return

    text = build_account_card(account)

    try:
        await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    except Exception as e:
        print(f"[WARNING] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await bot.send_message(
        chat_id=callback.from_user.id,
        text=text,
        reply_markup=account_actions_keyboard(account_id),
        parse_mode="HTML"
    )

    await callback.answer()
    await bot.session.close()



# –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ callback_query:
@router.callback_query(F.data == "back_to_accounts")
@admin_only
async def back_to_accounts(callback: types.CallbackQuery):
    accounts = get_all_accounts()

    if not accounts:
        await callback.message.edit_text("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        return

    await callback.message.edit_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç:",
        reply_markup=accounts_keyboard(accounts)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("check_spamblock_"))
@admin_only
async def check_spamblock(callback: types.CallbackQuery):


    account_id = int(callback.data.split("_")[2])
    account = get_account_by_id(account_id)

    if not account:
        await callback.answer("‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    proxy = None
    if account.get("proxy_host"):
        proxy = {
            "proxy_host": account.get("proxy_host"),
            "proxy_port": account.get("proxy_port"),
            "proxy_username": account.get("proxy_username"),
            "proxy_password": account.get("proxy_password"),
        }

    client = None
    try:
        client = await get_client(account["session_string"], proxy)
        await client.connect()

        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å SpamBot
        try:
            await client.delete_dialog('SpamBot')
        except Exception:
            pass

        await asyncio.sleep(1)
        await client.send_message("SpamBot", "/start")

        result = None

        for _ in range(15):
            await asyncio.sleep(1.0)
            msgs = await client.get_messages("SpamBot", limit=1)
            if msgs and "/start" not in msgs[0].message:
                msg_text = msgs[0].message
                lowered = msg_text.lower()

                blocked_keywords = ["unfortunately", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω", "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", "limited", "–ª–∏–º–∏—Ç"]
                is_blocked = any(k in lowered for k in blocked_keywords)

                until = None
                match = re.search(r"(until|–¥–æ)\s+([A-Za-z–ê-–Ø–∞-—è0-9,\.\s:]+UTC)", msg_text, re.IGNORECASE)
                if match:
                    try:
                        date_str = match.group(2)
                        until = dateparser.parse(date_str, languages=["en", "ru"])
                        print(f"üìÜ –ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {until}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")

                result = {
                    "spam_blocked": is_blocked,
                    "until": until,
                    "reason": msg_text
                }
                break

        if not result:
            result = {
                "spam_blocked": False,
                "until": None,
                "reason": "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: SpamBot –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª"
            }

        # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
        update_spamblock_check_full(
            account_id,
            is_blocked=result["spam_blocked"],
            block_until=result.get("until"),
            reason=result.get("reason")
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π alert
        moscow_tz = pytz.timezone("Europe/Moscow")

        if result["spam_blocked"]:
            if result.get("until"):
                until_moscow = result["until"].astimezone(moscow_tz)
                block_until_str = until_moscow.strftime("%d.%m.%Y %H:%M")
                await callback.answer(f"üö´ –ê–∫–∫–∞—É–Ω—Ç –≤ —Å–ø–∞–º–±–ª–æ–∫–µ –¥–æ {block_until_str}!", show_alert=True)
            else:
                await callback.answer("üö´ –ê–∫–∫–∞—É–Ω—Ç –≤ —Å–ø–∞–º–±–ª–æ–∫–µ!", show_alert=True)
        else:
            await callback.answer("‚úÖ –°–ø–∞–º–±–ª–æ–∫–∞ –Ω–µ—Ç!", show_alert=True)

    except Exception as e:
        print(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º–±–ª–æ–∫–∞: {e}")
        error_text = str(e).lower()

        if any(word in error_text for word in ["proxy", "timeout", "connection refused", "network unreachable"]):
            error_reason = "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        else:
            error_reason = "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"

        update_spamblock_check_full(
            account_id,
            is_blocked=False,
            block_until=None,
            reason=error_reason
        )

        await callback.answer(error_reason, show_alert=True)

    finally:
        if client:
            try:
                await client.disconnect()
            except Exception:
                pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
        updated_account = get_account_by_id(account_id)
        card_text = build_account_card(updated_account)

        bot = Bot(token=BOT_TOKEN)
        await bot.send_message(
            chat_id=callback.from_user.id,
            text=card_text,
            reply_markup=account_actions_keyboard(account_id),
            parse_mode="HTML"
        )




@router.callback_query(F.data.startswith("check_proxy_"))
@admin_only
async def check_proxy(callback: types.CallbackQuery):
    account_id = int(callback.data.split("_")[2])
    account = get_account_by_id(account_id)

    if not account:
        await callback.answer("‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    proxy = None
    if account.get("proxy_host"):
        proxy = {
            "type": account.get("proxy_type"),
            "host": account.get("proxy_host"),
            "port": account.get("proxy_port"),
            "username": account.get("proxy_username"),
            "password": account.get("proxy_password"),
        }

    if not proxy:
        await callback.answer("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.", show_alert=True)
        return

    from app.utils.proxy_checker import is_proxy_working
    from app.db import update_proxy_status  # <<< –¥–æ–±–∞–≤–∏–ª –∏–º–ø–æ—Ä—Ç!

    is_working = await is_proxy_working(proxy)

    if is_working:
        update_proxy_status(account_id, "working")
        await callback.answer("üõ°Ô∏è –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!", show_alert=True)
    else:
        update_proxy_status(account_id, "bad")
        await callback.answer("‚ùó –ü—Ä–æ–∫—Å–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!", show_alert=True)
        

@router.callback_query(F.data.startswith("update_profile_"))
@admin_only
async def update_profile(callback: types.CallbackQuery):

    bot = Bot(token=BOT_TOKEN)

    account_id = int(callback.data.split("_")[2])
    account = get_account_by_id(account_id)

    if not account:
        await callback.answer("‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    try:
        await callback.message.delete()
    except Exception:
        pass

    message = await bot.send_message(
        chat_id=callback.from_user.id,
        text="üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞...",
        parse_mode="HTML"
    )

    await asyncio.sleep(1)

    proxy = None
    if account.get("proxy_host"):
        proxy = {
            "proxy_host": account.get("proxy_host"),
            "proxy_port": account.get("proxy_port"),
            "proxy_username": account.get("proxy_username"),
            "proxy_password": account.get("proxy_password"),
        }

    status = await verify_account_status(account["session_string"], account["phone"], proxy)

    if status == "OK":
        update_account_status_to_active(account_id)

        try:

            proxy = None
            if account.get("proxy_host"):
                proxy = {
                    "proxy_host": account.get("proxy_host"),
                    "proxy_port": account.get("proxy_port"),
                    "proxy_username": account.get("proxy_username"),
                    "proxy_password": account.get("proxy_password"),
                }

            client = await get_client(account["session_string"], proxy)
            await client.connect()

            me = await client.get_me()

            # –ü–æ–ª—É—á–∞–µ–º BIO
            full = await client(GetFullUserRequest(me))
            about = full.full_user.about or "-"  # <-- –í–ê–ñ–ù–û!
            print(f"full.full_user.about ‚Üí {about}")

            
            # üëâ –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ø—Ä–∏–Ω—Ç—ã
            print(f"üìù –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è:")
            print(f"Username: {me.username}")
            print(f"First Name: {me.first_name}")
            print(f"Last Name: {me.last_name}")
            print(f"About (BIO): {about}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑–µ
            update_account_info(
                account_id,
                username=me.username or None,
                first_name=me.first_name or "-",
                last_name=me.last_name or "-",
                about=about
            )

        except Exception as e:
            print(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è: {e}")

        finally:
            try:
                await client.disconnect()
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")

        # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.edit_text("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã–π.")  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await asyncio.sleep(2)  # –¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.delete()  # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        account = get_account_by_id(account_id)
        text = build_account_card(account)

        await bot.send_message(
            chat_id=callback.from_user.id,
            text=text,
            reply_markup=account_actions_keyboard(account_id),
            parse_mode="HTML"
        )
        await callback.answer()
        return

    if status == "NEEDS_ATTENTION":
        update_account_status_to_needs_login(account_id)
        await message.edit_text("‚ùó –ê–∫–∫–∞—É–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        await asyncio.sleep(2)  # –¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.delete()  # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã–π"
    
        account = get_account_by_id(account_id)
        text = build_account_card(account)
        await bot.send_message(
            chat_id=callback.from_user.id,
            text=text,
            reply_markup=account_actions_keyboard(account_id),
            parse_mode="HTML"
        )
        await callback.answer()
        return

    if status == "BANNED":
        update_account_status_to_banned(account_id)
        await message.edit_text("üö´ –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        await asyncio.sleep(2)
        await message.delete()

        account = get_account_by_id(account_id)
        text = build_account_card(account)
        await bot.send_message(
            chat_id=callback.from_user.id,
            text=text,
            reply_markup=account_actions_keyboard(account_id),
            parse_mode="HTML"
        )
        await callback.answer()
        return

    
    if status == "PROXY_ERROR":
        update_account_status_to_proxy_error(account_id)
        await message.edit_text("üõ°Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–∫—Å–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        await asyncio.sleep(2)  # –¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.delete()  # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã–π"
    
        account = get_account_by_id(account_id)
        text = build_account_card(account)
        await bot.send_message(
            chat_id=callback.from_user.id,
            text=text,
            reply_markup=account_actions_keyboard(account_id),
            parse_mode="HTML"
        )
        await callback.answer()
        return

    if status == "UNKNOWN":
        update_account_status_to_unknown(account_id)
        await message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∫—Å–∏")
        await asyncio.sleep(2)  # –¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.delete()  # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã–π"
    
        account = get_account_by_id(account_id)
        text = build_account_card(account)
        await bot.send_message(
            chat_id=callback.from_user.id,
            text=text,
            reply_markup=account_actions_keyboard(account_id),
            parse_mode="HTML"
        )
        await callback.answer()
        return

@router.callback_query(F.data.startswith("confirm_delete_account_"))
@admin_only
async def confirm_delete_account(callback: types.CallbackQuery):
    account_id = int(callback.data.split("_")[3])

    account = get_account_by_id(account_id)
    if not account:
        await callback.answer("‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    username = account.get("username") or f"ID {account_id}"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_account_{account_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"account_{account_id}")
            ]
        ]
    )

    await callback.message.edit_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç <b>{username}</b>?",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("delete_account_"))
@admin_only
async def delete_account(callback: types.CallbackQuery):
    from app.db import delete_account_by_id, account_has_active_tasks
    account_id = int(callback.data.split("_")[2])

    if account_has_active_tasks(account_id):
        await callback.answer(
            "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç: –æ–Ω —Å–≤—è–∑–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–µ–π.",
            show_alert=True
        )
        return

    delete_account_by_id(account_id)

    await callback.message.edit_text(
        f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç ID {account_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!",
        reply_markup=accounts_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "accounts_list")
@admin_only
async def show_accounts_list(callback: types.CallbackQuery):
    accounts = get_all_accounts()

    if not accounts:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.",
            reply_markup=None
        )
        await callback.answer()
        return

    text = "üìã <b>–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b>\n\n"
    text += f"–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}\n\n"

    for account in accounts:
        status = "üü¢" if not account.get("banned") else "üî¥"
        text += f"{status} {account.get('username') or account.get('phone')}\n"

    await callback.message.edit_text(
        text,
        reply_markup=accounts_list_keyboard(accounts),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "accounts_import")
@admin_only
async def start_import_accounts(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ImportStates.waiting_for_zip)
    await callback.message.edit_text(
        "üì¶ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP –∞—Ä—Ö–∏–≤ —Å —Å–µ—Å—Å–∏—è–º–∏ –∏ proxies.txt",
        reply_markup=back_to_accounts_menu()
    )
    await callback.answer()

@router.message(ImportStates.waiting_for_zip, F.document)
async def handle_zip_upload(message: types.Message, state: FSMContext):
    processing_message = None

    try:
        file = message.document
        if not file.file_name.endswith(".zip"):
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ .zip.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–º–ø–æ—Ä—Ç–∞
        processing_message = await message.answer("‚è≥ –ò–¥—ë—Ç –∏–º–ø–æ—Ä—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

        temp_dir = f"/tmp/uploads/{message.from_user.id}/"
        os.makedirs(temp_dir, exist_ok=True)

        file_path = os.path.join(temp_dir, file.file_name)
        await message.bot.download(file, destination=file_path)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        await import_accounts_from_zip(message, file_path, temp_dir)

        await state.clear()

        # –ü–æ—Å–ª–µ –ª–æ–≥–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        back_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="accounts_list")]
            ]
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=back_keyboard)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_zip_upload: {e}")
        import traceback
        traceback.print_exc()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞.")

    finally:
        if processing_message:
            try:
                await processing_message.delete()
            except Exception:
                pass  # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

        try:
            await message.delete()  # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º
        except Exception:
            pass

@router.callback_query(F.data.startswith("rebind_proxy_"))
@admin_only
async def rebind_proxy_menu(callback: types.CallbackQuery):
    account_id = int(callback.data.split("_")[2])

    proxies = get_all_proxies()
    if not proxies:
        await callback.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.", show_alert=True)
        return

    keyboard = []

    for proxy in proxies:
        # –°–∫—Ä—ã–≤–∞–µ–º –ø–ª–æ—Ö–∏–µ –ø—Ä–æ–∫—Å–∏
        if proxy.get("status") == "bad":
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø—Ä–æ–∫—Å–∏ –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ

        accounts_count = count_accounts_using_proxy(
            proxy["host"],
            proxy["port"],
            proxy.get("username"),
            proxy.get("password")
        )

        # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏
        if proxy.get("status") == "working":
            status_emoji = "‚úÖ"
        else:
            status_emoji = "‚ùî"  # unknown –∏–ª–∏ –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞

        button_text = f"{status_emoji} {proxy['host']}:{proxy['port']} ({accounts_count} –∞–∫–∫.)"

        keyboard.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"select_proxy_{account_id}_{proxy['id']}"
            )
        ])

    # –ï—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏
    if not keyboard:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫–∫–∞—É–Ω—Ç—É", callback_data=f"back_to_account_{account_id}")]
            ])
        )
        return

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –∞–∫–∫–∞—É–Ω—Ç—É"
    keyboard.append([
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫–∫–∞—É–Ω—Ç—É",
            callback_data=f"back_to_account_{account_id}"
        )
    ])

    await callback.message.edit_text(
        "üåê –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@router.callback_query(F.data.startswith("select_proxy_"))
@admin_only
async def select_proxy_for_account(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    account_id = int(parts[2])
    proxy_id = int(parts[3])

    proxy = get_proxy_by_id(proxy_id)
    if not proxy:
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    account = get_account_by_id(account_id)
    if not account:
        await callback.answer("‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –Ω–µ —Ç–æ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏–≤—è–∑–∞–Ω
    if (
        account.get("proxy_host") == proxy["host"]
        and account.get("proxy_port") == proxy["port"]
        and account.get("proxy_username") == proxy.get("username")
        and account.get("proxy_password") == proxy.get("password")
    ):
        await callback.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø—Ä–æ–∫—Å–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ —É –∞–∫–∫–∞—É–Ω—Ç–∞
    update_account_proxy(
        account_id,
        proxy["host"],
        proxy["port"],
        proxy.get("username"),
        proxy.get("password")
    )

    await callback.answer("‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞–Ω!", show_alert=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞—Ä—Ç–æ—á–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
    updated_account = get_account_by_id(account_id)
    text = build_account_card(updated_account)
    await callback.message.edit_text(
        text=text,
        reply_markup=account_actions_keyboard(account_id),
        parse_mode="HTML"
    )
@router.callback_query(F.data.startswith("back_to_account_"))
@admin_only
async def back_to_account(callback: types.CallbackQuery):
    account_id = int(callback.data.split("_")[3])

    account = get_account_by_id(account_id)
    if not account:
        await callback.answer("‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    text = build_account_card(account)
    await callback.message.edit_text(
        text=text,
        reply_markup=account_actions_keyboard(account_id),
        parse_mode="HTML"
    )

from telethon.tl.types import PeerUser

@router.callback_query(F.data.startswith("get_code_"))
async def get_last_code(callback: types.CallbackQuery):
    account_id = int(callback.data.split("_")[-1])
    
    account = get_account_by_id(account_id)
    if not account:
        await callback.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    session_string = account.get("session_string")
    proxy = {
        "proxy_host": account.get("proxy_host"),
        "proxy_port": account.get("proxy_port"),
        "proxy_username": account.get("proxy_username"),
        "proxy_password": account.get("proxy_password"),
    } if account.get("proxy_host") else None

    from app.telegram_client import get_client
    client = await get_client(session_string, proxy)
    await client.start()
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ Telegram (user_id=777000)
    async for msg in client.iter_messages(PeerUser(777000), limit=1):
        text = msg.text or "<–±–µ–∑ —Ç–µ–∫—Å—Ç–∞>"
        date = msg.date.strftime('%d.%m.%Y %H:%M')
        await callback.answer()  # —É–±—Ä–∞—Ç—å –∫—Ä—É—Ç–∏–ª–∫—É
        await callback.message.answer(
            f"<b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n\n"
            f"<b>–î–∞—Ç–∞:</b> {date}\n"
            f"<b>–¢–µ–∫—Å—Ç:</b> <code>{text}</code>",
            parse_mode="HTML",
            reply_markup=ok_delete_keyboard()
        )
        break
    else:
        await callback.answer("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram (777000)", show_alert=True)
    await client.disconnect()

@router.callback_query(F.data == "delete_code_msg")
async def delete_code_msg(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except Exception:
        pass
    await callback.answer()

# 1. –°—Ç–∞—Ä—Ç —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∞–º–±–æ—Ç–æ–º

# --- FSM State ---
class SpamBotDialog(StatesGroup):
    waiting_for_message = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä ---
def spambot_action_keyboard(account_id, button_texts):
    keyboard = [
        [InlineKeyboardButton(text=btn, callback_data=f"spambot_sendtext_{account_id}_{i}")]
        for i, btn in enumerate(button_texts)
    ]
    keyboard.append([InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"spambot_refresh_{account_id}")])
    keyboard.append([InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="spambot_close")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Å—Ç–∞—Ä—Ç —Ä–∞–±–æ—Ç—ã) ---
@router.callback_query(F.data.startswith("spambot_menu_"))
async def spambot_menu(callback: types.CallbackQuery, state: FSMContext):
    print("[DEBUG] –°—Ä–∞–±–æ—Ç–∞–ª spambot_menu")
    account_id = int(callback.data.split("_")[-1])
    account = get_account_by_id(account_id)
    if not account or not account.get("session_string"):
        await callback.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return

    # –°—Ä–∞–∑—É —Å—Ç–∞–≤–∏–º state –∏ account_id –≤ FSM, —á—Ç–æ–±—ã –ª—é–±–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–≤–∏–ª–æ—Å—å!
    await state.update_data(account_id=account_id)
    await state.set_state(SpamBotDialog.waiting_for_message)

    session_string = account.get("session_string")
    proxy = {
        "proxy_host": account.get("proxy_host"),
        "proxy_port": account.get("proxy_port"),
        "proxy_username": account.get("proxy_username"),
        "proxy_password": account.get("proxy_password"),
    } if account.get("proxy_host") else None

    client = await get_client(session_string, proxy)
    await client.start()
    try:
        # –û—á–∏—â–∞–µ–º –¥–∏–∞–ª–æ–≥ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        try:
            await client.delete_dialog("spambot")
        except Exception:
            pass

        # –°—Ç–∞—Ä—Ç—É–µ–º –∑–∞–Ω–æ–≤–æ
        await client.send_message("spambot", "/start")
        await asyncio.sleep(1.5)  # –î–∞—Ç—å –±–æ—Ç—É –æ—Ç–≤–µ—Ç–∏—Ç—å

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        spambot = await client.get_entity("spambot")
        msg = (await client.get_messages(spambot, limit=1))[0]
        text = msg.message
        log_spambot_message(account_id, 'bot', text)

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        button_texts = []
        if msg.reply_markup and hasattr(msg.reply_markup, "rows"):
            for row in msg.reply_markup.rows:
                for btn in row.buttons:
                    if hasattr(btn, "text"):
                        button_texts.append(btn.text)

        markup = spambot_action_keyboard(account_id, button_texts)

        await callback.message.answer(f"üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @spambot:\n\n{text}", reply_markup=markup)
    finally:
        await client.disconnect()
    await callback.answer()



# --- –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ (—ç–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—Å—Ç–∞) ---
@router.callback_query(F.data.startswith("spambot_sendtext_"))
async def spambot_sendtext(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    account_id = int(parts[2])
    btn_index = int(parts[3])
    account = get_account_by_id(account_id)
    if not account or not account.get("session_string"):
        await callback.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    session_string = account.get("session_string")
    proxy = {
        "proxy_host": account.get("proxy_host"),
        "proxy_port": account.get("proxy_port"),
        "proxy_username": account.get("proxy_username"),
        "proxy_password": account.get("proxy_password"),
    } if account.get("proxy_host") else None

    client = await get_client(session_string, proxy)
    await client.start()
    try:
        spambot = await client.get_entity("spambot")
        msg = (await client.get_messages(spambot, limit=1))[0]
        button_texts = []
        if msg.reply_markup and hasattr(msg.reply_markup, "rows"):
            for row in msg.reply_markup.rows:
                for btn in row.buttons:
                    if hasattr(btn, "text"):
                        button_texts.append(btn.text)

        if btn_index < len(button_texts):
            text_to_send = button_texts[btn_index]
            await client.send_message("spambot", text_to_send)
            await asyncio.sleep(1.5)
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!
            new_msg = (await client.get_messages(spambot, limit=1))[0]
            new_text = new_msg.message
            new_button_texts = []
            log_spambot_message(account_id, 'bot', new_text)
            if new_msg.reply_markup and hasattr(new_msg.reply_markup, "rows"):
                for row in new_msg.reply_markup.rows:
                    for btn in row.buttons:
                        if hasattr(btn, "text"):
                            new_button_texts.append(btn.text)
            markup = spambot_action_keyboard(account_id, new_button_texts)
            await callback.message.answer(f"üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @spambot:\n\n{new_text}", reply_markup=markup)
        else:
            await callback.answer("–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
    finally:
        await client.disconnect()


# --- –û–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º ---
@router.callback_query(F.data.startswith("spambot_refresh_"))
async def spambot_refresh(callback: types.CallbackQuery):
    account_id = int(callback.data.split("_")[-1])
    account = get_account_by_id(account_id)
    if not account or not account.get("session_string"):
        await callback.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    session_string = account.get("session_string")
    proxy = {
        "proxy_host": account.get("proxy_host"),
        "proxy_port": account.get("proxy_port"),
        "proxy_username": account.get("proxy_username"),
        "proxy_password": account.get("proxy_password"),
    } if account.get("proxy_host") else None

    client = await get_client(session_string, proxy)
    await client.start()
    try:
        spambot = await client.get_entity("spambot")
        msg = (await client.get_messages(spambot, limit=1))[0]
        text = msg.message
        button_texts = []
        if msg.reply_markup and hasattr(msg.reply_markup, "rows"):
            for row in msg.reply_markup.rows:
                for btn in row.buttons:
                    if hasattr(btn, "text"):
                        button_texts.append(btn.text)
        markup = spambot_action_keyboard(account_id, button_texts)
        await callback.message.answer(f"üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @spambot:\n\n{text}", reply_markup=markup)
    finally:
        await client.disconnect()
    await callback.answer()


# --- –†—É—á–Ω–æ–π –≤–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
@router.message(SpamBotDialog.waiting_for_message, F.text)
async def send_text_to_spambot(message: types.Message, state: FSMContext):
    data = await state.get_data()
    account_id = data.get("account_id")
    user_text = message.text
    print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–ø–∞–º–±–æ—Ç—É: {user_text!r} –¥–ª—è account_id={account_id}")
    if not account_id:
        print("[DEBUG] –ù–µ—Ç account_id –≤ state")
        await message.answer("‚ùó –ù–µ –≤—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∞–º–±–æ—Ç–æ–º.")
        return
        
    log_spambot_message(account_id, 'user', user_text)  # ‚Üê –õ–û–ì
    
    account = get_account_by_id(account_id)
    if not account or not account.get("session_string"):
        print("[DEBUG] –ù–µ—Ç —Å–µ—Å—Å–∏–∏ —É –∞–∫–∫–∞—É–Ω—Ç–∞")
        await message.answer("‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞.")
        return
    session_string = account.get("session_string")
    proxy = {
        "proxy_host": account.get("proxy_host"),
        "proxy_port": account.get("proxy_port"),
        "proxy_username": account.get("proxy_username"),
        "proxy_password": account.get("proxy_password"),
    } if account.get("proxy_host") else None

    from app.telegram_client import get_client
    import asyncio
    client = await get_client(session_string, proxy)
    await client.start()
    try:
        print(f"[DEBUG] –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç: {user_text!r} –≤ @spambot")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        sent = await client.send_message("spambot", user_text)
        print(f"[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {sent}")
        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ @spambot:\n<code>{user_text}</code>", parse_mode="HTML")
        # –ñ–¥—ë–º –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–ø–∞–º–±–æ—Ç–∞
        await asyncio.sleep(2)
        spambot = await client.get_entity("spambot")
        msgs = await client.get_messages(spambot, limit=2)
        print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(msgs)}")
        for idx, m in enumerate(msgs):
            print(f"[DEBUG] [#{idx}] msg.date={m.date} msg.id={m.id} msg.text={m.text!r}")
        # –ë–ª–æ–∫: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ (–∏—â–µ–º –ø–µ—Ä–≤–æ–µ, –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—â–µ–µ —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º)
        new_msg = None
        for m in msgs:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –Ω–∞—à echo, –∞ —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–ø–∞–º–±–æ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ –∂–µ —Å–∞–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            if m.text.strip() != user_text.strip():
                new_msg = m
                log_spambot_message(account_id, 'bot', new_msg.text)   # ‚Üê –õ–û–ì
                break
        if not new_msg:
            print("[DEBUG] –ù–µ—Ç –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–ø–∞–º–±–æ—Ç–∞ (–≤–∏–¥–∏–º–æ echo –∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∞)")
            new_msg = msgs[0]
            log_spambot_message(account_id, 'bot', new_msg.text)   # ‚Üê –õ–û–ì
        new_text = new_msg.text
        print(f"[DEBUG] –û—Ç–≤–µ—Ç —Å–ø–∞–º–±–æ—Ç–∞: {new_text!r}")
        button_texts = []
        if getattr(new_msg, "reply_markup", None) and hasattr(new_msg.reply_markup, "rows"):
            for row in new_msg.reply_markup.rows:
                for btn in row.buttons:
                    if hasattr(btn, "text"):
                        button_texts.append(btn.text)
                        print(f"[DEBUG] reply-–∫–Ω–æ–ø–∫–∞: {btn.text!r}")
        markup = spambot_action_keyboard(account_id, button_texts)
        await message.answer(f"üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @spambot:\n\n{new_text}", reply_markup=markup)
    except Exception as ex:
        import traceback
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø–∞–º–±–æ—Ç—É: {ex}")
        traceback.print_exc()
        await message.answer(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {ex}")
    finally:
        await client.disconnect()


def ok_delete_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùé –û–ö (—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ)", callback_data="delete_log_msg")]
        ]
    )

@router.callback_query(F.data.startswith("spambot_log_"))
async def show_spambot_log(callback: types.CallbackQuery):
    account_id = int(callback.data.split("_")[-1])
    logs = get_spambot_logs_for_account(account_id)
    if not logs:
        await callback.answer("–õ–æ–≥ –ø—É—Å—Ç.", show_alert=True)
        return

    text = "<b>–õ–æ–≥ –æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∞–º–±–æ—Ç–æ–º:</b>\n"
    start = logs[0]['timestamp'].strftime("%d.%m.%Y %H:%M")
    text += f"üìÖ –î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç: <b>{start}</b>\n\n"
    for entry in logs:
        ts = entry['timestamp'].strftime("%H:%M")
        author = "üë§–í—ã" if entry['from_who'] == "user" else "ü§ñ–°–ø–∞–º–±–æ–±–æ—Ç"
        msg = entry['message'].replace("<", "&lt;").replace(">", "&gt;")
        text += f"<b>{ts} {author}:</b> {msg}\n"

    # –ï—Å–ª–∏ –¥–ª–∏–Ω–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª —Å –∫–Ω–æ–ø–∫–æ–π
    if len(text) > 4000:
        import tempfile
        with tempfile.NamedTemporaryFile("w+", delete=False, encoding="utf-8") as f:
            f.write(text)
            file_path = f.name
        await callback.message.answer_document(
            FSInputFile(file_path),
            caption="–ü–æ–ª–Ω—ã–π –ª–æ–≥ –æ–±—â–µ–Ω–∏—è",
            reply_markup=ok_delete_keyboard()
        )
    else:
        await callback.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=ok_delete_keyboard()
        )
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ "–û–ö"
@router.callback_query(F.data == "delete_log_msg")
async def delete_log_msg(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except Exception:
        pass
    await callback.answer()


# --- –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É ---
@router.callback_query(F.data == "spambot_close")
async def spambot_close(callback: types.CallbackQuery):
    await callback.message.edit_text("‚úÖ –°–µ–∞–Ω—Å —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∞–º–±–æ—Ç–æ–º –∑–∞–≤–µ—Ä—à—ë–Ω.")
    await callback.answer()




FROZEN_MARKERS = ("FROZEN_", "FROZEN_METHOD_INVALID")


# ===== helpers =====

from telethon.errors import RPCError
from telethon.tl.functions.account import UpdateProfileRequest
from telethon.tl.functions.account import UpdateUsernameRequest

FROZEN_MARKERS = ("FROZEN_", "FROZEN_METHOD_INVALID")

async def _safe_wait(coro, timeout: float, label: str, dbg: list | None = None):
    try:
        return await asyncio.wait_for(coro, timeout=timeout)
    except Exception as e:
        msg = f"{e.__class__.__name__}: {e}"
        if dbg is not None:
            dbg.append(f"[{label}] {msg}")
        raise

async def _is_profile_frozen_without_full(client, me) -> tuple[bool, str]:
    """
    –î–µ—Ç–µ–∫—Ç '–∑–∞–º–æ—Ä–æ–∑–∫–∏' –±–µ–∑ GetFullUserRequest:
      1) –ï—Å–ª–∏ me.deleted –∏–ª–∏ 'Deleted Account' -> frozen.
      2) –ï—Å–ª–∏ –µ—Å—Ç—å username: UpdateUsernameRequest(me.username) (no-op) ‚Äî FROZEN_* => frozen.
      3) –í—Å–µ–≥–¥–∞: UpdateProfileRequest(first_name=me.first_name or '', last_name=me.last_name or '') ‚Äî FROZEN_* => frozen.
    –ò–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º –Ω–µ frozen.
    """
    if getattr(me, "deleted", False) or (me.first_name == "Deleted Account"):
        return True, "deleted_profile"

    # 2) ping username (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if getattr(me, "username", None):
        try:
            # no-op: –ø—Ä–æ—Å–∏–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ç –∂–µ username
            await client(UpdateUsernameRequest(me.username))
        except RPCError as e:
            s = f"{e.__class__.__name__}: {e}"
            if any(tok in s for tok in FROZEN_MARKERS):
                return True, s
            # USERNAME_NOT_MODIFIED –∏ –ø—Ä. ‚Äî –Ω–µ —Ñ—Ä–∏–∑, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    # 3) ping profile (no-op)
    try:
        await client(UpdateProfileRequest(
            first_name=me.first_name or "",
            last_name=me.last_name or ""
        ))
    except RPCError as e:
        s = f"{e.__class__.__name__}: {e}"
        if any(tok in s for tok in FROZEN_MARKERS):
            return True, s
        # –ø—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏ –Ω–µ —Å—á–∏—Ç–∞–µ–º —Ñ—Ä–∏–∑–æ–º

    return False, "profile_writable"



# ===== ROUTE =====

@router.callback_query(F.data == "update_all_profiles")
@admin_only
async def check_all_accounts(callback: CallbackQuery):
    print("üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    bot = Bot(token=BOT_TOKEN)

    accounts = get_all_accounts()
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")

    if not accounts:
        await callback.answer("‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    await callback.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç—á—ë—Ç!")

    try:
        await callback.message.delete()
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    progress_message = await bot.send_message(
        chat_id=callback.from_user.id,
        text="‚è≥ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...\nüìÑ –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –≤–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–æ–≥.",
        parse_mode="HTML",
    )

    await asyncio.sleep(1)
    await bot.send_message(
        chat_id=callback.from_user.id,
        text="üìã –ü–æ–∫–∞ –≤—ã –æ–∂–∏–¥–∞–µ—Ç–µ, –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:",
        reply_markup=accounts_menu_keyboard(),
        parse_mode="HTML",
    )

    stats = {k: 0 for k in ["OK", "FROZEN", "NEEDS_ATTENTION", "UNKNOWN", "BANNED", "PROXY_ERROR", "ERROR"]}
    per_account_lines = []  # –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥

    async def process_account(account):
        acc_id = account["id"]
        phone = account.get("phone")
        session_string = account.get("session_string") or ""
        dbg = []

        proxy = None
        if account.get("proxy_host"):
            proxy = {
                "proxy_host": account.get("proxy_host"),
                "proxy_port": account.get("proxy_port"),
                "proxy_username": account.get("proxy_username"),
                "proxy_password": account.get("proxy_password"),
            }

        status = "UNKNOWN"
        detail = ""

        try:
            client = await get_client(session_string, proxy)

            # connect + auth
            await _safe_wait(client.connect(), 12, "connect", dbg)
            authed = await _safe_wait(client.is_user_authorized(), 8, "is_user_authorized", dbg)
            if not authed:
                update_account_status_to_needs_login(acc_id)
                status, detail = "NEEDS_ATTENTION", "not_authorized"
                return status, detail

            # —Ç–æ–ª—å–∫–æ get_me(), –ù–ò–ö–ê–ö–û–ì–û GetFullUserRequest
            me = await _safe_wait(client.get_me(), 10, "get_me", dbg)

            # –¥–µ—Ç–µ–∫—Ç freeze –±–µ–∑ FullUser
            frozen, reason = await _is_profile_frozen_without_full(client, me)

            # –∏–Ω—Ñ–æ –≤ –ë–î (about —Å—Ç–∞–≤–∏–º "-" ‚Äî –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–∂–Ω–µ–µ, –µ—Å–ª–∏ —Ç—è–Ω–µ—à—å –µ–≥–æ –∏–∑ –ë–î)
            update_account_info(
                acc_id,
                username=me.username or None,
                first_name=me.first_name or "-",
                last_name=me.last_name or "-",
                about="-"
            )

            if frozen:
                update_account_status_to_frozen(acc_id)
                status, detail = "FROZEN", reason
            else:
                update_account_status_to_active(acc_id)
                status, detail = "OK", "active"

            return status, detail

        except Exception as e:
            update_account_status_to_unknown(acc_id)
            status, detail = "UNKNOWN", f"{e.__class__.__name__}: {e}"
            return status, detail

        finally:
            try:
                if "client" in locals():
                    await _safe_wait(client.disconnect(), 5, "disconnect", dbg)
            except Exception:
                pass
            dbg_tail = (" | " + " ; ".join(dbg)) if dbg else ""
            per_account_lines.append(f"{acc_id}/{phone}: {status} ({detail}){dbg_tail}")


    # –æ–≥—Ä–∞–Ω–∏—á–∏–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º
    sem = asyncio.Semaphore(6)

    async def wrapped(acc):
        async with sem:
            s, d = await asyncio.wait_for(process_account(acc), timeout=120)
            stats[s] += 1
            return s, d

    results = await asyncio.gather(*[wrapped(a) for a in accounts], return_exceptions=True)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_text = f"üìÖ –û—Ç—á—ë—Ç ({ts})\n\n"
    log_text += "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    for k, label in {
        "OK": "üü¢ –ê–∫—Ç–∏–≤–Ω–æ",
        "FROZEN": "‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ",
        "NEEDS_ATTENTION": "üü° –¢—Ä–µ–±—É–µ—Ç –≤—Ö–æ–¥–∞",
        "UNKNOWN": "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        "BANNED": "üî¥ –ó–∞–±–∞–Ω–µ–Ω–æ",
        "PROXY_ERROR": "üõ°Ô∏è –ü—Ä–æ–∫—Å–∏-–æ—à–∏–±–∫–∏",
        "ERROR": "‚ùó –û—à–∏–±–∫–∏",
    }.items():
        log_text += f"{label}: {stats[k]}\n"

    # –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–µ—Ä–µ—á–µ–Ω—å –ø–æ –∫–∞–∂–¥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
    log_text += "\nüìÑ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º:\n" + "\n".join(per_account_lines)

    os.makedirs("logs", exist_ok=True)
    filename = f"logs/telegram_check_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    with open(filename, "w", encoding="utf-8") as f:
        f.write(log_text)

    await bot.send_document(
        chat_id=callback.from_user.id,
        document=FSInputFile(path=filename),
        caption="üìÑ –õ–æ–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –û–ö (—É–¥–∞–ª–∏—Ç—å)", callback_data="delete_log_msg")]]
        ),
    )

    try:
        await progress_message.edit_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        await asyncio.sleep(2)
        await progress_message.delete()
    except Exception:
        pass




@router.callback_query(F.data == "delete_log_msg")
async def delete_log_message(callback: CallbackQuery):
    try:
        await callback.message.delete()
    except Exception:
        pass
    await callback.answer()


# –ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
@router.callback_query(F.data == "accounts_delete_menu")
@admin_only
async def delete_menu(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤:",
        reply_markup=delete_accounts_keyboard()
    )

# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
@router.callback_query(F.data == "delete_invalid_accounts")
@admin_only
async def delete_invalid_accounts(callback: types.CallbackQuery):
    accounts = get_all_accounts()
    log = []

    for acc in accounts:
        if acc["status"] in ["freeze", "banned"]:
            delete_account_by_id(acc["id"])
            log.append(f"üö´ –£–¥–∞–ª—ë–Ω –∞–∫–∫–∞—É–Ω—Ç: {acc['username'] or acc['phone']}")

    if not log:
        log.append("‚úÖ –ù–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π txt-—Ñ–∞–π–ª
    log_filename = f"/tmp/deleted_accounts_{uuid.uuid4().hex}.txt"
    with open(log_filename, "w", encoding="utf-8") as file:
        file.write("\n".join(log))

    # –ö–Ω–æ–ø–∫–∞ "OK" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    ok_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ OK", callback_data="delete_log_msg")]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞
    await callback.message.answer_document(
        FSInputFile(log_filename),
        caption="üìù –õ–æ–≥ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
        reply_markup=ok_button
    )

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(log_filename)

    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", show_alert=True)


# –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data == "select_accounts_to_delete")
@admin_only
async def select_accounts_to_delete(callback: types.CallbackQuery, state):
    accounts = get_all_accounts()
    await state.set_state("selecting_accounts_to_delete")
    await state.update_data(selected_accounts=[])
    await callback.message.edit_text(
        "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=select_accounts_keyboard(accounts)
    )

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
@router.callback_query(StateFilter("selecting_accounts_to_delete"), F.data.startswith("toggle_account_"))
@admin_only
async def toggle_account_to_delete(callback: types.CallbackQuery, state: FSMContext):
    account_id = int(callback.data.split("_")[2])

    data = await state.get_data()
    selected_ids = data.get("selected_accounts", [])

    if account_id in selected_ids:
        selected_ids.remove(account_id)
    else:
        selected_ids.append(account_id)

    await state.update_data(selected_accounts=selected_ids)

    accounts = get_all_accounts()

    await callback.message.edit_text(
        "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=select_accounts_keyboard(accounts, selected_ids)
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
@router.callback_query(StateFilter("selecting_accounts_to_delete"), F.data == "proceed_after_selecting_accounts")
@admin_only
async def proceed_delete_selected_accounts(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_ids = data.get("selected_accounts", [])

    if not selected_ids:
        await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç!", show_alert=True)
        return

    log = []
    for acc_id in selected_ids:
        acc = get_account_by_id(acc_id)
        delete_account_by_id(acc_id)
        log.append(f"üö´ –£–¥–∞–ª—ë–Ω –∞–∫–∫–∞—É–Ω—Ç: {acc['username'] or acc['phone']}")

    log_message = "\n".join(log)
    await callback.message.answer(log_message)
    await state.clear()
    await callback.answer("–ê–∫–∫–∞—É–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã.", show_alert=True)
