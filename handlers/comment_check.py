import asyncio, json, re, os, time
from typing import List, Dict, Any
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from utils.check_access import admin_only
from utils.comment_check_utils import run_comment_check, safe_run_comment_check
from app.db import (
    get_all_accounts,
    get_account_groups_with_count,
    create_comment_check_task,
    update_task_status,
    save_task_result,
    get_connection,
    get_task_by_id, 
    get_comment_check_logs,
)
from keyboards.comment_check_accounts_keyboard import cchk_accounts_keyboard
from aiogram.exceptions import TelegramBadRequest

router = Router()

class CChkStates(StatesGroup):
    picking_accounts = State()
    waiting_channels  = State()
    confirming       = State()

MAX_TEXT_LINES = 200
TEMP_DIR = "/tmp"
TEMP_DIR = os.getenv("TMPDIR", "/tmp")


async def _read_txt_lines(path: str) -> list[str]:
    """
    –ß–∏—Ç–∞–µ—Ç .txt –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤.
    """
    import asyncio
    def _read():
        out = []
        with open(path, "r", encoding="utf-8", errors="ignore") as f:
            for line in f:
                s = line.strip()
                if s:
                    out.append(s)
        return out
    return await asyncio.to_thread(_read)

def _ok_delete_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –û–ö (—É–¥–∞–ª–∏—Ç—å)", callback_data="cchk_delete_log_message")]]
    )

async def _read_txt_lines(path: str) -> list[str]:
    def _read():
        out = []
        with open(path, "r", encoding="utf-8", errors="ignore") as f:
            for line in f:
                s = line.strip()
                if s:
                    out.append(s)
        return out
    import asyncio
    return await asyncio.to_thread(_read)

def _norm_channel(ch: str) -> str:
    ch = (ch or "").strip()
    if not ch:
        return ""
    ch = ch.replace("https://t.me/", "").replace("http://t.me/", "")
    if ch.startswith("@"):
        ch = ch[1:]
    # –æ–±—Ä–µ–∑–∞–µ–º —Ö–≤–æ—Å—Ç—ã /?...
    ch = ch.split("?")[0].split("/")[0]
    return ch



def _normalize_channel(s: str) -> str:
    s = s.strip()
    if not s:
        return ""
    s = s.replace("https://t.me/","").replace("http://t.me/","").replace("@","")
    return s.split("?")[0].strip()

# === sticky UI helpers (–ª–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è –¥–ª—è —á–µ–∫–µ—Ä–∞) ===
async def ui_get_ids(state) -> tuple[int | None, int | None]:
    d = await state.get_data()
    return d.get("ui_chat_id"), d.get("ui_message_id")

async def ui_set_ids(state, chat_id: int, message_id: int):
    await state.update_data(ui_chat_id=chat_id, ui_message_id=message_id)

async def ui_edit(bot, chat_id: int | None, message_id: int | None,
                  text: str, kb: InlineKeyboardMarkup | None = None):
    # –µ—Å–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –Ω–µ—Ç ‚Äî –Ω–µ –ø–∞–¥–∞–µ–º
    if not chat_id or not message_id:
        raise RuntimeError("ui_edit: no message to edit (chat_id/message_id is None)")

    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=kb,
            parse_mode="HTML",
        )
    except Exception as e:
        s = str(e).lower()
        if "message is not modified" in s:
            return
        # –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ ‚Äî –ø—É—Å—Ç—å —Ö–µ–Ω–¥–ª–µ—Ä —Å–¥–µ–ª–∞–µ—Ç —Ñ–æ–ª–ª–±–µ–∫
        raise


async def delete_user_message(msg: types.Message):
    try:
        await msg.delete()
    except Exception:
        pass

def _cchk_card_kb(task_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"cchk_refresh:{task_id}")],
        [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç (—Å –æ–±—Å—É–∂–¥–µ–Ω–∏—è–º–∏)", callback_data=f"cchk_export_yes:{task_id}")],
        [InlineKeyboardButton(text="üìú –ü–æ–ª–Ω—ã–π –ª–æ–≥", callback_data=f"cchk_export_all:{task_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")],
    ])

def _cchk_build_card_text(task_id: int) -> str:
    t = get_task_by_id(task_id) or {}
    status = t.get("status", "-")
    payload = t.get("payload") or {}
    if isinstance(payload, str):
        import json
        try: payload = json.loads(payload)
        except: payload = {}
    total = int(payload.get("total_channels") or 0)
    checked = int(payload.get("checked") or 0)

    # —Å–≤–æ–¥–∫–∞ –ø–æ –ª–æ–≥–∞–º
    rows = get_comment_check_logs(task_id)
    yes = sum(1 for r in rows if r[2] is True)
    no  = sum(1 for r in rows if r[2] is False)
    unk = sum(1 for r in rows if r[2] is None)

    lines = [
        f"üß™ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π</b>",
        f"–ó–∞–¥–∞—á–∞ #{task_id}",
        "",
        f"–°—Ç–∞—Ç—É—Å: <b>{status}</b>",
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: <b>{checked}/{total}</b>",
        f"–ï—Å—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏—è: <b>{yes}</b>",
        f"–ù–µ—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–π: <b>{no}</b>",
        f"–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ/–æ—à–∏–±–∫–∏: <b>{unk}</b>",
    ]
    return "\n".join(lines)

async def render_cchk_task(bot, chat_id: int, message_id: int, task_id: int):
    text = _cchk_build_card_text(task_id)
    kb = _cchk_card_kb(task_id)
    await ui_edit(bot, chat_id, message_id, text, kb)

@router.callback_query(F.data == "menu_check_comments")
@admin_only
async def cchk_entry(cb: types.CallbackQuery, state: FSMContext):
    accounts = get_all_accounts()
    groups = get_account_groups_with_count()

    # was: await state.set_state(CChkStates.selecting_accounts)
    await state.set_state(CChkStates.picking_accounts)

    await ui_set_ids(state, cb.message.chat.id, cb.message.message_id)
    await state.update_data(cchk_accounts=accounts, cchk_selected=[], cchk_page=0)

    chat_id, message_id = await ui_get_ids(state)
    await ui_edit(
        cb.message.bot, chat_id, message_id,
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤:",
        cchk_accounts_keyboard(accounts, set(), page=0, groups=groups)
    )
    await cb.answer()


# –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
@router.callback_query(F.data.startswith("cchk_toggle:"), CChkStates.picking_accounts)
@admin_only
async def cchk_toggle(cb: types.CallbackQuery, state: FSMContext):
    acc_id = int(cb.data.split(":")[1])
    data = await state.get_data()
    selected = set(data.get("cchk_selected", []))
    accounts = data.get("cchk_accounts", [])
    page = int(data.get("cchk_page", 0))

    if acc_id in selected:
        selected.remove(acc_id)
    else:
        selected.add(acc_id)
    await state.update_data(cchk_selected=list(selected))

    chat_id, message_id = await ui_get_ids(state)
    await ui_edit(
        cb.message.bot, chat_id, message_id,
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã:",
        cchk_accounts_keyboard(accounts, selected, page=page, groups=get_account_groups_with_count())
    )
    await cb.answer()

# –ø–∞–≥–∏–Ω–∞—Ü–∏—è
@router.callback_query(F.data.startswith("cchk_page:"),   CChkStates.picking_accounts)
@admin_only
async def cchk_page(cb: types.CallbackQuery, state: FSMContext):
    page = int(cb.data.split(":")[1])
    data = await state.get_data()
    accounts = data.get("cchk_accounts", [])
    selected = set(data.get("cchk_selected", []))
    await state.update_data(cchk_page=page)

    chat_id, message_id = await ui_get_ids(state)
    await ui_edit(
        cb.message.bot, chat_id, message_id,
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã:",
        cchk_accounts_keyboard(accounts, selected, page=page, groups=get_account_groups_with_count())
    )
    await cb.answer()
    
# –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ
@router.callback_query(F.data == "cchk_select_all",       CChkStates.picking_accounts)
@admin_only
async def cchk_select_all(cb: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    accounts = data.get("cchk_accounts", [])
    all_ids = [a["id"] for a in accounts]
    page = int(data.get("cchk_page", 0))
    await state.update_data(cchk_selected=all_ids)

    chat_id, message_id = await ui_get_ids(state)
    await ui_edit(
        cb.message.bot, chat_id, message_id,
        "üë§ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ ¬´–î–∞–ª–µ–µ¬ª.",
        cchk_accounts_keyboard(accounts, set(all_ids), page=page, groups=get_account_groups_with_count())
    )
    await cb.answer("‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ")

# —Å–Ω—è—Ç—å –≤—Å–µ
@router.callback_query(F.data == "cchk_clear_all",        CChkStates.picking_accounts)
@admin_only
async def cchk_clear_all(cb: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    accounts = data.get("cchk_accounts", [])
    page = int(data.get("cchk_page", 0))
    await state.update_data(cchk_selected=[])

    chat_id, message_id = await ui_get_ids(state)
    await ui_edit(
        cb.message.bot, chat_id, message_id,
        "üë§ –í—ã–±–æ—Ä –æ—á–∏—â–µ–Ω. –û—Ç–º–µ—Ç—å—Ç–µ –Ω—É–∂–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:",
        cchk_accounts_keyboard(accounts, set(), page=page, groups=get_account_groups_with_count())
    )
    await cb.answer("‚ôªÔ∏è –°–±—Ä–æ—à–µ–Ω –≤—ã–±–æ—Ä")

@router.callback_query(F.data == "cchk_proceed", CChkStates.picking_accounts)
@admin_only
async def cchk_proceed(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = list(data.get("cchk_selected") or [])
    if not selected:
        await callback.answer("–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç", show_alert=True)
        return

    await state.update_data(cchk_selected=selected)
    # –¥–µ–ª–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–ª–∏–ø–∫–∏–º¬ª
    await ui_set_ids(state, callback.message.chat.id, callback.message.message_id)

    chat_id, message_id = await ui_get_ids(state)
    await ui_edit(
        callback.message.bot, chat_id, message_id,
        "üì• <b>–ü—Ä–∏—à–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤</b> (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ, @username –∏–ª–∏ —Å—Å—ã–ª–∫–∞):\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä:\n@durov\nhttps://t.me/somechannel</i>",
        InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]
        ])
    )

    await state.set_state(CChkStates.waiting_channels)
    await callback.answer()


# –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
@router.callback_query(F.data.startswith("cchk_group:"),  CChkStates.picking_accounts)
@admin_only
async def cchk_group_pick(cb: types.CallbackQuery, state: FSMContext):
    group_id = int(cb.data.split(":")[1])
    data = await state.get_data()
    accounts = data.get("cchk_accounts", [])
    page = int(data.get("cchk_page", 0))

    # —Å–æ–±–µ—Ä—ë–º id –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
    ids_in_group = {a["id"] for a in accounts if a.get("group_id") == group_id}
    if not ids_in_group:
        await cb.answer("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        return

    await state.update_data(cchk_selected=list(ids_in_group))

    # –±—ã–ª–∞ –ª–∏ —Å–º–µ–Ω–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ?
    start = page * 10
    page_ids = {a["id"] for a in accounts[start:start+10]}
    changed_on_page = bool(ids_in_group & page_ids)

    chat_id, message_id = await ui_get_ids(state)
    kb = cchk_accounts_keyboard(accounts, ids_in_group, page=page, groups=get_account_groups_with_count())
    if changed_on_page:
        await ui_edit(cb.message.bot, chat_id, message_id, "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã:", kb)

    await cb.answer(f"–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ (–∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(ids_in_group)})")

@router.message(CChkStates.waiting_channels)
@admin_only
async def cchk_channels_input(message: types.Message, state: FSMContext):
    channels: list[str] = []

    # 1) –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ .txt —Ñ–∞–π–ª–æ–º
    if message.document and (message.document.file_name or "").lower().endswith(".txt"):
        ts = int(time.time())
        tmp_path = os.path.join(TEMP_DIR, f"cchk_channels_{message.from_user.id}_{ts}.txt")
        try:
            # aiogram v3: —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ bot
            await message.bot.download(message.document, destination=tmp_path)
        except Exception as e:
            await delete_user_message(message)
            chat_id, message_id = await ui_get_ids(state)
            await ui_edit(message.bot, chat_id, message_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: {e}")
            return

        try:
            channels = await _read_txt_lines(tmp_path)
        except Exception as e:
            await delete_user_message(message)
            chat_id, message_id = await ui_get_ids(state)
            await ui_edit(message.bot, chat_id, message_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}")
            return
        finally:
            try:
                os.remove(tmp_path)
            except Exception:
                pass

    # 2) –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    elif (message.text or "").strip():
        lines = [s for s in (message.text or "").splitlines() if s.strip()]
        if len(lines) > MAX_TEXT_LINES:
            await delete_user_message(message)
            chat_id, message_id = await ui_get_ids(state)
            await ui_edit(
                message.bot, chat_id, message_id,
                f"‚ö†Ô∏è –í —Ç–µ–∫—Å—Ç–µ {len(lines)} —Å—Ç—Ä–æ–∫ (> {MAX_TEXT_LINES}). "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –æ–¥–Ω–∏–º .txt —Ñ–∞–π–ª–æ–º (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ)."
            )
            return
        channels = lines

    else:
        # –ù–∏—á–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏
        await delete_user_message(message)
        chat_id, message_id = await ui_get_ids(state)
        await ui_edit(
            message.bot, chat_id, message_id,
            "üì• –ü—Ä–∏—à–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ, @username –∏–ª–∏ —Å—Å—ã–ª–∫–∞) –∏–ª–∏ –æ–¥–∏–Ω .txt —Ñ–∞–π–ª."
        )
        return

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ‚Üí username –±–µ–∑ @, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ/–ø–æ–≤—Ç–æ—Ä—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    channels = [_normalize_channel(c) for c in channels]
    channels = [c for c in channels if c]                   # —É–±—Ä–∞—Ç—å –ø—É—Å—Ç—ã–µ –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    channels = list(dict.fromkeys(channels))                # uniq, –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ–º

    if not channels:
        await delete_user_message(message)
        chat_id, message_id = await ui_get_ids(state)
        await ui_edit(message.bot, chat_id, message_id, "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –ü—Ä–∏—à–ª–∏ —Å–ø–∏—Å–æ–∫ –µ—â—ë —Ä–∞–∑.")
        return

    # –£—Å–ø–µ—Ö: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state, —É–¥–∞–ª—è–µ–º —é–∑–µ—Ä—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∏—Å—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.update_data(cchk_channels=channels)
    await delete_user_message(message)

    preview = "\n".join(f"‚Ä¢ {c}" for c in channels[:30])
    tail = f"\n‚Ä¶ –∏ –µ—â—ë {len(channels)-30}" if len(channels) > 30 else ""
    text = f"‚úÖ –ö–∞–Ω–∞–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã ({len(channels)}):\n{preview}{tail}"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data="cchk_start")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_main")],
    ])

    chat_id, message_id = await ui_get_ids(state)
    await ui_edit(message.bot, chat_id, message_id, text, kb)

    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await state.set_state(CChkStates.confirming)



# —Ä–µ–µ—Å—Ç—Ä –∑–∞–¥–∞—á (—á—Ç–æ–±—ã GC –Ω–µ –ø—Ä–∏–±–∏–ª –∏ —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–º–µ–Ω—è—Ç—å –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏)
_CCHK_WORKERS: dict[int, asyncio.Task] = {}

@router.callback_query(CChkStates.confirming, F.data == "cchk_start")
@admin_only
async def cchk_start(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_ids: list[int] = list(data["cchk_selected"])
    all_accounts = data["cchk_accounts"]
    acc_map = {a["id"]: a for a in all_accounts}
    accounts = [{"id": i, "username": acc_map[i].get("username")} for i in selected_ids]
    channels = data["cchk_channels"]

    # —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
    try:
        task_id = create_comment_check_task(
            created_by=callback.from_user.id,
            channels=channels,
            accounts=accounts,
            # concurrency –º–æ–∂–Ω–æ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å –∏–∑ state –ø–æ–∑–∂–µ
        )
    except Exception as e:
        await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É: {e}")
        return

    # –∑–∞–∫—Ä–µ–ø–ª—è–µ–º ¬´–ª–∏–ø–∫–æ–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ui_set_ids(state, callback.message.chat.id, callback.message.message_id)
    chat_id, message_id = await ui_get_ids(state)

    # –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ—Å—Ç –Ω–∞ 1‚Äì2 —Å–µ–∫
    await ui_edit(callback.message.bot, chat_id, message_id,
                  f"üöÄ –ó–∞–¥–∞—á–∞ #{task_id} —Å–æ–∑–¥–∞–Ω–∞. –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É‚Ä¶")

    # —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ç–æ—Å—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫—É
    async def _swap_to_card():
        await asyncio.sleep(1.5)
        try:
            await render_cchk_task(callback.message.bot, chat_id, message_id, task_id)
        except Exception:
            pass
    asyncio.create_task(_swap_to_card())

    # –∫–∞—Å—Ç–æ–º–Ω–æ–µ notify: –Ω–µ —à–ª—ë–º ¬´‚úÖ¬ª, –∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏ –º–æ–∂–µ–º –æ—Ç–¥–∞—Ç—å –ª–æ–≥
    async def _notify(_: str):
        try:
            await render_cchk_task(callback.message.bot, chat_id, message_id, task_id)
            # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî —Å—Ä–∞–∑—É –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤ ¬´—Å –æ–±—Å—É–∂–¥–µ–Ω–∏—è–º–∏¬ª
            # await cchk_send_yes_export(callback.message, task_id)
        except Exception:
            pass

    # –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä
    t = asyncio.create_task(safe_run_comment_check(task_id, notify=_notify))
    _CCHK_WORKERS[task_id] = t
    t.add_done_callback(lambda fut: _CCHK_WORKERS.pop(task_id, None))

    await callback.answer("–°—Ç–∞—Ä—Ç–∞–Ω—É–ª–æ ‚úÖ")




@router.callback_query(F.data.startswith("cchk_refresh:"))
@admin_only
async def cchk_refresh(cb: types.CallbackQuery, state: FSMContext):
    task_id = int(cb.data.split(":")[1])
    text = _cchk_build_card_text(task_id)
    kb = _cchk_card_kb(task_id)

    # 1) –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    try:
        await cb.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await cb.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")
        return
    except TelegramBadRequest as e:
        # –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º ¬´–Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å¬ª, –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –ø—Ä–æ–±—É–µ–º —Ñ–æ–ª–ª–±–µ–∫
        if "message is not modified" in str(e).lower():
            await cb.answer("–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            return

    # 2) –§–æ–ª–ª–±–µ–∫: –ø—Ä–æ–±—É–µ–º –ø–æ ¬´–ª–∏–ø–∫–∏–º¬ª id –∏–∑ state
    chat_id, message_id = await ui_get_ids(state)
    if chat_id and message_id:
        try:
            await ui_edit(cb.message.bot, chat_id, message_id, text, kb)
            await cb.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")
            return
        except Exception:
            pass

    # 3) –°–æ–≤—Å–µ–º –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π ‚Äî —à–ª—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await cb.message.answer(text, reply_markup=kb, parse_mode="HTML")
    await cb.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")


@router.callback_query(F.data.startswith("cchk_export_yes:"))
@admin_only
async def cchk_export_yes(cb: types.CallbackQuery, state: FSMContext):
    task_id = int(cb.data.split(":")[1])
    conn = get_connection(); cur = conn.cursor()
    cur.execute("""
        SELECT channel
        FROM comment_check_log
        WHERE task_id=%s AND can_comment IS TRUE
        GROUP BY channel
        ORDER BY channel
    """, (task_id,))
    chans = [r[0] for r in cur.fetchall()]
    cur.close(); conn.close()

    if not chans:
        await cb.answer("–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ —Å –æ–±—Å—É–∂–¥–µ–Ω–∏—è–º–∏", show_alert=True); return

    content = "\n".join("@" + c if not c.startswith("@") else c for c in chans)
    buf = BufferedInputFile(content.encode("utf-8"), filename=f"cchk_yes_{task_id}.txt")

    await cb.message.answer_document(
        document=buf,
        caption=f"üìÑ –ö–∞–Ω–∞–ª—ã —Å –æ–±—Å—É–∂–¥–µ–Ω–∏—è–º–∏ ‚Ä¢ #{task_id}",
        reply_markup=_ok_delete_kb()
    )
    await cb.answer()

@router.callback_query(F.data.startswith("cchk_export_all:"))
@admin_only
async def cchk_export_all(cb: types.CallbackQuery, state: FSMContext):
    task_id = int(cb.data.split(":")[1])
    conn = get_connection(); cur = conn.cursor()
    cur.execute("""
        SELECT account_id, channel, can_comment, mode, COALESCE(message,''), checked_at
        FROM comment_check_log
        WHERE task_id=%s
        ORDER BY checked_at
    """, (task_id,))
    rows = cur.fetchall()
    cur.close(); conn.close()

    if not rows:
        await cb.answer("–õ–æ–≥ –ø—É—Å—Ç", show_alert=True); return

    lines = ["timestamp\taccount_id\tchannel\tcan_comment\tmode\tmessage"]
    for a,ch,can,mode,msg,ts in rows:
        can_s = "1" if can is True else ("0" if can is False else "")
        lines.append(f"{ts}\t{a}\t{ch}\t{can_s}\t{mode}\t{msg}")

    content = "\n".join(lines)
    buf = BufferedInputFile(content.encode("utf-8"), filename=f"cchk_log_{task_id}.tsv")

    await cb.message.answer_document(
        document=buf,
        caption=f"üìú –ü–æ–ª–Ω—ã–π –ª–æ–≥ ‚Ä¢ #{task_id}",
        reply_markup=_ok_delete_kb()
    )
    await cb.answer()
    
@router.callback_query(F.data == "cchk_delete_log_message")
@admin_only
async def cchk_delete_log_message(cb: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º (–≥–¥–µ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞)
    try:
        await cb.message.delete()
        await cb.answer("‚úÖ –£–¥–∞–ª–µ–Ω–æ")
    except Exception:
        # –µ—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å –Ω–µ–ª—å–∑—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç –ø—Ä–∞–≤) ‚Äî —Ö–æ—Ç—è –±—ã —Å–Ω–∏–º–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        try:
            await cb.message.edit_reply_markup(reply_markup=None)
        except Exception:
            pass
        await cb.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, —É–±—Ä–∞–ª –∫–Ω–æ–ø–∫–∏.")

