# handlers/reauthorize_accounts.py
# -*- coding: utf-8 -*-

import asyncio
import logging
from typing import List, Dict, Any, Iterable, Optional

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest

from utils.check_access import admin_only
from app.db import get_all_accounts, get_connection, get_account_groups_with_count
from utils.reauthorize_accounts import run_reauth_task
from app.db import get_available_api_key, increment_api_key_usage

router = Router()
log = logging.getLogger("reauth_handlers")

# ==========================
# FSM
# ==========================
class ReauthFSM(StatesGroup):
    select_accounts = State()
    ask_twofa = State()
    confirm = State()

# ==========================
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/—Ö–µ–ª–ø–µ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
# ==========================
STATE_ACCOUNTS = "reauth_accounts"
STATE_SELECTED = "reauth_selected"
STATE_PAGE     = "reauth_page"
PER_PAGE       = 10

def _group_ids(accounts: List[Dict[str, Any]], group_id: int) -> set[int]:
    return {a["id"] for a in accounts if a.get("group_id") == group_id}

async def safe_edit_markup(message: types.Message, reply_markup: InlineKeyboardMarkup):
    try:
        await message.edit_reply_markup(reply_markup=reply_markup)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise

# ==========================
# helpers (UI)
# ==========================
def _accounts_keyboard(
    accounts: List[Dict[str, Any]],
    selected: Iterable[int] | None,
    page: int = 0,
    per_page: int = PER_PAGE,
    groups: Optional[List[Dict[str, Any]]] = None,  # [{'id','name','emoji','count'}, ...]
) -> InlineKeyboardMarkup:
    selected = set(selected or [])
    start = page * per_page
    chunk = accounts[start: start + per_page]

    rows: List[List[InlineKeyboardButton]] = []

    # —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
    for acc in chunk:
        acc_id = acc["id"]
        uname  = acc.get("username") or "-"
        if uname != "-" and not str(uname).startswith("@"):
            uname = f"@{uname}"
        phone  = acc.get("phone") or "-"
        mark   = "‚úÖ" if acc_id in selected else "‚èπÔ∏è"
        txt    = f"{mark} {acc_id} ‚ñ∏ {uname} ‚ñ∏ {phone}"
        rows.append([InlineKeyboardButton(text=txt, callback_data=f"reauth_toggle:{acc_id}")])

    # –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"reauth_page:{page-1}"))
    if start + per_page < len(accounts):
        nav.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"reauth_page:{page+1}"))
    if nav:
        rows.append(nav)

    # —á–∏–ø—Å—ã –≥—Ä—É–ø–ø (–ø–æ 3 –≤ —Ä—è–¥)
    chips: List[InlineKeyboardButton] = []
    if groups:
        for g in groups:
            cnt = int(g.get("count") or 0)
            if cnt < 1:
                continue
            name  = f"{g.get('emoji','')} {g.get('name','')}".strip()
            label = f"{name} ({cnt})"
            chips.append(InlineKeyboardButton(text=label, callback_data=f"reauth_group:{g['id']}"))
    for i in range(0, len(chips), 3):
        rows.append(chips[i:i+3])

    # –º–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    rows.append([
        InlineKeyboardButton(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="reauth_select_all"),
        InlineKeyboardButton(text="‚èπÔ∏è –°–Ω—è—Ç—å –≤—Å–µ",   callback_data="reauth_clear_all"),
    ])
    rows.append([
        InlineKeyboardButton(text="‚û° –î–∞–ª–µ–µ",  callback_data="reauth_to_twofa"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_main"),
    ])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def _twofa_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="2FA –Ω–µ—Ç", callback_data="reauth_twofa_none")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="reauth_back_select")],
    ])

def _confirm_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="reauth_start")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (2FA)", callback_data="reauth_back_twofa")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="menu_main")],
    ])

# ==========================
# ENTRY POINT
# ==========================
@router.callback_query(F.data == "task_reauth_start")
@admin_only
async def task_reauth_start(call: types.CallbackQuery, state: FSMContext):
    accounts = get_all_accounts() or []
    groups   = get_account_groups_with_count()

    await state.set_state(ReauthFSM.select_accounts)
    await state.update_data(
        **{
            STATE_ACCOUNTS: accounts,
            STATE_SELECTED: [],
            STATE_PAGE: 0
        }
    )
    kb = _accounts_keyboard(accounts, set(), 0, PER_PAGE, groups)
    await call.message.edit_text(
        "üîë <b>–ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã:",
        reply_markup=kb, parse_mode="HTML"
    )
    await call.answer()

# ======= –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ =======
@router.callback_query(F.data.startswith("reauth_page:"))
@admin_only
async def reauth_page_sw(call: types.CallbackQuery, state: FSMContext):
    page = int(call.data.split(":")[1])
    data = await state.get_data()
    accounts = data.get(STATE_ACCOUNTS, [])
    selected = set(data.get(STATE_SELECTED, []))
    await state.update_data(**{STATE_PAGE: page})
    kb = _accounts_keyboard(accounts, selected, page, PER_PAGE, get_account_groups_with_count())
    await safe_edit_markup(call.message, kb)
    await call.answer()

@router.callback_query(F.data.startswith("reauth_toggle:"))
@admin_only
async def reauth_toggle_acc(call: types.CallbackQuery, state: FSMContext):
    acc_id = int(call.data.split(":")[1])
    data = await state.get_data()
    sel = set(data.get(STATE_SELECTED, []))
    if acc_id in sel:
        sel.remove(acc_id)
    else:
        sel.add(acc_id)
    await state.update_data(**{STATE_SELECTED: list(sel)})
    accounts = data.get(STATE_ACCOUNTS, [])
    page = int(data.get(STATE_PAGE, 0))
    kb = _accounts_keyboard(accounts, sel, page, PER_PAGE, get_account_groups_with_count())
    await safe_edit_markup(call.message, kb)
    await call.answer()

@router.callback_query(F.data == "reauth_select_all")
@admin_only
async def reauth_select_all(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    accounts = data.get(STATE_ACCOUNTS, [])
    all_ids = [a["id"] for a in accounts]
    await state.update_data(**{STATE_SELECTED: all_ids})
    page = int(data.get(STATE_PAGE, 0))
    kb = _accounts_keyboard(accounts, set(all_ids), page, PER_PAGE, get_account_groups_with_count())
    await safe_edit_markup(call.message, kb)
    await call.answer("‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã")

@router.callback_query(F.data == "reauth_clear_all")
@admin_only
async def reauth_clear_all(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    accounts = data.get(STATE_ACCOUNTS, [])
    await state.update_data(**{STATE_SELECTED: []})
    page = int(data.get(STATE_PAGE, 0))
    kb = _accounts_keyboard(accounts, set(), page, PER_PAGE, get_account_groups_with_count())
    await safe_edit_markup(call.message, kb)
    await call.answer("‚ôªÔ∏è –°–±—Ä–æ—à–µ–Ω –≤—ã–±–æ—Ä")

# —á–∏–ø—Å –≥—Ä—É–ø–ø—ã (–≤—ã–±–∏—Ä–∞–µ–º —Ä–æ–≤–Ω–æ —ç—Ç—É –≥—Ä—É–ø–ø—É)
@router.callback_query(F.data.startswith("reauth_group:"))
@admin_only
async def reauth_group_pick(call: types.CallbackQuery, state: FSMContext):
    group_id = int(call.data.split(":")[1])
    data = await state.get_data()
    accounts = data.get(STATE_ACCOUNTS, [])
    page     = int(data.get(STATE_PAGE, 0))

    ids_in_group = _group_ids(accounts, group_id)
    if not ids_in_group:
        await call.answer("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        return

    await state.update_data(**{STATE_SELECTED: list(ids_in_group)})

    # –µ—Å–ª–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–∏–∑—É–∞–ª—å–Ω–æ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è ‚Äî –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º
    start = page * PER_PAGE
    page_ids = {a["id"] for a in accounts[start:start + PER_PAGE]}
    changed_on_page = bool(ids_in_group & page_ids)

    kb = _accounts_keyboard(accounts, ids_in_group, page, PER_PAGE, get_account_groups_with_count())
    if changed_on_page:
        await safe_edit_markup(call.message, kb)

    await call.answer(f"–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ (–∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(ids_in_group)})")

@router.callback_query(F.data == "reauth_to_twofa")
@admin_only
async def reauth_to_twofa(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_ids = data.get(STATE_SELECTED, [])
    if not selected_ids:
        await call.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç.", show_alert=True)
        return
    await state.set_state(ReauthFSM.ask_twofa)
    await call.message.edit_text(
        "üîê –í–≤–µ–¥–∏—Ç–µ –æ–±—â–∏–π –ø–∞—Ä–æ–ª—å 2FA (–µ—Å–ª–∏ –µ—Å—Ç—å) –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´2FA –Ω–µ—Ç¬ª.",
        reply_markup=_twofa_keyboard()
    )
    await call.answer()

@router.callback_query(F.data == "reauth_back_select")
@admin_only
async def reauth_back_select(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    accounts = data.get(STATE_ACCOUNTS, [])
    page = int(data.get(STATE_PAGE, 0))
    selected = set(data.get(STATE_SELECTED, []))
    await state.set_state(ReauthFSM.select_accounts)
    kb = _accounts_keyboard(accounts, selected, page, PER_PAGE, get_account_groups_with_count())
    await call.message.edit_text(
        "üîë <b>–ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã:",
        reply_markup=kb, parse_mode="HTML"
    )
    await call.answer()

# ======= –≤–≤–æ–¥ 2FA =======
@router.callback_query(F.data == "reauth_twofa_none")
@admin_only
async def reauth_twofa_none(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    accs = data.get(STATE_SELECTED, [])
    await state.update_data(twofa_password=None)
    await state.set_state(ReauthFSM.confirm)

    text = (
        "‚úÖ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏</b>\n\n"
        f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: <b>{len(accs)}</b>\n"
        f"‚Ä¢ 2FA –ø–∞—Ä–æ–ª—å: <b>‚Äî</b>\n\n"
        "–°—Ç–∞—Ä—Ç—É–µ–º?"
    )
    await call.message.edit_text(text, reply_markup=_confirm_keyboard(), parse_mode="HTML")
    await call.answer()

@router.message(ReauthFSM.ask_twofa)
async def reauth_set_twofa(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    accs = data.get(STATE_SELECTED, [])
    pwd = (msg.text or "").strip() or None

    await state.update_data(twofa_password=pwd)
    await state.set_state(ReauthFSM.confirm)

    text = (
        "‚úÖ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏</b>\n\n"
        f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: <b>{len(accs)}</b>\n"
        f"‚Ä¢ 2FA –ø–∞—Ä–æ–ª—å: <b>{'—É–∫–∞–∑–∞–Ω' if pwd else '‚Äî'}</b>\n\n"
        "–°—Ç–∞—Ä—Ç—É–µ–º?"
    )
    await msg.answer(text, reply_markup=_confirm_keyboard(), parse_mode="HTML")

@router.callback_query(F.data == "reauth_back_twofa")
@admin_only
async def reauth_back_twofa(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(ReauthFSM.ask_twofa)
    await call.message.edit_text(
        "üîê –í–≤–µ–¥–∏—Ç–µ –æ–±—â–∏–π –ø–∞—Ä–æ–ª—å 2FA (–µ—Å–ª–∏ –µ—Å—Ç—å) –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´2FA –Ω–µ—Ç¬ª.",
        reply_markup=_twofa_keyboard()
    )
    await call.answer()

# ======= —Å—Ç–∞—Ä—Ç =======
def _create_task_in_db(payload: dict) -> int:
    """–°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ payload –≤ –ë–î —Ç–æ–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç task_id."""
    task_id = None

    try:
        from app.db import add_task
        tid = add_task(task_type="reauthorize_accounts", payload=payload, status="pending")
        task_id = tid["id"] if isinstance(tid, dict) and "id" in tid else int(tid)
    except Exception:
        # fallback: –ø—Ä—è–º–æ–π INSERT (–∑–¥–µ—Å—å payload –≤ –ë–î –ø–æ–∫–∞ –±–µ–∑ task_id)
        conn = get_connection()
        cur = conn.cursor()
        import json
        cur.execute("""
            INSERT INTO tasks (type, status, payload)
            VALUES (%s, %s, %s)
            RETURNING id
        """, ("reauthorize_accounts", "pending", json.dumps(payload)))
        task_id = cur.fetchone()[0]
        conn.commit()
        cur.close()
        conn.close()

    # –î–æ–±–∞–≤–ª—è–µ–º task_id –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å (–¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –≤–æ—Ä–∫–µ—Ä)
    payload["task_id"] = task_id

    # –ß—Ç–æ–±—ã –∏ –≤ –ë–î payload —Å–æ–¥–µ—Ä–∂–∞–ª task_id ‚Äî –æ–±–Ω–æ–≤–∏–º —Å—Ç—Ä–æ–∫—É:
    try:
        conn = get_connection()
        cur = conn.cursor()
        import json
        cur.execute("""
            UPDATE tasks
               SET payload = %s
             WHERE id = %s
        """, (json.dumps(payload), task_id))
        conn.commit()
    finally:
        try:
            cur.close()
            conn.close()
        except:
            pass

    return task_id

@router.callback_query(F.data == "reauthorize_accounts_card")
@admin_only
async def show_card_placeholder(call: types.CallbackQuery):
    await call.answer("–ö–∞—Ä—Ç–æ—á–∫–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.", show_alert=True)

@router.callback_query(F.data == "reauth_start")
@admin_only
async def reauth_start(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    acc_ids = data.get(STATE_SELECTED, [])
    if not acc_ids:
        await call.answer("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.", show_alert=True)
        return

    twofa = data.get("twofa_password")

    # –±–µ—Ä—ë–º –æ–¥–∏–Ω API –∫–ª—é—á –Ω–∞ –≤—Å—é –∑–∞–¥–∞—á—É
    api_key = get_available_api_key()
    if not api_key:
        await call.answer("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö API –∫–ª—é—á–µ–π.", show_alert=True)
        return
    increment_api_key_usage(api_key["id"])

    payload = {
        "accounts": acc_ids,
        "twofa_password": twofa,
    }
    task_id = _create_task_in_db(payload)
    payload["task_id"] = task_id

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    asyncio.create_task(
        run_reauth_task(api_key["api_id"], api_key["api_hash"], payload, logger=log, task_id=task_id)
    )

    # –ö–∞—Ä—Ç–æ—á–∫–∞-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    txt = (
        f"üöÄ –ó–∞–¥–∞—á–∞ <b>#{task_id}</b> –∑–∞–ø—É—â–µ–Ω–∞.\n\n"
        f"–¢–∏–ø: <code>reauthorize_accounts</code>\n"
        f"–ê–∫–∫–∞—É–Ω—Ç–æ–≤: <b>{len(acc_ids)}</b>\n"
        f"2FA: <b>{'—É–∫–∞–∑–∞–Ω' if twofa else '‚Äî'}</b>\n\n"
        f"–û—Ç–∫—Ä–æ–π ¬´–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á¬ª, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ª–æ–≥–∏."
    )
    await call.message.edit_text(
        txt, parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", callback_data="menu_task_execution")],
        ])
    )
    await state.clear()
    await call.answer("–°—Ç–∞—Ä—Ç—É–µ–º ‚úÖ")
