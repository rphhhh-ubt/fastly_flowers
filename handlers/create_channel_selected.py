from aiogram import Router, types, F, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, FSInputFile
from utils.check_access import admin_only
from app.db import get_all_accounts, create_task_entry, insert_task_create_log
from keyboards.create_channel_keyboards import build_create_channel_keyboard
from aiogram.fsm.context import FSMContext
from handlers.channel_creation import create_channels_process  # –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
from datetime import datetime
import asyncio, os
from io import StringIO
from contextlib import redirect_stdout
router = Router()
# –£–¥–∞–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π selected_accounts_create –∏–∑ channel_creation
from handlers.channel_creation import selected_accounts_create
# == –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ ==
from aiogram.exceptions import TelegramBadRequest
from app.db import get_all_accounts, get_account_groups_with_count
from keyboards.create_channel_accounts_keyboard import create_channel_accounts_keyboard


# == –õ–û–ö–ê–õ–¨–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –°–û–°–¢–û–Ø–ù–ò–Ø –í–´–ë–û–†–ê ==
STATE_ACCS = "crch_accounts"
STATE_SEL  = "crch_selected"
STATE_PAGE = "crch_page"
PER_PAGE   = 10

# == –•–ï–õ–ü–ï–† –ë–ï–ó–û–ü–ê–°–ù–û–ô –ü–ï–†–ï–†–ò–°–û–í–ö–ò ==
async def safe_edit_markup(msg: types.Message, kb):
    try:
        await msg.edit_reply_markup(reply_markup=kb)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise




@router.callback_query(F.data == "task_create_channels")
@admin_only
async def crch_start(callback: types.CallbackQuery, state: FSMContext):
    accounts = get_all_accounts()
    groups   = get_account_groups_with_count()

    # –æ—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–π –≤—ã–±–æ—Ä (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –±—ã–ª)
    await state.update_data(**{STATE_ACCS: accounts, STATE_SEL: set(), STATE_PAGE: 0})

    kb = create_channel_accounts_keyboard(
        accounts, selected=set(), page=0, per_page=PER_PAGE, groups=groups
    )
    await callback.message.edit_text(
        "üì° –®–∞–≥ 1: –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤.",
        reply_markup=kb
    )
    await callback.answer()

@router.callback_query(F.data.startswith("create_channel_toggle_"))
@admin_only
async def toggle_account_create_channel(callback: types.CallbackQuery):
    acc_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    current = selected_accounts_create.get(user_id, [])
    if acc_id in current:
        current.remove(acc_id)
    else:
        current.append(acc_id)
    selected_accounts_create[user_id] = current
    print(f"[DEBUG] üîÑ –¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è: {selected_accounts_create}")
    accounts = get_all_accounts()
    await callback.message.edit_text(
        "üì° –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞:",
        reply_markup=build_create_channel_keyboard(accounts, current),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("crch_toggle:"))
async def crch_toggle(callback: types.CallbackQuery, state: FSMContext):
    acc_id = int(callback.data.split(":")[1])
    data = await state.get_data()
    accounts = data.get(STATE_ACCS, [])
    selected = list(data.get(STATE_SEL, []))  # —Å–ø–∏—Å–æ–∫

    if acc_id in selected:
        selected.remove(acc_id)
    else:
        selected.append(acc_id)

    await state.update_data(**{STATE_SEL: selected})
    kb = create_channel_accounts_keyboard(
        accounts, set(selected),  # —Ç—É—Ç –º–æ–∂–Ω–æ –≤ set() —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≥–∞–ª–æ—á–µ–∫
        page=int(data.get(STATE_PAGE, 0)),
        per_page=PER_PAGE,
        groups=get_account_groups_with_count()
    )
    await safe_edit_markup(callback.message, kb)
    await callback.answer()


@router.callback_query(F.data.startswith("crch_page:"))
@admin_only
async def crch_page(callback: types.CallbackQuery, state: FSMContext):
    new_page = int(callback.data.split(":")[1])
    data = await state.get_data()
    accounts = data.get(STATE_ACCS, [])
    selected = set(data.get(STATE_SEL, set()))
    await state.update_data(**{STATE_PAGE: new_page})

    kb = create_channel_accounts_keyboard(
        accounts, selected, page=new_page, per_page=PER_PAGE, groups=get_account_groups_with_count()
    )
    await safe_edit_markup(callback.message, kb)
    await callback.answer()

@router.callback_query(F.data == "crch_select_all")
@admin_only
async def crch_select_all(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    accounts = data.get(STATE_ACCS, [])
    selected = {a["id"] for a in accounts}
    await state.update_data(**{STATE_SEL: selected})

    page = int(data.get(STATE_PAGE, 0))
    kb = create_channel_accounts_keyboard(
        accounts, selected, page=page, per_page=PER_PAGE, groups=get_account_groups_with_count()
    )
    await safe_edit_markup(callback.message, kb)
    await callback.answer("‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã")

@router.callback_query(F.data == "crch_clear_all")
@admin_only
async def crch_clear_all(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    accounts = data.get(STATE_ACCS, [])
    await state.update_data(**{STATE_SEL: set()})

    page = int(data.get(STATE_PAGE, 0))
    kb = create_channel_accounts_keyboard(
        accounts, set(), page=page, per_page=PER_PAGE, groups=get_account_groups_with_count()
    )
    await safe_edit_markup(callback.message, kb)
    await callback.answer("‚ôªÔ∏è –°–±—Ä–æ—à–µ–Ω –≤—ã–±–æ—Ä")

# == –ß–ò–ü–° –ì–†–£–ü–ü–´ (–≤—ã–±–∏—Ä–∞–µ–º —Ä–æ–≤–Ω–æ —ç—Ç—É –≥—Ä—É–ø–ø—É) ==
@router.callback_query(F.data.startswith("crch_group:"))
@admin_only
async def crch_group_pick(callback: types.CallbackQuery, state: FSMContext):
    group_id = int(callback.data.split(":")[1])
    data = await state.get_data()
    accounts = data.get(STATE_ACCS, [])
    page     = int(data.get(STATE_PAGE, 0))

    ids_in_group = [a["id"] for a in accounts if a.get("group_id") == group_id]
    if not ids_in_group:
        await callback.answer("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        return

    await state.update_data(**{STATE_SEL: ids_in_group})

    kb = create_channel_accounts_keyboard(
        accounts, set(ids_in_group),
        page=page, per_page=PER_PAGE, groups=get_account_groups_with_count()
    )
    await safe_edit_markup(callback.message, kb)
    await callback.answer(f"–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ (–∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(ids_in_group)})")


# == –î–ê–õ–ï–ï: –ø—Ä–æ–±—Ä–æ—Å–∏–º –≤—ã–±–æ—Ä –≤ —Ç–≤–æ—é —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É ==
from handlers.channel_creation import selected_accounts_create  # –∫–∞–∫ –∏ –±—ã–ª–æ —É —Ç–µ–±—è



@router.callback_query(F.data == "create_channel_select_all")
@admin_only
async def select_all_accounts_create_channel(callback: types.CallbackQuery):
    print("[DEBUG] üü¢ –ù–∞—á–∏–Ω–∞—é '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ'")
    accounts = get_all_accounts()
    print(f"[DEBUG] üì• –ü–æ–ª—É—á–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã: {accounts}")
    selected_ids = [acc["id"] for acc in accounts]
    selected_accounts_create[callback.from_user.id] = selected_ids
    print(f"[DEBUG] ‚úÖ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã: {selected_ids}")
    await callback.message.edit_text(
        "üì° –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã.\n–ù–∞–∂–º–∏—Ç–µ ¬´–î–∞–ª–µ–µ¬ª.",
        reply_markup=build_create_channel_keyboard(accounts, selected_ids),
        parse_mode="HTML"
    )
    await callback.answer()

from handlers.channel_creation import ChannelCreation, selected_accounts_create
from keyboards.cancel_keyboard import cancel_keyboard

@router.callback_query(F.data == "proceed_create_channel")
@admin_only
async def crch_proceed(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_ids = list(data.get(STATE_SEL, set()))
    if not selected_ids:
        await callback.answer("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", show_alert=True)
        return

    # –ø—Ä–æ–±—Ä–æ—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º channel_creation
    user_id = callback.from_user.id
    selected_accounts_create[user_id] = selected_ids

    # –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ (–∫–∞–∫ –≤ channel_creation)
    await state.clear()
    await state.set_state(ChannelCreation.waiting_for_titles)

    sent = await callback.message.answer(
        "üì• –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞–Ω–∞–ª–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ):",
        reply_markup=cancel_keyboard()
    )
    await state.update_data(
        bot_message_id=sent.message_id,
        selected_account_ids=selected_ids  # channel_creation —á–∏—Ç–∞–µ—Ç —ç—Ç–æ –ø–æ–ª–µ
    )

    # –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await callback.message.delete()
    except: 
        pass

    await callback.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É‚Ä¶")

from handlers.channel_creation import ChannelCreation, selected_accounts_create
from keyboards.cancel_keyboard import cancel_keyboard

@router.callback_query(F.data == "crch_next")   # <‚Äî –ù–û–í–´–ô callback
@admin_only
async def crch_proceed(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_ids = list(data.get(STATE_SEL, []))
    print("[DEBUG] crch_next selected_ids =", selected_ids)  # –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥

    if not selected_ids:
        await callback.answer("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!", show_alert=True)
        return

    # –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π (–æ–Ω —ç—Ç–æ–≥–æ –∂–¥—ë—Ç)
    selected_accounts_create[callback.from_user.id] = selected_ids

    await state.clear()
    await state.set_state(ChannelCreation.waiting_for_titles)
    sent = await callback.message.answer(
        "üì• –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞–Ω–∞–ª–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ):",
        reply_markup=cancel_keyboard()
    )
    await state.update_data(
        bot_message_id=sent.message_id,
        selected_account_ids=selected_ids
    )
    try:
        await callback.message.delete()
    except:
        pass
    await callback.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É‚Ä¶")
