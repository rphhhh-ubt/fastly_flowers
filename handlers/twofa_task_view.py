# handlers/twofa_task_view.py
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types
from datetime import datetime
import json

def _fmt_dt(dt):
    if not dt:
        return "‚Äî"
    if isinstance(dt, str):
        return dt
    try:
        # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º timezone-aware
        return dt.strftime("%d.%m.%Y %H:%M")
    except Exception:
        return str(dt)

def _mode_human(mode: str) -> str:
    m = (mode or "").lower()
    return {"new": "üÜï –ù–æ–≤—ã–π 2FA", "replace": "‚ôªÔ∏è –ó–∞–º–µ–Ω–∞ 2FA", "none": "üôÖ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"}.get(m, "‚Äî")

def _status_badge(status: str) -> str:
    s = (status or "unknown").lower()
    mp = {
        "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
        "active": "üü¢ –ê–∫—Ç–∏–≤–Ω–∞",
        "running": "üü° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
        "pending": "‚è≥ –í –æ—á–µ—Ä–µ–¥–∏",
        "error": "‚ùå –û—à–∏–±–∫–∞",
        "paused": "‚è∏Ô∏è –ü–∞—É–∑–∞",
    }
    return mp.get(s, f"‚ùì {status or 'unknown'}")

def _safe_payload(task: dict) -> dict:
    payload = task.get("payload") or {}
    if isinstance(payload, str):
        try:
            payload = json.loads(payload)
        except Exception:
            payload = {}
    return payload

def _accounts_count(task: dict) -> int:
    # –ø—Ä–æ–±—É–µ–º –∏–∑ payload.accounts / accounts_json –∏–ª–∏ –∏–∑ —Ç–≤–æ–µ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
    payload = _safe_payload(task)
    accs = payload.get("accounts") or payload.get("accounts_json") or task.get("accounts_json") or []
    if isinstance(accs, str):
        try:
            accs = json.loads(accs)
        except Exception:
            accs = []
    if isinstance(accs, dict):
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        accs = list(accs.values())
    return len(accs) if isinstance(accs, list) else (task.get("accounts_count") or 0)

def _masked(s: str | None) -> str:
    if not s:
        return "‚Äî"
    return "‚Ä¢" * len(s)

def create_twofa_task_card(task: dict) -> tuple[str, InlineKeyboardMarkup]:
    """
    –ù–∞ –≤—Ö–æ–¥ ‚Äî –∑–∞–¥–∞—á–∞ –∏–∑ get_task_by_id –ø–æ —Ç–∏–ø—É "twofa".
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (text, markup).
    """
    payload = _safe_payload(task)

    task_id    = task.get("id")
    status     = task.get("status") or payload.get("status")
    started_at = task.get("started_at") or payload.get("started_at")
    finished_at= task.get("finished_at") or payload.get("finished_at")
    scheduled  = task.get("scheduled_at")

    mode       = payload.get("mode") or task.get("mode")
    kill_other = bool(payload.get("kill_other") or task.get("kill_other"))

    new_pw     = payload.get("new_password") or task.get("new_password")
    old_pw     = payload.get("old_password") or task.get("old_password")

    accs_cnt   = _accounts_count(task)

    text = (
        f"üîê <b>2FA ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–¥–∞—á–∏</b> #{task_id}\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {_status_badge(status)}\n"
        f"‚Ä¢ C—Ç–∞—Ä—Ç –∑–∞–¥–∞—á–∏: {_fmt_dt(started_at)}\n\n"
        f"‚Ä¢ –†–µ–∂–∏–º: {_mode_human(mode)}\n"
        f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {accs_cnt}\n"
        f"‚Ä¢ –£–¥–∞–ª–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {'–î–∞' if kill_other else '–ù–µ—Ç'}\n"
        f"‚Ä¢ –°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å: <code>{_masked(old_pw)}</code>\n"
        f"‚Ä¢ –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: <code>{_masked(new_pw)}</code>\n"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥", callback_data=f"twofa:log:{task_id}")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_twofa_task_{task_id}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"twofa:delete:{task_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_task_execution")],
    ])
    return text, kb
