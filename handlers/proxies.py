# handlers/proxies.py
import os
from aiogram.types import FSInputFile,InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from states.import_proxies import ImportProxiesStates
from utils.check_access import admin_only
from keyboards.proxy_menu import proxy_menu_keyboard
from keyboards.proxy_list import proxy_list_keyboard
from app.db import (
    save_proxy,
    get_all_proxies,
    update_proxy_status_by_id,
    delete_proxy_by_id,
    delete_bad_proxies,
    get_proxy_by_id,
    proxy_exists,
    get_all_accounts,
    get_proxy_by_id,
)
from app.utils.proxy_checker import is_proxy_working
from keyboards.back_to_proxies_menu import back_to_proxies_menu_keyboard


router = Router()

@router.callback_query(F.data == "import_proxies")
@admin_only
async def start_import_proxies(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n<code>ip:port:login:password</code>\n–∏–ª–∏\n<code>ip:port</code>\n\n–ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –º–Ω–æ–≥–æ ‚Äî –ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É.",
        reply_markup=back_to_proxies_menu_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(ImportProxiesStates.waiting_for_proxies)
    await callback.answer()

@router.message(ImportProxiesStates.waiting_for_proxies)
@admin_only
async def process_proxies_list(message: types.Message, state: FSMContext):
    

    proxies_raw = message.text.strip().splitlines()

    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("‚è≥ –ò–¥–µ—Ç –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏...\n–ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –í–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–æ–≥.")

    total_proxies = 0
    working_proxies = 0
    bad_proxies = 0
    duplicate_proxies = 0

    working_list = []
    bad_list = []
    duplicate_list = []

    for line in proxies_raw:
        line = line.strip()
        if not line:
            continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

        parts = line.split(":")
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º 2 (ip:port) –∏–ª–∏ 4 (ip:port:user:pass) —á–∞—Å—Ç–∏
        if len(parts) not in (2, 4):
            bad_proxies += 1
            bad_list.append(f"{line} ‚Üí ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            continue

        host = parts[0].strip()
        port_str = parts[1].strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç ‚Äî —ç—Ç–æ —á–∏—Å–ª–æ
        try:
            port = int(port_str)
            if not (1 <= port <= 65535):
                raise ValueError("–ü–æ—Ä—Ç –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        except ValueError:
            bad_proxies += 1
            bad_list.append(f"{line} ‚Üí ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç: '{port_str}'")
            continue

        username = password = None
        if len(parts) == 4:
            username = parts[2].strip() or None
            password = parts[3].strip() or None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        if proxy_exists(host, port, username, password):
            duplicate_proxies += 1
            duplicate_repr = f"{host}:{port}" + (f":{username}:{password}" if username else "")
            duplicate_list.append(duplicate_repr)
            continue

        # –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º proxy_conf
        proxy_conf = {
            "type": "socks5",
            "host": host,
            "port": port,  # ‚Üê —É–∂–µ int!
            "username": username,
            "password": password,
        }

        total_proxies += 1

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        is_ok = await is_proxy_working(proxy_conf)

        if is_ok:
            save_proxy(
                host=proxy_conf["host"],
                port=proxy_conf["port"],
                username=proxy_conf["username"],
                password=proxy_conf["password"]
            )
            working_proxies += 1
            working_list.append(f"{proxy_conf['host']}:{proxy_conf['port']}" + (f":{proxy_conf['username']}:{proxy_conf['password']}" if proxy_conf['username'] else ""))
        else:
            bad_proxies += 1
            bad_list.append(f"{proxy_conf['host']}:{proxy_conf['port']}" + (f":{proxy_conf['username']}:{proxy_conf['password']}" if proxy_conf['username'] else ""))

        total_proxies += 1

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏
        if proxy_exists(proxy_conf["host"], proxy_conf["port"], proxy_conf["username"], proxy_conf["password"]):
            duplicate_proxies += 1
            duplicate_list.append(f"{proxy_conf['host']}:{proxy_conf['port']}" + (f":{proxy_conf['username']}:{proxy_conf['password']}" if proxy_conf['username'] else ""))
            continue

        
    # --- –°–æ–∑–¥–∞—ë–º –ª–æ–≥-—Ñ–∞–π–ª ---
    log_text = []
    log_text.append(f"‚úÖ –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏ –∑–∞–≤–µ—Ä—à—ë–Ω!\n")
    log_text.append(f"–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_proxies}")
    log_text.append(f"–†–∞–±–æ—á–∏—Ö –Ω–æ–≤—ã—Ö –ø—Ä–æ–∫—Å–∏: {working_proxies}")
    log_text.append(f"–î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicate_proxies}")
    log_text.append(f"–ù–µ—Ä–∞–±–æ—á–∏—Ö: {bad_proxies}")
    log_text.append("\n--- –†–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏ ---\n")
    log_text.extend(working_list if working_list else ["(–Ω–µ—Ç)"])
    log_text.append("\n--- –î—É–±–ª–∏–∫–∞—Ç—ã –ø—Ä–æ–∫—Å–∏ ---\n")
    log_text.extend(duplicate_list if duplicate_list else ["(–Ω–µ—Ç)"])
    log_text.append("\n--- –ù–µ—Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏ ---\n")
    log_text.extend(bad_list if bad_list else ["(–Ω–µ—Ç)"])

    log_content = "\n".join(log_text)

    log_path = f"/tmp/proxy_import_log.txt"

    with open(log_path, "w", encoding="utf-8") as f:
        f.write(log_content)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥-—Ñ–∞–π–ª
    await message.answer_document(FSInputFile(log_path), caption="üìù –õ–æ–≥ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ–∫—Å–∏")

    try:
        os.remove(log_path)
    except Exception as e:
        print(f"[‚ö†Ô∏è] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞: {e}")

    # –í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if working_proxies > 0:
        await message.answer(
            "‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=back_to_proxies_menu_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –í—Å–µ –ø—Ä–æ–∫—Å–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–µ—Ä–∞–±–æ—á–∏–º–∏ –∏–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=back_to_proxies_menu_keyboard()
        )

    await state.clear()

@router.callback_query(F.data == "view_proxies")
@admin_only
async def view_proxies(callback: types.CallbackQuery):
    accounts = get_all_accounts()

    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    for account in accounts:
        host = account.get("proxy_host")
        port = account.get("proxy_port")
        username = account.get("proxy_username")
        password = account.get("proxy_password")

        if host and port:
            if not proxy_exists(host, port, username, password):
                save_proxy(host, port, username, password)

    proxies = get_all_proxies()

    if not proxies:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
            reply_markup=back_to_proxies_menu_keyboard()
        )
        return

    await callback.message.edit_text(
        "üåê –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=proxy_list_keyboard(proxies)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("check_proxy_"))
@admin_only
async def check_single_proxy(callback: types.CallbackQuery):
    proxy_id = int(callback.data.split("_")[2])
    proxy = get_proxy_by_id(proxy_id)

    if not proxy:
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    proxy_conf = {
        "type": "socks5",
        "host": proxy["host"],
        "port": proxy["port"],
        "username": proxy.get("username"),
        "password": proxy.get("password")
    }

    is_ok = await is_proxy_working(proxy_conf)

    if is_ok:
        update_proxy_status_by_id(proxy_id, "working")
        await callback.answer("‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—á–∏–π!", show_alert=True)
    else:
        update_proxy_status_by_id(proxy_id, "bad")
        await callback.answer("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!", show_alert=True)

    await view_proxies(callback)

@router.callback_query(F.data.startswith("delete_proxy_"))
@admin_only
async def delete_proxy(callback: types.CallbackQuery):
    proxy_id = int(callback.data.split("_")[2])
    delete_proxy_by_id(proxy_id)
    await callback.answer("üóë –ü—Ä–æ–∫—Å–∏ —É–¥–∞–ª—ë–Ω.", show_alert=True)
    await view_proxies(callback)

@router.callback_query(F.data == "delete_bad_proxies")
@admin_only
async def delete_all_bad(callback: types.CallbackQuery):
    delete_bad_proxies()
    await callback.answer("üóë –í—Å–µ –Ω–µ—Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏ —É–¥–∞–ª–µ–Ω—ã.", show_alert=True)
    await view_proxies(callback)

from aiogram.types import FSInputFile
import os

@router.callback_query(F.data == "check_all_proxies")
@admin_only
async def check_all_proxies(callback: types.CallbackQuery):
    # –®–∞–≥ 1: –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ "–ò–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞"
    await callback.message.edit_text(
        "üîÑ –ò–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏...\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        reply_markup=None
    )

    proxies = get_all_proxies()

    log_lines = []
    checked = 0
    working = 0
    bad = 0

    for proxy in proxies:
        proxy_conf = {
            "type": "socks5",
            "host": proxy["host"],
            "port": proxy["port"],
            "username": proxy.get("username"),
            "password": proxy.get("password")
        }

        is_ok = await is_proxy_working(proxy_conf)

        if is_ok:
            update_proxy_status_by_id(proxy["id"], "working")
            working += 1
            status_emoji = "‚úÖ"
            status_text = "–†–∞–±–æ—á–∏–π"
        else:
            update_proxy_status_by_id(proxy["id"], "bad")
            bad += 1
            status_emoji = "‚ùå"
            status_text = "–ù–µ—Ä–∞–±–æ—á–∏–π"

        checked += 1

        proxy_label = f"{proxy['host']}:{proxy['port']}"
        log_lines.append(f"{status_emoji} {proxy_label} - {status_text}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥ –≤ –ª–æ–≥
    log_lines.append("")
    log_lines.append(f"–ò—Ç–æ–≥:\n‚úÖ –†–∞–±–æ—á–∏—Ö: {working}\n‚ùå –ü–ª–æ—Ö–∏—Ö: {bad}\n–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checked}")

    log_text = "\n".join(log_lines)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ —Ñ–∞–π–ª
    log_file_path = f"/tmp/proxies_check_log_{callback.from_user.id}.txt"
    with open(log_file_path, "w", encoding="utf-8") as f:
        f.write(log_text)

    # –®–∞–≥ 2: –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ò–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞..."
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

    # –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é –ø—Ä–æ–∫—Å–∏
    await callback.bot.send_message(
        chat_id=callback.from_user.id,
        text="üåê –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=proxy_list_keyboard(get_all_proxies())
    )

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
    delete_log_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–ö", callback_data="delete_log_message")]
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ —Å –∫–Ω–æ–ø–∫–æ–π
    await callback.bot.send_document(
        chat_id=callback.from_user.id,
        document=FSInputFile(log_file_path),
        caption="üìÑ –õ–æ–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏",
        reply_markup=delete_log_keyboard
    )

    # –£–¥–∞–ª—è–µ–º –ª–æ–≥-—Ñ–∞–π–ª
    if os.path.exists(log_file_path):
        os.remove(log_file_path)


@router.callback_query(F.data.startswith("confirm_delete_proxy_"))
@admin_only
async def confirm_delete_proxy(callback: types.CallbackQuery):
    proxy_id = int(callback.data.split("_")[3])

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_proxy_{proxy_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="view_proxies")
            ]
        ]
    )

    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–∫—Å–∏?",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "confirm_delete_bad_proxies")
@admin_only
async def confirm_delete_all_bad(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –ø–ª–æ—Ö–∏–µ", callback_data="delete_bad_proxies"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="view_proxies")
            ]
        ]
    )

    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–ª–æ—Ö–∏–µ –ø—Ä–æ–∫—Å–∏?",
        reply_markup=keyboard
    )
    await callback.answer()

from app.db import update_proxy_status

@router.callback_query(F.data.startswith("check_proxylist_"))
@admin_only
async def check_single_proxy(callback: types.CallbackQuery):

    proxy_id = int(callback.data.split("_")[2])
    proxy = get_proxy_by_id(proxy_id)

    if not proxy:
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    proxy_conf = {
        "type": "socks5",
        "host": proxy["host"],
        "port": proxy["port"],
        "username": proxy.get("username"),
        "password": proxy.get("password"),
    }

    is_working = await is_proxy_working(proxy_conf)

    # üëâ –ó–¥–µ—Å—å –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ!
    if is_working:
        update_proxy_status_by_id(proxy_id, "working")
        await callback.answer("‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!", show_alert=True)
    else:
        update_proxy_status_by_id(proxy_id, "bad")
        await callback.answer("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!", show_alert=True)

@router.callback_query(F.data == "delete_log_message")
@admin_only
async def delete_log_message(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
        await callback.answer("‚úÖ –õ–æ–≥ —É–¥–∞–ª—ë–Ω!", show_alert=False)
    except Exception as e:
        print(f"‚ùó –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
