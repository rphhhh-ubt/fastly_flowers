from aiogram import Router, types, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from keyboards.account_groups import grantes_menu_keyboard
from app.db import create_account_group, get_account_groups, get_account_groups_with_count, get_connection, delete_group_by_id, get_all_accounts

router = Router()

STICKY_KEY_CHAT = "sticky_chat_id"
STICKY_KEY_MSG  = "sticky_msg_id"

# --- FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã ---
class GroupDialog(StatesGroup):
    waiting_for_group_name = State()

class AddToGroupDialog(StatesGroup):
    selecting_accounts = State()

class RemoveFromGroupDialog(StatesGroup):
    selecting_accounts = State()

class RenameGroupDialog(StatesGroup):
    waiting_for_name = State()

def get_unassigned_accounts():
    conn = get_connection()
    cur = conn.cursor()
    try:
        cur.execute("""
            SELECT id, username, label, group_id
            FROM accounts
            WHERE group_id IS NULL
            ORDER BY id
        """)
        cols = [d[0] for d in cur.description]
        return [dict(zip(cols, r)) for r in cur.fetchall()]
    finally:
        cur.close()
        conn.close()

def get_group_accounts(group_id: int):
    conn = get_connection()
    cur = conn.cursor()
    try:
        cur.execute("""
            SELECT id, username, label, group_id
            FROM accounts
            WHERE group_id = %s
            ORDER BY id
        """, (group_id,))
        cols = [d[0] for d in cur.description]
        return [dict(zip(cols, r)) for r in cur.fetchall()]
    finally:
        cur.close()
        conn.close()

async def _sticky_set_from_message(state: FSMContext, message: types.Message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∏ id –±–æ—Ç-—Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    await state.update_data(**{
        STICKY_KEY_CHAT: message.chat.id,
        STICKY_KEY_MSG: message.message_id,
    })

async def _sticky_edit(state: FSMContext, bot: Bot, text: str, reply_markup: types.InlineKeyboardMarkup | None = None, parse_mode: str | None = "HTML"):
    data = await state.get_data()
    chat_id = data.get(STICKY_KEY_CHAT)
    msg_id  = data.get(STICKY_KEY_MSG)
    if chat_id and msg_id:
        await bot.edit_message_text(chat_id=chat_id, message_id=msg_id, text=text, reply_markup=reply_markup, parse_mode=parse_mode)
    else:
        # –§–æ–ª–ª–±–µ–∫: –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö id ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ª–æ–º–∞–µ–º
        # (–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —Å—Ç–∞—Ä–∞–µ–º—Å—è –≤—Å–µ–≥–¥–∞ –∏–º–µ—Ç—å sticky)
        pass


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@router.callback_query(F.data == "grantes_menu")
async def accountgroups_menu(callback: types.CallbackQuery, state: FSMContext):
    print("[DEBUG] –ü–æ–ª—É—á–µ–Ω callback_data:", callback.data)
    # —Ç–µ–∫—É—â–µ–µ callback.message ‚Äî —ç—Ç–æ –∏ –µ—Å—Ç—å ¬´–ª–∏–ø–∫–æ–µ¬ª –±–æ—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ
    await _sticky_set_from_message(state, callback.message)
    await callback.message.edit_text(
        "–ú–µ–Ω—é –≥—Ä—É–ø–ø –∞–∫–∫–∞—É–Ω—Ç–æ–≤:",
        reply_markup=grantes_menu_keyboard(prefix="accountgroups_")
    )
    await callback.answer()


# --- –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã ---
@router.callback_query(F.data == "grantes_create")
async def accountgroups_create(callback: types.CallbackQuery, state: FSMContext):
    print("[DEBUG] –ü–æ–ª—É—á–µ–Ω callback_data:", callback.data)
    # —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ sticky –ø—Ä–∏–≤—è–∑–∞–Ω (–Ω–∞ —Å–ª—É—á–∞–π –≤—Ö–æ–¥–∞ ¬´–≤ –æ–±—Ö–æ–¥¬ª)
    await _sticky_set_from_message(state, callback.message)

    await state.set_state(GroupDialog.waiting_for_group_name)
    await callback.message.edit_text(
        "–ü—Ä–∏—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —ç–º–æ–¥–∑–∏ –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: üòú –ì—Ä—É–ø–ø–∞ 1)",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="grantes_menu")]]
        )
    )
    await callback.answer()


@router.message(GroupDialog.waiting_for_group_name)
async def accountgroups_save_group_name(message: types.Message, state: FSMContext):
    # —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å ¬´–ø–µ—Ä–µ–ø–∏—Å–∫—É¬ª
    try:
        await message.delete()
    except Exception:
        pass  # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

    group_input = (message.text or "").strip()
    if " " in group_input:
        emoji, name = group_input.split(" ", 1)
    else:
        emoji, name = "", group_input

    group_id = create_account_group(name=name, emoji=emoji)

    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º sticky-—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≥—Ä—É–ø–ø
    kb = grantes_menu_keyboard(prefix="accountgroups_")
    await _sticky_edit(
        state,
        message.bot,
        text=f"‚úÖ –ì—Ä—É–ø–ø–∞ <b>{emoji} {name}</b> —Å–æ–∑–¥–∞–Ω–∞! (id: {group_id})\n\n–ú–µ–Ω—é –≥—Ä—É–ø–ø –∞–∫–∫–∞—É–Ω—Ç–æ–≤:",
        reply_markup=kb
    )
    await state.clear()


# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã ---
# --- –≠–∫—Ä–∞–Ω –≥—Ä—É–ø–ø—ã (–ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –∏–∑ grantes_edit) ---
@router.callback_query(F.data.regexp(r"^grantes_edit_\d+$"))
async def grantes_group_menu(callback: types.CallbackQuery):
    parts = callback.data.split("_")  # ["grantes","edit","{group_id}"]
    group_id = int(parts[2])

    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data=f"grantes_group_add_{group_id}")],
        [types.InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã",  callback_data=f"grantes_group_rm_{group_id}")],
        [types.InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å",    callback_data=f"grantes_group_rename_{group_id}")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º",  callback_data="grantes_edit")]
    ])
    await callback.message.edit_text(f"–ì—Ä—É–ø–ø–∞ ID <b>{group_id}</b> ‚Äî –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode="HTML", reply_markup=kb)
    await callback.answer()


# –®–∞–≥ 1: –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã (—Ä–æ–≤–Ω–æ grantes_add_{group_id})
@router.callback_query(F.data.regexp(r"^grantes_group_add_\d+$"))
async def grantes_add_select_group(callback: types.CallbackQuery, state: FSMContext):
    group_id = int(callback.data.split("_")[3])  # grantes_group_add_{group_id}
    await state.update_data(target_group_id=group_id, selected_account_ids=set())
    await state.set_state(AddToGroupDialog.selecting_accounts)
    await _render_accounts_multiselect_add(callback.message, state)
    await callback.answer()

@router.callback_query(F.data.regexp(r"^grantes_add_toggle_\d+_\d+$"), AddToGroupDialog.selecting_accounts)
async def grantes_add_toggle_account(callback: types.CallbackQuery, state: FSMContext):
    _, _, _, group_id_s, acc_id_s = callback.data.split("_")
    group_id = int(group_id_s); acc_id = int(acc_id_s)

    data = await state.get_data()
    if data.get("target_group_id") != group_id:
        await callback.answer("–°–µ–∞–Ω—Å –≤—ã–±–æ—Ä–∞ —É—Å—Ç–∞—Ä–µ–ª. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.", show_alert=True); return

    selected: set = set(data.get("selected_account_ids", set()))
    selected.symmetric_difference_update({acc_id})  # toggle
    await state.update_data(selected_account_ids=selected)
    await _render_accounts_multiselect_add(callback.message, state)
    await callback.answer()

@router.callback_query(F.data.regexp(r"^grantes_add_apply_\d+$"), AddToGroupDialog.selecting_accounts)
async def grantes_add_apply(callback: types.CallbackQuery, state: FSMContext):
    group_id = int(callback.data.split("_")[3])
    data = await state.get_data()
    if data.get("target_group_id") != group_id:
        await callback.answer("–°–µ–∞–Ω—Å –≤—ã–±–æ—Ä–∞ —É—Å—Ç–∞—Ä–µ–ª. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.", show_alert=True); return

    selected: set = set(data.get("selected_account_ids", set()))
    if not selected:
        await callback.answer("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.", show_alert=True); return

    conn = get_connection(); cur = conn.cursor()
    try:
        cur.execute("UPDATE accounts SET group_id = %s WHERE id = ANY(%s)", (group_id, list(selected)))
        conn.commit()
    finally:
        cur.close(); conn.close()

    await state.clear()
    await callback.message.edit_text(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group_id}: {len(selected)}",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–µ", callback_data=f"grantes_edit_{group_id}")]]
        )
    )
    await callback.answer("–ì–æ—Ç–æ–≤–æ!")

@router.callback_query(F.data.regexp(r"^grantes_add_cancel_\d+$"), AddToGroupDialog.selecting_accounts)
async def grantes_add_cancel(callback: types.CallbackQuery, state: FSMContext):
    group_id = int(callback.data.split("_")[3])
    await state.clear()
    await callback.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–µ", callback_data=f"grantes_edit_{group_id}")]]
    ))
    await callback.answer()

async def _render_accounts_multiselect_add(message: types.Message, state: FSMContext):
    data = await state.get_data()
    group_id = data["target_group_id"]
    selected: set = set(data.get("selected_account_ids", set()))

    accounts = get_unassigned_accounts()
    if not accounts:
        await message.edit_text(
            "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±–µ–∑ –≥—Ä—É–ø–ø—ã.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–µ", callback_data=f"grantes_edit_{group_id}")]]
            )
        )
        return

    rows = []
    for acc in accounts:
        acc_id = acc["id"]
        username = (acc.get("username") or "").strip()
        label = (acc.get("label") or "").strip()
        display = f"@{username}" if username and not username.startswith("@") else (username or label or f"acc#{acc_id}")
        mark = "‚úÖ" if acc_id in selected else "‚ûï"
        rows.append([types.InlineKeyboardButton(
            text=f"{mark} {display} [id:{acc_id}]",
            callback_data=f"grantes_add_toggle_{group_id}_{acc_id}"
        )])

    rows += [
        [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data=f"grantes_add_apply_{group_id}")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"grantes_edit_{group_id}"),
         types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"grantes_add_cancel_{group_id}")]
    ]

    await message.edit_text(
        f"–ì—Ä—É–ø–ø–∞ ID <b>{group_id}</b>\n–í—ã–±–µ—Ä–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è <b>–¥–æ–±–∞–≤–ª–µ–Ω–∏—è</b> (–≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –±–µ–∑ –≥—Ä—É–ø–ø—ã):",
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=rows)
    )


async def _render_accounts_multiselect(message: types.Message, state: FSMContext):
    """
    –†–∏—Å—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ë–ï–ó –≥—Ä—É–ø–ø—ã (group_id IS NULL) —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏.
    """
    data = await state.get_data()
    group_id = data["target_group_id"]
    selected: set = set(data.get("selected_account_ids", set()))

    accounts = get_unassigned_accounts()  # <-- —Ç–æ–ª—å–∫–æ –±–µ–∑ –≥—Ä—É–ø–ø—ã
    if not accounts:
        await message.edit_text(
            "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±–µ–∑ –≥—Ä—É–ø–ø—ã.\n"
            "–î–æ–±–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ–≥–æ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≥—Ä—É–ø–ø–∞.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="grantes_edit")]]
            )
        )
        return

    rows = []
    for acc in accounts:
        acc_id = acc["id"]
        username = (acc.get("username") or "").strip()
        label = (acc.get("label") or "").strip()

        if username:
            display = f"@{username}" if not username.startswith("@") else username
        elif label:
            display = label
        else:
            display = f"acc#{acc_id}"

        mark = "‚úÖ" if acc_id in selected else "‚ûï"
        btn_text = f"{mark} {display} [id:{acc_id}]"

        rows.append([
            types.InlineKeyboardButton(
                text=btn_text,
                callback_data=f"grantes_add_toggle_{group_id}_{acc_id}"
            )
        ])

    rows.append([
        types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data=f"grantes_add_apply_{group_id}")
    ])
    rows.append([
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="grantes_edit"),
        types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"grantes_add_cancel_{group_id}")
    ])

    await message.edit_text(
        f"–ì—Ä—É–ø–ø–∞ ID <b>{group_id}</b>\n–í—ã–±–µ—Ä–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –±–µ–∑ –≥—Ä—É–ø–ø—ã):",
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=rows)
    )


# --- –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã ---
@router.callback_query(F.data.regexp(r"^grantes_group_rm_\d+$"))
async def grantes_rm_select_group(callback: types.CallbackQuery, state: FSMContext):
    group_id = int(callback.data.split("_")[3])  # grantes_group_rm_{group_id}
    await state.update_data(target_group_id=group_id, selected_account_ids=set())
    await state.set_state(RemoveFromGroupDialog.selecting_accounts)
    await _render_accounts_multiselect_remove(callback.message, state)
    await callback.answer()

@router.callback_query(F.data.regexp(r"^grantes_rm_toggle_\d+_\d+$"), RemoveFromGroupDialog.selecting_accounts)
async def grantes_rm_toggle_account(callback: types.CallbackQuery, state: FSMContext):
    _, _, _, group_id_s, acc_id_s = callback.data.split("_")
    group_id = int(group_id_s); acc_id = int(acc_id_s)

    data = await state.get_data()
    if data.get("target_group_id") != group_id:
        await callback.answer("–°–µ–∞–Ω—Å –≤—ã–±–æ—Ä–∞ —É—Å—Ç–∞—Ä–µ–ª. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.", show_alert=True); return

    selected: set = set(data.get("selected_account_ids", set()))
    selected.symmetric_difference_update({acc_id})
    await state.update_data(selected_account_ids=selected)
    await _render_accounts_multiselect_remove(callback.message, state)
    await callback.answer()

@router.callback_query(F.data.regexp(r"^grantes_rm_apply_\d+$"), RemoveFromGroupDialog.selecting_accounts)
async def grantes_rm_apply(callback: types.CallbackQuery, state: FSMContext):
    group_id = int(callback.data.split("_")[3])
    data = await state.get_data()
    if data.get("target_group_id") != group_id:
        await callback.answer("–°–µ–∞–Ω—Å –≤—ã–±–æ—Ä–∞ —É—Å—Ç–∞—Ä–µ–ª. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.", show_alert=True); return

    selected: set = set(data.get("selected_account_ids", set()))
    if not selected:
        await callback.answer("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.", show_alert=True); return

    conn = get_connection(); cur = conn.cursor()
    try:
        cur.execute("UPDATE accounts SET group_id = NULL WHERE id = ANY(%s) AND group_id = %s", (list(selected), group_id))
        conn.commit()
    finally:
        cur.close(); conn.close()

    await state.clear()
    await callback.message.edit_text(
        f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}: {len(selected)}",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–µ", callback_data=f"grantes_edit_{group_id}")]]
        )
    )
    await callback.answer("–ì–æ—Ç–æ–≤–æ!")

@router.callback_query(F.data.regexp(r"^grantes_rm_cancel_\d+$"), RemoveFromGroupDialog.selecting_accounts)
async def grantes_rm_cancel(callback: types.CallbackQuery, state: FSMContext):
    group_id = int(callback.data.split("_")[3])
    await state.clear()
    await callback.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–µ", callback_data=f"grantes_edit_{group_id}")]]
    ))
    await callback.answer()

async def _render_accounts_multiselect_remove(message: types.Message, state: FSMContext):
    data = await state.get_data()
    group_id = data["target_group_id"]
    selected: set = set(data.get("selected_account_ids", set()))

    accounts = get_group_accounts(group_id)
    if not accounts:
        await message.edit_text(
            "–í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–µ", callback_data=f"grantes_edit_{group_id}")]]
            )
        )
        return

    rows = []
    for acc in accounts:
        acc_id = acc["id"]
        username = (acc.get("username") or "").strip()
        label = (acc.get("label") or "").strip()
        display = f"@{username}" if username and not username.startswith("@") else (username or label or f"acc#{acc_id}")
        mark = "‚úÖ" if acc_id in selected else "‚ûñ"
        rows.append([types.InlineKeyboardButton(
            text=f"{mark} {display} [id:{acc_id}]",
            callback_data=f"grantes_rm_toggle_{group_id}_{acc_id}"
        )])

    rows += [
        [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data=f"grantes_rm_apply_{group_id}")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"grantes_edit_{group_id}"),
         types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"grantes_rm_cancel_{group_id}")]
    ]

    await message.edit_text(
        f"–ì—Ä—É–ø–ø–∞ ID <b>{group_id}</b>\n–í—ã–±–µ—Ä–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è <b>—É–¥–∞–ª–µ–Ω–∏—è</b> –∏–∑ –≥—Ä—É–ø–ø—ã:",
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=rows)
    )

# –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω –ø–æ—Å–ª–µ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã")
@router.callback_query(F.data.in_({"grantes_edit", "accountgroups_edit"}))
async def grantes_edit_menu(callback: types.CallbackQuery, state: FSMContext):
    await _sticky_set_from_message(state, callback.message)  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º sticky, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –Ω–µ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    groups = get_account_groups()
    if not groups:
        await callback.answer("–ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True); return

    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=f"{g['emoji']} {g['name']}", callback_data=f"grantes_edit_{g['id']}")]
        for g in groups
    ] + [[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="grantes_menu")]])

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É:", reply_markup=kb)
    await callback.answer()



@router.callback_query(F.data.regexp(r"^grantes_group_rename_\d+$"))
async def grantes_group_rename_start(callback: types.CallbackQuery, state: FSMContext):
    group_id = int(callback.data.split("_")[3])  # grantes_group_rename_{group_id}
    await state.update_data(rename_group_id=group_id)
    await state.set_state(RenameGroupDialog.waiting_for_name)
    await callback.message.edit_text(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–º–æ–∂–Ω–æ —Å —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ, –∫–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏).",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–µ", callback_data=f"grantes_edit_{group_id}")]]
        )
    )
    await callback.answer()

@router.message(RenameGroupDialog.waiting_for_name)
async def grantes_group_rename_apply(message: types.Message, state: FSMContext):
    # —á–∏—Å—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.delete()
    except Exception:
        pass

    data = await state.get_data()
    group_id = int(data["rename_group_id"])
    group_input = (message.text or "").strip()

    emoji, name = ("", group_input)
    if " " in group_input:
        emoji, name = group_input.split(" ", 1)

    conn = get_connection(); cur = conn.cursor()
    try:
        cur.execute("UPDATE account_groups SET name = %s, emoji = %s WHERE id = %s", (name, emoji, group_id))
        conn.commit()
    finally:
        cur.close(); conn.close()

    await state.clear()

    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω –≥—Ä—É–ø–ø—ã —Ç–µ–º –∂–µ sticky-—Å–æ–æ–±—â–µ–Ω–∏–µ–º
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data=f"grantes_group_add_{group_id}")],
        [types.InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã",  callback_data=f"grantes_group_rm_{group_id}")],
        [types.InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å",    callback_data=f"grantes_group_rename_{group_id}")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º",  callback_data="grantes_edit")]
    ])
    await _sticky_edit(
        state,
        message.bot,
        text=f"‚úÖ –ì—Ä—É–ø–ø–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: <b>{emoji} {name}</b>\n\n–ì—Ä—É–ø–ø–∞ ID <b>{group_id}</b> ‚Äî –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb
    )



# --- –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø ---
@router.callback_query(F.data == "grantes_list")
async def accountgroups_list(callback: types.CallbackQuery):
    print("[DEBUG] –ü–æ–ª—É—á–µ–Ω callback_data:", callback.data)
    groups = get_account_groups_with_count()
    if not groups:
        await callback.message.edit_text("–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    text = "<b>–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:</b>\n"
    for g in groups:
        text += f"{g['emoji']} <b>{g['name']}</b> ‚Äî <b>{g['count']}</b> –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="grantes_menu")]]
    ))
    await callback.answer()
    
# --- –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã: —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø ---
@router.callback_query(F.data.in_({"grantes_delete", "accountgroups_delete"}))
async def grantes_delete_menu(callback: types.CallbackQuery):
    groups = get_account_groups()
    if not groups:
        await callback.answer("–ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
        return

    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text=f"{g['emoji']} {g['name']}",
            callback_data=f"grantes_delete_{g['id']}"
        )] for g in groups
    ] + [[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="grantes_menu")]])

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data.regexp(r"^grantes_delete_\d+$"))
async def grantes_delete_action(callback: types.CallbackQuery):
    group_id = int(callback.data.split("_")[2])

    conn = get_connection()
    cur = conn.cursor()
    try:
        # 1) –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        cur.execute("UPDATE accounts SET group_id = NULL WHERE group_id = %s", (group_id,))
        # 2) —É–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É —Ç–µ–º –∂–µ –∫—É—Ä—Å–æ—Ä–æ–º/–≤ —Ç–æ–π –∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        cur.execute("DELETE FROM account_groups WHERE id = %s", (group_id,))
        conn.commit()
    except Exception:
        conn.rollback()
        raise
    finally:
        cur.close()
        conn.close()

    await callback.message.edit_text(
        "‚úÖ –ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞.",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é –≥—Ä—É–ø–ø", callback_data="grantes_menu")]]
        )
    )
    await callback.answer("–ì–æ—Ç–æ–≤–æ!")
