from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from app.db import get_connection
from aiogram.exceptions import TelegramBadRequest

router = Router()

def get_task_card_keyboard(task_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_check_groups_task_{task_id}")],
        [InlineKeyboardButton(text="üìÑ –õ–û–ì", callback_data=f"download_check_groups_log_{task_id}")],
        [InlineKeyboardButton(text="üí° –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞–¥–∞—á—É", callback_data="menu_tasks")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tasktype_check_groups")]
    ])

@router.callback_query(F.data.startswith("show_check_groups_task_"))
async def show_check_groups_task(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[-1])
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT * FROM tasks WHERE id=%s", (task_id,))
    task = cur.fetchone()
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # -- tuple layout:
    # (id, account_id, type, payload, status, ..., created_at, ...)
    payload = task[3] if isinstance(task[3], dict) else None
    # –ï—Å–ª–∏ payload –≤–¥—Ä—É–≥ —Å—Ç—Ä–æ–∫–∞ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç):
    if payload is None and isinstance(task[3], str):
        import json
        payload = json.loads(task[3])
    min_members = payload.get('min_members', 0) if payload else 0
    total_groups = len(payload.get('links', [])) if payload else 0

    created_at = task[6]
    status = task[4]

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cur.execute("""
        SELECT
            COUNT(*) AS total_checked,
            SUM(CASE WHEN result = 'ok' THEN 1 ELSE 0 END) AS passed_filter,
            SUM(CASE WHEN result = 'small' THEN 1 ELSE 0 END) AS less_than_filter,
            SUM(CASE WHEN result = 'bad' THEN 1 ELSE 0 END) AS errors
        FROM check_groups_log
        WHERE task_id = %s;
    """, (task_id,))
    stats = cur.fetchone()
    X, Z, B, T = stats[0] or 0, stats[1] or 0, stats[2] or 0, stats[3] or 0

    cur.execute("SELECT DISTINCT account_id, account_username FROM check_groups_log WHERE task_id=%s", (task_id,))
    accounts_list = cur.fetchall()

    cur.close()
    conn.close()
    
    
    # --- –ö—Ä–∞—Å–∏–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    status_map = {
        "pending": "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ",
        "done": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
        "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
        "error": "‚ùå –û—à–∏–±–∫–∞",
        # –¥–æ–±–∞–≤—å –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }
    status_nice = status_map.get(status, status)

    # --- –ê–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø ---
    if status == "pending" and X == total_groups and total_groups > 0:
        status_nice = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞"

    msg = f"""
<b>–ó–∞–¥–∞—á–∞ #{task_id} ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø</b>
–°—Ç–∞—Ä—Ç –∑–∞–¥–∞—á–∏: <code>{created_at}</code>
–°—Ç–∞—Ç—É—Å: <b>{status_nice}</b>
–ê–∫–∫–∞—É–Ω—Ç–æ–≤: <b>{len(accounts_list)}</b>

–í—Å–µ–≥–æ –≥—Ä—É–ø–ø –≤ –∑–∞–¥–∞—á–µ: <b>{total_groups}</b>
–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: <b>{X}</b>

üë•–°–∫–æ–ª—å–∫–æ –º–∏–Ω–∏–º—É–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: <b>{min_members}</b>
üíé–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –≥—Ä—É–ø–ø—ã: <b>{Z}</b>
üóë–ú–µ–Ω—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ: <b>{B}</b>
‚õîÔ∏è–ì—Ä—É–ø–ø—ã —Å –æ—à–∏–±–∫–∞–º–∏: <b>{T}</b>
    """.strip()

    await callback.message.edit_text(msg, parse_mode="HTML", reply_markup=get_task_card_keyboard(task_id))
    await callback.answer()



@router.callback_query(F.data.startswith("refresh_check_groups_task_"))
async def refresh_check_groups_task(callback: types.CallbackQuery):
    try:
        await show_check_groups_task(callback)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer("–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã. –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç.", show_alert=False)
        else:
            raise



@router.callback_query(F.data.startswith("download_check_groups_log_"))
async def download_check_groups_log(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[-1])
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT payload FROM tasks WHERE id=%s", (task_id,))
    task = cur.fetchone()
    payload = task[0]
    if isinstance(payload, str):
        import json
        payload = json.loads(payload)
    min_members = payload.get('min_members', 0)

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    cur.execute("""
        SELECT
            COUNT(*) AS total_checked,
            SUM(CASE WHEN result = 'ok' THEN 1 ELSE 0 END) AS passed_filter,
            SUM(CASE WHEN result = 'small' THEN 1 ELSE 0 END) AS less_than_filter,
            SUM(CASE WHEN result = 'bad' THEN 1 ELSE 0 END) AS errors
        FROM check_groups_log
        WHERE task_id = %s;
    """, (task_id,))
    stats = cur.fetchone()
    X, Z, B, T = stats[0] or 0, stats[1] or 0, stats[2] or 0, stats[3] or 0

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—Å–Ω–∞—á–∞–ª–∞ –æ–±—â–∏–π –±–ª–æ–∫)
    passed_links = []
    small_links = []
    error_links = []

    cur.execute("""
        SELECT checked_group, result
        FROM check_groups_log
        WHERE task_id = %s
        ORDER BY checked_at;
    """, (task_id,))
    for checked_group, result in cur.fetchall():
        if result == "ok":
            passed_links.append(checked_group)
        elif result == "small":
            small_links.append(checked_group)
        elif result == "bad":
            error_links.append(checked_group)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–≥: —Å–Ω–∞—á–∞–ª–∞ —Ç—Ä–∏ –±–ª–æ–∫–∞, –ø–æ—Ç–æ–º –∞–∫–∫–∞—É–Ω—Ç—ã
    log_lines = [
        f"üóÇ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≥—Ä—É–ø–ø: {X}",
        f"üîç –§–∏–ª—å—Ç—Ä: {min_members}",
        f"‚úÖ –ü–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ —Ñ–∏–ª—å—Ç—Ä: {Z}",
    ]
    log_lines += passed_links if passed_links else ["‚Äî"]

    log_lines += [
        "",
        f"ü™ß –ú–µ–Ω—å—à–µ —Ñ–∏–ª—å—Ç—Ä–∞: {B}",
    ]
    log_lines += small_links if small_links else ["‚Äî"]

    log_lines += [
        "",
        f"‚ùå –ì—Ä—É–ø–ø—ã —Å –æ—à–∏–±–∫–∞–º–∏: {T}",
    ]
    log_lines += error_links if error_links else ["‚Äî"]
    log_lines.append("")

    # –¢–µ–ø–µ—Ä—å –±–ª–æ–∫ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º (–∫–∞–∫ –±—ã–ª–æ)
    cur.execute("""
        SELECT account_id, account_username
        FROM check_groups_log
        WHERE task_id = %s
        GROUP BY account_id, account_username
        ORDER BY account_id;
    """, (task_id,))
    accounts = cur.fetchall()

    for acc_id, acc_username in accounts:
        cur.execute("""
            SELECT checked_group, result, members, error_message
            FROM check_groups_log
            WHERE task_id = %s AND account_id = %s
            ORDER BY checked_at;
        """, (task_id, acc_id))
        groups = cur.fetchall()

        log_lines.append(f"üë§–ê–∫–∫–∞—É–Ω—Ç {acc_id} {acc_username}")
        log_lines.append("üìù–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –≥—Ä—É–ø–ø—ã:")
        for checked_group, result, members, error in groups:
            if result == "ok":
                line = f"{checked_group} ‚Äî {members}"
            elif result == "small":
                line = f"{checked_group} ‚Äî {members} (–º–µ–Ω—å—à–µ —Ñ–∏–ª—å—Ç—Ä–∞)"
            elif result == "bad":
                line = f"{checked_group} ‚Äî –æ—à–∏–±–∫–∞: {error or ''}"
            else:
                line = f"{checked_group} ‚Äî {result or ''} {error or ''}"
            log_lines.append(line)
        log_lines.append(f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≥—Ä—É–ø–ø: {len(groups)}")
        log_lines.append("_" * 40)

    cur.close()
    conn.close()

    file_text = "\n".join(log_lines)
    await callback.message.answer_document(
        BufferedInputFile(file_text.encode("utf-8"), filename=f"check_groups_log_{task_id}.txt"),
        caption="üóÇ –õ–æ–≥ –∑–∞–¥–∞—á–∏",
        reply_markup=ok_to_delete_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "tasktype_check_groups")
async def show_check_groups_tasks_list(callback: types.CallbackQuery):
    conn = get_connection()
    cur = conn.cursor()
    cur.execute(
        "SELECT id, created_at FROM tasks WHERE type='check_groups' ORDER BY created_at DESC LIMIT 10"
    )
    rows = cur.fetchall()
    cur.close()
    conn.close()

    keyboard = []
    for task_id, created_at in rows:
        keyboard.append([
            types.InlineKeyboardButton(
                text=f"–ó–∞–¥–∞—á–∞ #{task_id} –æ—Ç {created_at:%d.%m %H:%M}",
                callback_data=f"show_check_groups_task_{task_id}"
            )
        ])
    keyboard.append([
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")
    ])
    markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
    await callback.answer()

def ok_to_delete_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ OK (–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª)", callback_data="groupcheck_delete_file_msg")]
        ]
    )

@router.callback_query(F.data == "groupcheck_delete_file_msg")
async def groupcheck_delete_file_msg(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except Exception:
        pass
    await callback.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!", show_alert=False)
