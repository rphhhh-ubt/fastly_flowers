from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def create_like_task_card(task_data: dict) -> tuple[str, InlineKeyboardMarkup]:
    task_id = task_data.get("id", 0)
    status = task_data.get("status", "unknown")

    # üö® –ö–õ–Æ–ß–ï–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–¢–ê–¢–£–° "running" ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π!
    if status == "active":
        status_emoji = "‚è≥"
        status_text = "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
        last_error = None  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –ø–æ–∫–∞ –∏–¥—ë—Ç —Ä–∞–±–æ—Ç–∞
    else:
        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï "running" ‚Äî —Å–º–æ—Ç—Ä–∏–º –Ω–∞ error/completed
        last_error = task_data.get("last_error", None)
        if status == "error":
            status_emoji = "üî¥"
            status_text = "–û—à–∏–±–∫–∞"
        elif status == "completed":
            status_emoji = "üü¢"
            status_text = "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
        else:
            status_emoji = "üü°"
            status_text = status.capitalize()
            last_error = None  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∫–∞–∫ –æ—à–∏–±–∫–∏

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏ —Å—Ç–∞—Ç—É—Å –Ω–µ "running")
    error_hint = f"\n\n<code>{last_error}</code>" if last_error else ""

    total_accounts = task_data.get("total_accounts", len(task_data.get("selected_accounts", [])))
    total_posts = task_data.get("total_posts", 0)
    likes_done = task_data.get("likes_done", 0)
    skipped = task_data.get("skipped", 0)
    errors = task_data.get("errors", 0)
    try:
        joins_total = int(task_data.get("joins_total", 0) or 0)
    except Exception:
        joins_total = 0
           
    channels = task_data.get("channels", [])
    channels_count = len(channels) if isinstance(channels, list) else 0
    
    # ‚öôÔ∏è –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å (—á–∏—Ç–∞–µ—Ç –∏–∑ task_data, –∞ –Ω–µ –∏–∑ payload!)
    
    parallel_cfg = (task_data.get("parallel") or {})
    concurrency = int(
        parallel_cfg.get("max_clients")
        or task_data.get("total_accounts")
        or len(task_data.get("selected_accounts", []))
        or 1
    )
    stagger = float(parallel_cfg.get("start_stagger_sec", 0.0) or 0.0)

    # ‚è≥ —Å—Ç—Ä–æ–∫—É —Å–æ —Å—Ç–∞–≥–≥–µ—Ä–æ–º –≥–æ—Ç–æ–≤–∏–º –û–¢–î–ï–õ–¨–ù–û (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ '\n' –≤–Ω—É—Ç—Ä–∏ {...} —É f-—Å—Ç—Ä–æ–∫–∏)
    stagger_line = f"‚è≥ –°—Ç–∞–≥–≥–µ—Ä —Å—Ç–∞—Ä—Ç–∞: {stagger}—Å\n" if stagger > 0 else ""


    card_text = (
        f"‚ù§Ô∏è <b>–ó–∞–¥–∞—á–∞: –õ–∞–π–∫–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</b>\n"
        f"<b>ID:</b> <code>{task_id}</code>\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_text}{error_hint}\n\n"
        f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}\n"
        f"‚öôÔ∏è –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {concurrency}\n"
        f"{stagger_line}"
        f"üì° –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {channels_count}\n\n"
        f"üìù –ü–æ—Å—Ç–æ–≤ –≤—Å–µ–≥–æ: {total_posts}\n"
        f"üëç –õ–∞–π–∫–æ–≤ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {likes_done}\n"
        f"üôã –í—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—ã: {joins_total}\n\n"
        f"‚è≠Ô∏è –°–∫–∏–ø–Ω—É—Ç–æ: {skipped}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {errors}"
    )

    keyboard_buttons = [
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_like_task_{task_id}")],
        [InlineKeyboardButton(text="üìÑ –õ–æ–≥ –∑–∞–¥–∞—á–∏", callback_data=f"show_like_log_{task_id}")],
        [InlineKeyboardButton(text="üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã —Å –ª–∞–π–∫–∞–º–∏", callback_data=f"like_export_{task_id}")],
        [InlineKeyboardButton(text="üîÑ –°–æ–∑–¥–∞—Ç—å —Ç–∞–∫—É—é –∂–µ –∑–∞–¥–∞—á—É", callback_data="start_like_comments_task")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_like_task_{task_id}")],
        [InlineKeyboardButton(text="‚èπ –°—Ç–æ–ø –∫–∞—Ä—É—Å–µ–ª–∏", callback_data=f"like_loop_stop_{task_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_like_tasks")]
    ]

    # üí• –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å" –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π
    if status == "error":
        keyboard_buttons.insert(0, [
            InlineKeyboardButton(
                text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É",
                callback_data=f"retry_task_{task_id}"
            )
        ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    return card_text, keyboard