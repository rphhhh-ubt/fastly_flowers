# handlers/comment_check_task_view.py
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.db import get_task_by_id, get_comment_check_logs
import json

def _stats(task_id: int):
    rows = get_comment_check_logs(task_id)
    yes = sum(1 for r in rows if r[2] is True)
    no  = sum(1 for r in rows if r[2] is False)
    unk = sum(1 for r in rows if r[2] is None)
    return yes, no, unk

def _kb(task_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"cchk_refresh:{task_id}")],
        [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç (—Å –æ–±—Å—É–∂–¥–µ–Ω–∏—è–º–∏)", callback_data=f"cchk_export_yes:{task_id}")],
        [InlineKeyboardButton(text="üìú –ü–æ–ª–Ω—ã–π –ª–æ–≥", callback_data=f"cchk_export_all:{task_id}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"confirm_delete_task_{task_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_task_execution")],
    ])

def create_cchk_task_card(task) -> tuple[str, InlineKeyboardMarkup]:
    if isinstance(task, int):
        t = get_task_by_id(task) or {}
    else:
        t = task or {}
    task_id = t.get("id")

    payload = t.get("payload") or {}
    if isinstance(payload, str):
        try: payload = json.loads(payload)
        except: payload = {}

    total   = int(payload.get("total_channels") or payload.get("channels_count") or 0)
    checked = int(payload.get("checked") or 0)
    status  = (t.get("status") or "-").lower()

    yes, no, unk = _stats(task_id)
    status_emoji = {"completed": "‚úÖ", "running": "üü°", "in_progress": "üü°", "error": "‚ùå"}.get(status, "‚è≥")
    status_txt   = {"completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–∞", "running": "–í —Ä–∞–±–æ—Ç–µ", "in_progress": "–í —Ä–∞–±–æ—Ç–µ", "error": "–û—à–∏–±–∫–∞"}.get(status, status.capitalize())

    text = "\n".join([
        "üß™ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π</b>",
        f"–ó–∞–¥–∞—á–∞ #{task_id}", "",
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: <b>{checked}/{total}</b>",
        f"–ï—Å—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏—è: <b>{yes}</b>",
        f"–ù–µ—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–π: <b>{no}</b>",
        f"–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ/–æ—à–∏–±–∫–∏: <b>{unk}</b>", "",
        f"–°—Ç–∞—Ç—É—Å: {status_emoji} <b>{status_txt}</b>",
    ])
    return text, _kb(task_id)
