# handlers/start.py

from aiogram import Router, types, F
from aiogram.filters import Command
from keyboards.main_menu import start_menu_keyboard
from utils.check_access import admin_only
from keyboards.back_menu import back_to_main_menu_keyboard
from keyboards.accounts_menu import accounts_menu_keyboard
from keyboards.proxy_menu import proxy_menu_keyboard
from keyboards.tasks_view_keyboards import tasks_type_keyboard
from keyboards.create_task_keyboards import create_task_type_keyboard
from handlers.delete_old_channels import delete_old_channels_handler
from handlers.channel_creation import create_channels, ChannelCreation
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram import Bot






router = Router()


@router.message(Command("start"))
@admin_only
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=start_menu_keyboard()
    )



# –ê–∫–∫–∞—É–Ω—Ç—ã
@router.callback_query(F.data == "menu_accounts")
@admin_only
async def open_accounts(callback: types.CallbackQuery):
    
    await callback.message.edit_text(
        "üë§ <b>–†–∞–∑–¥–µ–ª –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è",
        reply_markup=accounts_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


# –ü—Ä–æ–∫—Å–∏
@router.callback_query(F.data == "menu_proxies")
@admin_only
async def open_proxies(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üåê –†–∞–∑–¥–µ–ª –ø—Ä–æ–∫—Å–∏:\n\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏.",
        reply_markup=proxy_menu_keyboard()
    )
    await callback.answer()

# –ó–∞–¥–∞—á–∏
@router.callback_query(F.data == "menu_tasks")
@admin_only
async def open_create_task(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:",
        reply_markup=create_task_type_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.callback_query(F.data == "menu_stats")
@admin_only
async def open_stats(callback: types.CallbackQuery):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    def stats_menu_keyboard():
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîë –ö–ª—é—á–∏ API", callback_data="show_api_keys")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")],
        ])
    await callback.message.edit_text(
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=stats_menu_keyboard()
    )


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
@router.callback_query(F.data == "menu_settings")
@admin_only
async def open_settings(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã:\n\n–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã.",
        reply_markup=back_to_main_menu_keyboard()
    )
    await callback.answer()

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞
@router.callback_query(F.data == "menu_support")
@admin_only
async def open_support(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        reply_markup=back_to_main_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "menu_main")
@admin_only
async def back_to_main(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    await callback.message.edit_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=start_menu_keyboard()
    )
    

@router.callback_query(F.data == "menu_accounts")
@admin_only
async def open_accounts(callback: types.CallbackQuery):
    print(f"Callback data: {callback.data}")
    await callback.message.answer("–¢—ã –Ω–∞–∂–∞–ª –ê–∫–∫–∞—É–Ω—Ç—ã!")
    await callback.answer()
    await callback.message.edit_text(
        "üë§ <b>–†–∞–∑–¥–µ–ª –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è",
        reply_markup=accounts_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "accounts_list")
@admin_only
async def show_accounts_list(callback: types.CallbackQuery):
    from app.db import get_all_accounts  # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    from keyboards.accounts_list import accounts_list_keyboard

    accounts = get_all_accounts()

    if not accounts:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.",
            reply_markup=accounts_menu_keyboard()
        )
        await callback.answer()
        return

    text = "üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n\n"
    text += f"–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}\n\n"
    text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."

    await callback.message.edit_text(
        text,
        reply_markup=accounts_list_keyboard(accounts)
    )
    await callback.answer()

@router.callback_query(F.data == "menu_task_execution")
@admin_only
async def open_task_execution(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìã <b>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=tasks_type_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


# –ó–∞–ø—É—Å–∫ FSM –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
@router.callback_query(F.data == "task_create_personal_channel")
@admin_only
async def handle_task_create_personal_channel(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.set_state(ChannelCreation.waiting_for_titles)
    await callback.message.answer("üì• –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ (—Ç–µ–∫—Å—Ç –∏–ª–∏ .txt)")
