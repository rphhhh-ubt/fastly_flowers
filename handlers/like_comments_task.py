from aiogram import Router, types, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from app.db import (
    insert_like_log,
    get_all_accounts,
    get_account_by_id,
    create_like_comments_task,
    update_task_payload,
    get_ok_channels_for_task,
)
import asyncio, json, time, random, os, re
from utils.like_worker import start_carousel_worker, stop_carousel_worker
from utils.comment_reactor import run_like_job  # –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
from .tasks_view import render_like_task
from typing import List, Dict, Any
from app.db import get_account_groups_with_count






router = Router()

class LikeFSM(StatesGroup):
    selecting_accounts = State()
    waiting_for_channels = State()
    choosing_reactions_mode = State()
    waiting_for_reactions_input = State()
    waiting_for_mode = State()
    waiting_for_settings = State()
    waiting_for_parallel = State()
    waiting_for_interval = State()
    processing = State()

MAX_TEXT_LINES = 200
TEMP_DIR = os.getenv("TMPDIR", "/tmp")

# üëá –Ω–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤ —Å—Ç–∏–ª–µ —Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏


def like_accounts_keyboard(
    accounts: List[Dict[str, Any]],
    selected_ids: set[int] | list[int] | None = None,
    page: int = 0,
    per_page: int = 10,
    groups: List[Dict[str, Any]] | None = None,   # ‚Üê –ù–û–í–û–ï
) -> InlineKeyboardMarkup:
    if selected_ids is None:
        selected_ids = set()
    else:
        selected_ids = set(selected_ids)

    start = page * per_page
    chunk = accounts[start:start + per_page]

    rows = []
    for acc in chunk:
        acc_id = acc["id"]
        uname = acc.get("username") or "-"
        phone = acc.get("phone") or "-"
        mark = "‚úÖ" if acc_id in selected_ids else "‚èπÔ∏è"
        txt = f"{mark} {acc_id} ‚ñ∏ @{uname} ‚ñ∏ {phone}"
        rows.append([InlineKeyboardButton(text=txt, callback_data=f"like_toggle:{acc_id}")])

    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"like_page:{page-1}"))
    if start + per_page < len(accounts):
        nav.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"like_page:{page+1}"))
    if nav:
        rows.append(nav)

    # —á–∏–ø—Å—ã –≥—Ä—É–ø–ø (–µ—Å–ª–∏ –µ—Å—Ç—å)
    chips: list[InlineKeyboardButton] = []
    if groups:
        for g in groups:
            cnt = int(g.get("count") or 0)
            if cnt < 1:
                continue
            name = f"{g.get('emoji', '')} {g.get('name', '')}".strip()
            label = f"{name} ({cnt})"
            chips.append(InlineKeyboardButton(text=label, callback_data=f"like_group:{g['id']}"))

    for i in range(0, len(chips), 3):
        rows.append(chips[i:i+3])

    # –º–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    rows.append([
        InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="like_select_all"),
        InlineKeyboardButton(text="–°–Ω—è—Ç—å –≤—Å–µ",   callback_data="like_clear_all"),
    ])
    rows.append([
        InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚ûú", callback_data="like_proceed"),
        InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",   callback_data="menu_main"),
    ])
    return InlineKeyboardMarkup(inline_keyboard=rows)



def like_mode_keyboard():
    kb = [
        [
            InlineKeyboardButton(text="‚ñ∂Ô∏è –†–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–æ–Ω", callback_data="like_mode_once"),
            InlineKeyboardButton(text="üîÅ –ö–∞—Ä—É—Å–µ–ª—å", callback_data="like_mode_loop"),
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def reactions_mode_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ú® –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏", callback_data="rx_use_default")],
        [InlineKeyboardButton(text="üéØ –°–≤–æ–π —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏", callback_data="rx_custom")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]
    ])


# === helpers for sticky UI ===
async def _safe_delete(msg: types.Message):
    try:
        await msg.delete()
    except Exception:
        pass

async def _safe_edit(bot_msg: types.Message, text: str, kb: InlineKeyboardMarkup | None = None):
    try:
        await bot_msg.edit_text(text, reply_markup=kb, parse_mode="HTML")
    except Exception as e:
        s = str(e).lower()
        if "message is not modified" in s:
            return
        # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ) ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä
        if "message to edit not found" in s or "message can't be edited" in s:
            return
        raise

async def _ensure_ui_message(msg_or_cb: types.Message, state: FSMContext) -> types.Message:
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –æ–¥–Ω–æ "–ª–∏–ø–∫–æ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Message, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
    """
    data = await state.get_data()
    ui_mid = data.get("ui_mid")
    ui_chat = data.get("ui_chat")
    if ui_mid and ui_chat == msg_or_cb.chat.id:
        try:
            # –ø–æ–ª—É—á–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ id —á–µ—Ä–µ–∑ –±–æ—Ç
            bot_msg = await msg_or_cb.bot.edit_message_text(
                chat_id=ui_chat, message_id=ui_mid, text=".", reply_markup=None
            )
            # —Å—Ä–∞–∑—É –≤–µ—Ä–Ω—ë–º –æ–±—ä–µ–∫—Ç Message (aiogram –≤–µ—Ä–Ω—ë—Ç bool/Message –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç API),
            # –ø–æ—ç—Ç–æ–º—É –¥–æ—Å—Ç–∞–Ω–µ–º –∫–∞–∫ msg_or_cb.bot.get‚Ä¶
        except Exception:
            bot_msg = None
        if bot_msg is None:
            # –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–µ
            new_msg = await msg_or_cb.answer("‚ãØ")
            await state.update_data(ui_mid=new_msg.message_id, ui_chat=new_msg.chat.id)
            return new_msg
        else:
            # –º—ã —É–∂–µ —á—Ç–æ-—Ç–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ ".", —ç—Ç–æ –Ω–µ –æ—á–µ–Ω—å ‚Äî –ø–æ—á–∏–Ω–∏–º –¥–∞–ª–µ–µ —Ä–µ–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            return types.Message(model=bot_msg.model_copy()) if hasattr(bot_msg, "model_copy") else msg_or_cb  # fallback
    # –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç ui-—Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —Å–æ–∑–¥–∞–¥–∏–º
    new_msg = await msg_or_cb.answer("‚ãØ")
    await state.update_data(ui_mid=new_msg.message_id, ui_chat=new_msg.chat.id)
    return new_msg
    


async def ui_get_ids(state) -> tuple[int | None, int | None]:
    d = await state.get_data()
    return d.get("ui_chat_id"), d.get("ui_message_id")

async def ui_set_ids(state, chat_id: int, message_id: int):
    await state.update_data(ui_chat_id=chat_id, ui_message_id=message_id)

async def ui_ensure(cb_or_msg, state) -> tuple[int, int]:
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è-¬´–∫–∞—Ä—Ç—ã¬ª.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (chat_id, message_id) —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    chat_id, message_id = await ui_get_ids(state)
    if chat_id and message_id:
        return chat_id, message_id
    # –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ ‚Äî —Å–æ–∑–¥–∞–¥–∏–º
    if isinstance(cb_or_msg, types.CallbackQuery):
        sent = await cb_or_msg.message.answer("‚ãØ")
        await ui_set_ids(state, sent.chat.id, sent.message_id)
        return sent.chat.id, sent.message_id
    else:
        sent = await cb_or_msg.answer("‚ãØ")
        await ui_set_ids(state, sent.chat.id, sent.message_id)
        return sent.chat.id, sent.message_id

async def ui_edit(bot, chat_id: int, message_id: int, text: str, kb: InlineKeyboardMarkup | None = None):
    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    except Exception as e:
        s = str(e).lower()
        if "message is not modified" in s:
            return
        # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏ –æ–±–Ω–æ–≤–∏—Ç—å ids (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        raise

async def delete_user_message(msg: types.Message):
    try:
        await msg.delete()
    except Exception:
        pass

def _norm_channel(ch: str) -> str:
    ch = ch.strip()
    if not ch:
        return ""
    ch = ch.replace("https://t.me/", "").replace("http://t.me/", "")
    if ch.startswith("@"):
        ch = ch[1:]
    return ch

async def _read_txt_lines(path: str) -> list[str]:
    """
    –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event-loop.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ—á–∏—â–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (–±–µ–∑ –ø—É—Å—Ç—ã—Ö).
    """
    def _read():
        out = []
        with open(path, "r", encoding="utf-8", errors="ignore") as f:
            for line in f:
                s = line.strip()
                if s:
                    out.append(s)
        return out
    return await asyncio.to_thread(_read)

@router.callback_query(F.data == "start_like_comments_task")
async def start_like_comments_task(cb: types.CallbackQuery, state: FSMContext):
    accounts = get_all_accounts()
    groups = get_account_groups_with_count()  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
    await state.set_state(LikeFSM.selecting_accounts)

    # –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    await ui_set_ids(state, cb.message.chat.id, cb.message.message_id)

    await state.update_data(accounts=accounts, selected_accounts=[], page=0)

    chat_id, message_id = await ui_get_ids(state)
    await ui_edit(
        cb.message.bot,
        chat_id, message_id,
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ª–∞–π–∫–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:",
        like_accounts_keyboard(accounts, set(), page=0, groups=groups)  # ‚Üê groups
    )
    await cb.answer()






@router.callback_query(F.data.startswith("like_toggle:"), LikeFSM.selecting_accounts)
async def like_toggle(cb: types.CallbackQuery, state: FSMContext):
    acc_id = int(cb.data.split(":")[1])
    data = await state.get_data()
    selected = set(data.get("selected_accounts", []))
    accounts = data.get("accounts", [])
    page = int(data.get("page", 0))

    if acc_id in selected:
        selected.remove(acc_id)
    else:
        selected.add(acc_id)
    await state.update_data(selected_accounts=list(selected))

    chat_id, message_id = await ui_get_ids(state)
    await ui_edit(
        cb.message.bot, chat_id, message_id,
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã:",
        like_accounts_keyboard(accounts, selected, page=page, groups=get_account_groups_with_count())
    )
    await cb.answer()




@router.callback_query(F.data.startswith("like_page:"), LikeFSM.selecting_accounts)
async def like_page(cb: types.CallbackQuery, state: FSMContext):
    page = int(cb.data.split(":")[1])
    data = await state.get_data()
    accounts = data.get("accounts", [])
    selected = set(data.get("selected_accounts", []))
    await state.update_data(page=page)

    chat_id, message_id = await ui_get_ids(state)
    await ui_edit(
        cb.message.bot, chat_id, message_id,
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã:",
        like_accounts_keyboard(accounts, selected, page=page, groups=get_account_groups_with_count())
    )
    await cb.answer()


@router.callback_query(F.data == "like_select_all", LikeFSM.selecting_accounts)
async def like_select_all(cb: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    accounts = data.get("accounts", [])
    all_ids = [a["id"] for a in accounts]
    page = int(data.get("page", 0))
    await state.update_data(selected_accounts=all_ids)

    chat_id, message_id = await ui_get_ids(state)
    await ui_edit(
        cb.message.bot, chat_id, message_id,
        "üë§ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ ¬´–î–∞–ª–µ–µ¬ª.",
        like_accounts_keyboard(accounts, set(all_ids), page=page, groups=get_account_groups_with_count())
    )
    await cb.answer("‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ")


@router.callback_query(F.data == "like_clear_all", LikeFSM.selecting_accounts)
async def like_clear_all(cb: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    accounts = data.get("accounts", [])
    page = int(data.get("page", 0))
    await state.update_data(selected_accounts=[])

    chat_id, message_id = await ui_get_ids(state)
    await ui_edit(
        cb.message.bot, chat_id, message_id,
        "üë§ –í—ã–±–æ—Ä –æ—á–∏—â–µ–Ω. –û—Ç–º–µ—Ç—å—Ç–µ –Ω—É–∂–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:",
        like_accounts_keyboard(accounts, set(), page=page, groups=get_account_groups_with_count())
    )
    await cb.answer("‚ôªÔ∏è –°–±—Ä–æ—à–µ–Ω –≤—ã–±–æ—Ä")

@router.callback_query(F.data.startswith("like_group:"), LikeFSM.selecting_accounts)
async def like_group_pick(cb: types.CallbackQuery, state: FSMContext):
    group_id = int(cb.data.split(":")[1])
    data = await state.get_data()
    accounts = data.get("accounts", [])
    page = int(data.get("page", 0))

    # –≤—Å–µ id –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    ids_in_group = {a["id"] for a in accounts if a.get("group_id") == group_id}
    if not ids_in_group:
        await cb.answer("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        return

    await state.update_data(selected_accounts=list(ids_in_group))

    # –º–∏–∫—Ä–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –±—ã–ª–æ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    start = page * 10
    page_ids = {a["id"] for a in accounts[start:start+10]}
    changed_on_page = bool(ids_in_group & page_ids)

    chat_id, message_id = await ui_get_ids(state)
    kb = like_accounts_keyboard(accounts, ids_in_group, page=page, groups=get_account_groups_with_count())
    if changed_on_page:
        await ui_edit(cb.message.bot, chat_id, message_id, "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã:", kb)

    await cb.answer(f"–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ (–∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(ids_in_group)})")



@router.callback_query(F.data == "like_proceed", LikeFSM.selecting_accounts)
async def like_proceed(cb: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data.get("selected_accounts"):
        await cb.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç!", show_alert=True)
        return

    await state.set_state(LikeFSM.waiting_for_channels)
    chat_id, message_id = await ui_get_ids(state)
    await ui_edit(
        cb.message.bot, chat_id, message_id,
        "üìã –ü—Ä–∏—à–ª–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (@username –∏–ª–∏ t.me/...), –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ .txt —Ñ–∞–π–ª–æ–º."
    )
    await cb.answer()




@router.message(LikeFSM.waiting_for_channels)
async def like_receive_channels(msg: types.Message, state: FSMContext):
    channels: list[str] = []

    # 1) –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç
    if msg.text and not msg.document:
        lines = [s for s in (msg.text or "").splitlines() if s.strip()]
        # Telegram —Ä–µ–∂–µ—Ç –±–æ–ª—å—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è; –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫ –º–Ω–æ–≥–æ ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º .txt
        if len(lines) > MAX_TEXT_LINES:
            await delete_user_message(msg)
            chat_id, message_id = await ui_get_ids(state)
            await ui_edit(
                msg.bot, chat_id, message_id,
                f"‚ö†Ô∏è –í —Ç–µ–∫—Å—Ç–µ {len(lines)} —Å—Ç—Ä–æ–∫ (> {MAX_TEXT_LINES}). "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –æ–¥–Ω–∏–º .txt —Ñ–∞–π–ª–æ–º (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ)."
            )
            return
        channels = lines

    # 2) –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç (.txt)
    elif msg.document:
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ —á–∏—Ç–∞–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
        ts = int(time.time())
        tmp_path = os.path.join(TEMP_DIR, f"channels_{msg.from_user.id}_{ts}.txt")
        try:
            # aiogram v3: —Å–∫–∞—á–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –±–æ—Ç
            await msg.bot.download(msg.document, destination=tmp_path)
        except Exception as e:
            await delete_user_message(msg)
            chat_id, message_id = await ui_get_ids(state)
            await ui_edit(msg.bot, chat_id, message_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: {e}")
            return

        try:
            channels = await _read_txt_lines(tmp_path)
        except Exception as e:
            await delete_user_message(msg)
            chat_id, message_id = await ui_get_ids(state)
            await ui_edit(msg.bot, chat_id, message_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}")
            return
        finally:
            try:
                os.remove(tmp_path)
            except Exception:
                pass

    else:
        await delete_user_message(msg)
        chat_id, message_id = await ui_get_ids(state)
        await ui_edit(
            msg.bot, chat_id, message_id,
            "‚ö†Ô∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Ç–µ–∫—Å—Ç–æ–º (–¥–æ 200 —Å—Ç—Ä–æ–∫) –∏–ª–∏ –æ–¥–Ω–∏–º .txt —Ñ–∞–π–ª–æ–º."
        )
        return

    if not channels:
        await delete_user_message(msg)
        chat_id, message_id = await ui_get_ids(state)
        await ui_edit(msg.bot, chat_id, message_id, "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –µ—â—ë —Ä–∞–∑.")
        return

    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º, —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏
    channels = [_norm_channel(c) for c in channels]
    channels = [c for c in channels if c]             # —É–±—Ä–∞—Ç—å –ø—É—Å—Ç—ã–µ –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    #channels = list(dict.fromkeys(channels))          # –±—ã—Å—Ç—Ä—ã–π uniq —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞
    random.shuffle(channels)
    await msg.answer(f"üîç –û—Ç–ª–∞–¥–∫–∞: –ø–æ–ª—É—á–µ–Ω–æ {len(channels)} —Å—Ç—Ä–æ–∫. –ü—Ä–∏–º–µ—Ä—ã: {channels[:3]}")

    await state.update_data(channels=channels)
    await state.set_state(LikeFSM.choosing_reactions_mode)

    await delete_user_message(msg)

    chat_id, message_id = await ui_get_ids(state)
    await ui_edit(
        msg.bot, chat_id, message_id,
        "‚ù§Ô∏è –í—ã–±–µ—Ä–∏ –Ω–∞–±–æ—Ä —Ä–µ–∞–∫—Ü–∏–π:\n\n"
        "‚Ä¢ <b>–î–µ—Ñ–æ–ª—Ç–Ω—ã–µ</b> ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä (–ª–∞–π–∫/–æ–≥–æ–Ω—å/—Å–µ—Ä–¥—Ü–µ –∏ —Ç.–ø.).\n"
        "‚Ä¢ <b>–°–≤–æ–π —Å–ø–∏—Å–æ–∫</b> ‚Äî –æ—Ç–ø—Ä–∞–≤—å —ç–º–æ–¥–∑–∏ –≤—Ä—É—á–Ω—É—é.",
        reactions_mode_keyboard()
    )

@router.callback_query(F.data == "rx_use_default", LikeFSM.choosing_reactions_mode)
async def rx_use_default(cb: types.CallbackQuery, state: FSMContext):
    # –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–µ–º –≤ state: run_for_account —Å–∞–º –≤–æ–∑—å–º—ë—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—É–ª
    await state.update_data(reactions=None)
    await state.set_state(LikeFSM.waiting_for_mode)
    chat_id, message_id = await ui_get_ids(state)
    await ui_edit(
        cb.message.bot, chat_id, message_id,
        "üïπ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ª–∞–π–∫–∏–Ω–≥–∞:\n\n"
        "‚Ä¢ <b>–†–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–æ–Ω</b>\n"
        "‚Ä¢ <b>–ö–∞—Ä—É—Å–µ–ª—å</b>",
        like_mode_keyboard()
    )
    await cb.answer()

@router.callback_query(F.data == "rx_custom", LikeFSM.choosing_reactions_mode)
async def rx_custom(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(LikeFSM.waiting_for_reactions_input)
    chat_id, message_id = await ui_get_ids(state)
    await ui_edit(
        cb.message.bot, chat_id, message_id,
        "–í–≤–µ–¥–∏ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏.\n\n"
        "–§–æ—Ä–º–∞—Ç: —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª/–∑–∞–ø—è—Ç—É—é/—Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ü—Ä–∏–º–µ—Ä—ã:\n"
        "<code>üëç üî• üòç ‚ú® üëè</code>\n"
        "–∏–ª–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –≤ .txt —Ñ–∞–π–ª–µ.\n\n"
        "–°–æ–≤–µ—Ç: 3‚Äì10 —ç–º–æ–¥–∑–∏ –æ–±—ã—á–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ."
    )
    await cb.answer()

def _parse_emoji_list(text: str) -> list[str]:
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º, –∑–∞–ø—è—Ç—ã–º –∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º —Å—Ç—Ä–æ–∫–∏.
    raw = [t.strip() for t in re.split(r"[\s,]+", text or "") if t.strip()]
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞
    seen, out = set(), []
    for t in raw:
        if t not in seen:
            seen.add(t)
            out.append(t)
    # –û–≥—Ä–∞–Ω–∏—á–∏–º —Ä–∞–∑—É–º–Ω–æ (–Ω–∞–ø—Ä., –¥–æ 25)
    return out[:25]

@router.message(LikeFSM.waiting_for_reactions_input)
async def rx_receive_custom(msg: types.Message, state: FSMContext):
    import re
    emojis: list[str] = []

    if msg.document:
        # —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ —Ç–µ–∫—Å—Ç (–∫–∞–∫ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–∞–Ω–∞–ª–æ–≤)
        ts = int(time.time())
        path = os.path.join(TEMP_DIR, f"reactions_{msg.from_user.id}_{ts}.txt")
        try:
            await msg.bot.download(msg.document, destination=path)
            text = "\n".join(await _read_txt_lines(path))
        except Exception as e:
            await delete_user_message(msg)
            chat_id, message_id = await ui_get_ids(state)
            await ui_edit(msg.bot, chat_id, message_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}")
            return
        finally:
            try: os.remove(path)
            except Exception: pass
        emojis = _parse_emoji_list(text)
    else:
        emojis = _parse_emoji_list(msg.text or "")

    if not emojis:
        await delete_user_message(msg)
        chat_id, message_id = await ui_get_ids(state)
        await ui_edit(msg.bot, chat_id, message_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç–º–æ–¥–∑–∏. –í–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑.")
        return

    await state.update_data(reactions=emojis)
    await delete_user_message(msg)

    # –¥–∞–ª—å—à–µ ‚Äî –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
    await state.set_state(LikeFSM.waiting_for_mode)
    chat_id, message_id = await ui_get_ids(state)
    pretty = " ".join(emojis)
    await ui_edit(
        msg.bot, chat_id, message_id,
        f"‚úÖ –í–∞—à –Ω–∞–±–æ—Ä —Ä–µ–∞–∫—Ü–∏–π: {pretty}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        like_mode_keyboard()
    )



@router.callback_query(F.data == "like_mode_once", LikeFSM.waiting_for_mode)
async def like_mode_once(cb: types.CallbackQuery, state: FSMContext):
    await state.update_data(mode="once")
    await state.set_state(LikeFSM.waiting_for_settings)
    chat_id, message_id = await ui_get_ids(state)
    await ui_edit(
        cb.message.bot, chat_id, message_id,
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ä–∞–∑–æ–≤—ã–π):\n"
        "‚Ä¢ –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–º –∫–∞–Ω–∞–ª–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5)\n"
        "‚Ä¢ –°–∫–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–æ–≤ –ª–∞–π–∫–∞—Ç—å –Ω–∞ –ø–æ—Å—Ç–µ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2)\n"
        "‚Ä¢ –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ä–µ–∞–∫—Ü–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 9)\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: 5 2 9"
    )
    await cb.answer()

@router.callback_query(F.data == "like_mode_loop", LikeFSM.waiting_for_mode)
async def like_mode_loop(cb: types.CallbackQuery, state: FSMContext):
    await state.update_data(mode="loop")
    await state.set_state(LikeFSM.waiting_for_settings)
    chat_id, message_id = await ui_get_ids(state)
    await ui_edit(
        cb.message.bot, chat_id, message_id,
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∫–∞—Ä—É—Å–µ–ª—å):\n"
        "‚Ä¢ –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞ <i>–∫–∞–∂–¥–æ–º —Ü–∏–∫–ª–µ</i> (–æ–±—ã—á–Ω–æ 1‚Äì3).\n"
        "‚Ä¢ –°–∫–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–æ–≤ –ª–∞–π–∫–∞—Ç—å –Ω–∞ –ø–æ—Å—Ç–µ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)?\n"
        "‚Ä¢ –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ä–µ–∞–∫—Ü–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: 3 2 9"
    )
    await cb.answer()

@router.message(LikeFSM.waiting_for_settings)
async def like_receive_settings(msg: types.Message, state: FSMContext):
    data0 = await state.get_data()
    mode = data0.get("mode", "once")

    try:
        parts = msg.text.split()
        posts_last = max(1, int(parts[0]))
        extra_random = max(0, int(parts[1]))
        per_reaction = max(3, int(parts[2]))
    except Exception:
        await delete_user_message(msg)
        chat_id, message_id = await ui_get_ids(state)
        fmt = "3 2 9" if mode == "loop" else "5 2 9"
        await ui_edit(msg.bot, chat_id, message_id, f"‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: {fmt}  (–ø–æ—Å—Ç–æ–≤, –¥–æ–ø.—Å–ª—É—á–∞–π–Ω—ã—Ö, –∑–∞–¥–µ—Ä–∂–∫–∞)")
        return

    await state.update_data(
        posts_last=posts_last,
        extra_random=extra_random,
        per_reaction=per_reaction
    )

    await delete_user_message(msg)

    await state.set_state(LikeFSM.waiting_for_parallel)
    chat_id, message_id = await ui_get_ids(state)
    await ui_edit(
        msg.bot, chat_id, message_id,
        "‚öôÔ∏è –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å:\n"
        "‚Ä¢ –°–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ? (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)\n"
        "‚Ä¢ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∑–∞–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã: <code>2</code> –∏–ª–∏ <code>3 0.5</code>",
        InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]
        ])
    )
    
@router.message(LikeFSM.waiting_for_parallel)
async def like_receive_parallel(msg: types.Message, state: FSMContext):
    txt = (msg.text or "").strip().replace(",", ".")
    parts = txt.split()
    try:
        user_max_raw   = max(1, int(parts[0]))
        start_stagger  = float(parts[1]) if len(parts) > 1 else 0.0
        start_stagger  = max(0.0, start_stagger)
    except Exception:
        await delete_user_message(msg)
        chat_id, message_id = await ui_get_ids(state)
        await ui_edit(msg.bot, chat_id, message_id, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: <code>2</code> –∏–ª–∏ <code>3 0.5</code>")
        return

    data = await state.get_data()
    selected_accounts = data.get("selected_accounts", [])
    allowed_max = max(1, len(selected_accounts))
    max_clients = min(user_max_raw, allowed_max)   # ‚Üê –∫–ª—ç–º–ø —Ç—É—Ç

    await state.update_data(parallel_max=max_clients, parallel_stagger=start_stagger)
    await delete_user_message(msg)

    data = await state.get_data()
    if data.get("mode") == "loop":
        await state.set_state(LikeFSM.waiting_for_interval)
        chat_id, message_id = await ui_get_ids(state)
        await ui_edit(
            msg.bot, chat_id, message_id,
            "‚è≤ –£–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö), –Ω–∞–ø—Ä–∏–º–µ—Ä 5.\n"
            "–ë–æ—Ç –±—É–¥–µ—Ç –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∏ –ª–∞–π–∫–∞—Ç—å —Å–≤–µ–∂–∏–µ –∫–æ–º–º–µ–Ω—Ç—ã."
        )
    else:
        await _create_like_task_and_show_card(msg, state)


@router.message(LikeFSM.waiting_for_interval)
async def like_receive_interval(msg: types.Message, state: FSMContext):
    try:
        interval_min = max(1, int(msg.text.strip()))
    except Exception:
        await delete_user_message(msg)
        chat_id, message_id = await ui_get_ids(state)
        await ui_edit(msg.bot, chat_id, message_id, "‚ö†Ô∏è –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä 5.")
        return

    await state.update_data(loop_interval_min=interval_min)
    await delete_user_message(msg)
    await _create_like_task_and_show_card(msg, state)


async def _create_like_task_and_show_card(msg_or_cb: types.Message | types.CallbackQuery, state: FSMContext):
    # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –¥–ª—è Message, –∏ –¥–ª—è CallbackQuery
    bot = msg_or_cb.bot if isinstance(msg_or_cb, types.Message) else msg_or_cb.message.bot
    chat_id, message_id = await ui_get_ids(state)
    data = await state.get_data()
    user_id = (msg_or_cb.from_user.id if isinstance(msg_or_cb, types.Message) else msg_or_cb.from_user.id)
    selected_accounts = data["selected_accounts"]
    user_max = int(data.get("parallel_max", 2))
    user_stagger = float(data.get("parallel_stagger", 0.0))
    max_clients = max(1, min(user_max, len(selected_accounts)))

    payload = {
        "channels": data["channels"],
        "posts_last": data["posts_last"],
        "comments_per_post": {
            "first_and_last": True,
            "extra_random_from_top": data["extra_random"],
            "random_pool_top": 25
        },
        #"reactions": ["üëç","üî•","üòç","üëè","‚ú®"],
        "unique_per_account": False,
        "max_reactions_per_account": 300,
        "max_reactions_per_post": 10,
        "antiduplicate": "off",
        "delays": {"per_reaction_sec": data["per_reaction"], "jitter": 0.5, "between_posts_sec": 5},
        "parallel": {
            "max_clients": max_clients,
            "start_stagger_sec": user_stagger,
            "flood_grace_sec": 60
        },
        "safety": {"hourly_rate_limit": 40, "shuffle_everywhere": True},
        "mode": data.get("mode", "once"),
        "watch": {
            "poll_interval_sec": max(60, int(data.get("loop_interval_min", 5)) * 60) if data.get("mode") == "loop" else 0,
            "only_new_posts": True
        },
        "selected_accounts": selected_accounts,
        "join_discussion_if_needed": True,
        "leave_after": False,
        "join_limits": {"per_account": 3, "cooldown_sec": 2},
    }
    payload["total_posts"] = len(payload["channels"]) * payload["posts_last"]
    payload["total_accounts"] = len(payload["selected_accounts"])
    payload["likes_done"] = 0
    payload["skipped"] = 0
    payload["errors"] = 0
    
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ ‚Äî –¥–æ–±–∞–≤–∏–º –µ–≥–æ
    user_rx = data.get("reactions")
    if isinstance(user_rx, list) and user_rx:
        payload["reactions"] = list(dict.fromkeys(str(x) for x in user_rx))
    # –∏–Ω–∞—á–µ –∫–ª—é—á –Ω–µ –ø–∏—à–µ–º ‚Äî –≤ run_for_account –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—É–ª

    task_id = create_like_comments_task(created_by=user_id, payload=payload)
    await state.update_data(task_id=task_id, settings=payload)

    mode_human = "–∫–∞—Ä—É—Å–µ–ª—å (—Ü–∏–∫–ª–∏—á–Ω–æ)" if payload["mode"] == "loop" else "—Ä–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–æ–Ω"
    text = (
        f"‚ù§Ô∏è <b>–õ–∞–π–∫–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</b>\n"
        f"–ó–∞–¥–∞—á–∞ #{task_id}\n\n"
        f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(payload['selected_accounts'])}\n"
        f"üì° –ö–∞–Ω–∞–ª–æ–≤: {len(payload['channels'])}\n"
        f"üìù –ü–æ—Å—Ç–æ–≤/–∫–∞–Ω–∞–ª: {payload['posts_last']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–æ–≤/–ø–æ—Å—Ç: 1-–π, –ø–æ—Å–ª–µ–¥–Ω–∏–π + {payload['comments_per_post']['extra_random_from_top']} —Ä–∞–Ω–¥–æ–º\n"
        f"‚è± –ó–∞–¥–µ—Ä–∂–∫–∞: ~{payload['delays']['per_reaction_sec']}—Å ¬±{int(payload['delays']['jitter']*100)}%\n"
        f"üïπ –†–µ–∂–∏–º: {mode_human}\n"
    )
    if payload["mode"] == "loop":
        text += f"‚è≤ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {data.get('loop_interval_min', 5)} –º–∏–Ω\n"
    if payload.get("reactions"):
        text += f"ü§ç –†–µ–∞–∫—Ü–∏–∏: {' '.join(payload['reactions'])}\n"
    else:
        text += "ü§ç –†–µ–∞–∫—Ü–∏–∏: –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ\n"


    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"like_start_{task_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")],
    ])

    await ui_edit(bot, chat_id, message_id, text, kb)




@router.callback_query(F.data.startswith("like_start_"))
async def like_start(cb: types.CallbackQuery, state: FSMContext):
    task_id = int(cb.data.split("_")[-1])
    data = await state.get_data()
    if data.get("task_id") != task_id:
        await cb.answer("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø–æ—Ç–µ—Ä—è–Ω, –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    settings = data.get("settings", {})
    mode = settings.get("mode", "once")
    poll_interval_sec = int(settings.get("watch", {}).get("poll_interval_sec", 0) or 0)

    toast = await cb.message.answer(f"üöÄ –ó–∞–¥–∞—á–∞ #{task_id} –∑–∞–ø—É—â–µ–Ω–∞.")

    if mode == "loop":
        # —Å—Ç–∞—Ä—Ç—É–µ–º –∫–∞—Ä—É—Å–µ–ª—å —á–µ—Ä–µ–∑ –≤–æ—Ä–∫–µ—Ä (–æ–Ω —Å–∞–º –Ω–µ –¥–æ–ø—É—Å—Ç–∏—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
        start_carousel_worker(task_id, state, poll_interval_sec or 300)
    else:
        # —Ä–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–æ–Ω ‚Äî –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
        asyncio.create_task(run_like_job(state, mode="once"))

    # –ø–æ–¥—á–∏—Å—Ç–∏—Ç—å —Ç–æ—Å—Ç –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
    async def _after():
        await asyncio.sleep(0.5)
        try:
            await toast.delete()
        except Exception:
            pass
        await render_like_task(cb.message, task_id)

    asyncio.create_task(_after())
    await cb.answer()



@router.callback_query(F.data.startswith("like_loop_start_"))
async def like_loop_start(cb: types.CallbackQuery, state: FSMContext):
    task_id = int(cb.data.split("_")[-1])
    data = await state.get_data()
    if data.get("task_id") != task_id:
        await cb.answer("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø–æ—Ç–µ—Ä—è–Ω. –û—Ç–∫—Ä–æ–π –∑–∞–¥–∞—á—É –∑–∞–Ω–æ–≤–æ.", show_alert=True); return

    settings = data.get("settings", {})
    interval = int(settings.get("watch", {}).get("poll_interval_sec", 300))

    # —Å—Ç–∞—Ä—Ç—É–µ–º –≤–æ—Ä–∫–µ—Ä
    start_carousel_worker(task_id, state, interval)
    await cb.answer("üîÅ –ö–∞—Ä—É—Å–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞.")
    # —Ç—É—Ç –º–æ–∂–µ—à—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É / —Å—Ç–∞—Ç—É—Å
    # await render_like_task(cb.message, task_id)

@router.callback_query(F.data.startswith("like_loop_stop_"))
async def like_loop_stop(cb: types.CallbackQuery, state: FSMContext):
    task_id = int(cb.data.split("_")[-1])
    await stop_carousel_worker(task_id)
    await cb.answer("‚èπ –ö–∞—Ä—É—Å–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
    # await render_like_task(cb.message, task_id)





@router.callback_query(F.data.startswith("like_export_"))
async def like_export_channels(cb: types.CallbackQuery, state: FSMContext):
    try:
        task_id = int(cb.data.split("_")[-1])
    except Exception:
        await cb.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏.", show_alert=True)
        return

    try:
        channels = get_ok_channels_for_task(task_id)
    except Exception as e:
        await cb.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∫–∏: {e}", show_alert=True)
        return

    import re

    def to_at(s: str) -> str | None:
        s = (s or "").strip()
        if not s:
            return None

        # t.me/‚Ä¶ ‚Üí username
        m = re.match(r'^(?:https?://)?t\.me/(.+)$', s, flags=re.IGNORECASE)
        if m:
            path = m.group(1)
            # –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∏–Ω–≤–∞–π—Ç—ã/—á–∞—Ç—ã –≤ @ –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏–º
            if path.startswith(("+", "joinchat/")) or path.startswith(("c/", "s/")):
                return None
            s = path

        # —É–±—Ä–∞—Ç—å —Ö–≤–æ—Å—Ç—ã —Ç–∏–ø–∞ /123?foo=bar
        s = s.split("?")[0].split("/")[0].lstrip("@")

        # –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —é–∑–µ—Ä–Ω–µ–π–º—ã (–±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã/–ø–æ–¥—á—ë—Ä–∫–∏)
        if not re.fullmatch(r"[A-Za-z0-9_]{5,32}", s):
            return None

        return "@" + s

    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º ‚Üí @username, —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∏ –¥—É–±–ª–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞
    norm = []
    seen = set()
    for c in channels:
        at = to_at(c)
        if at and at not in seen:
            seen.add(at)
            norm.append(at)

    if not norm:
        await cb.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username.", show_alert=True)
        return

    content = "\n".join(norm)
    buf = BufferedInputFile(content.encode("utf-8"),
                            filename=f"liked_channels_task_{task_id}.txt")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –û–ö (—É–¥–∞–ª–∏—Ç—å)", callback_data="like_delete_log_message")]]
    )

    await cb.message.answer_document(
        document=buf,
        caption=f"üìÑ –ö–∞–Ω–∞–ª—ã (@username) ‚Ä¢ {len(norm)} —à—Ç.",
        reply_markup=kb
    )
    await cb.answer()


@router.callback_query(F.data == "like_delete_log_message")
async def like_delete_log_message(cb: types.CallbackQuery):
    try:
        await cb.message.delete()              # ‚Üê —É–¥–∞–ª—è–µ–º –∏–º–µ–Ω–Ω–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —Ñ–∞–π–ª–æ–º)
        await cb.answer("‚úÖ –õ–æ–≥ —É–¥–∞–ª—ë–Ω")
    except Exception as e:
        # –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —É–¥–∞–ª–∏—Ç—å (—Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π), –ø—Ä–æ—Å—Ç–æ —É–±–µ—Ä—ë–º –∫–Ω–æ–ø–∫–∏
        try:
            await cb.message.edit_reply_markup(reply_markup=None)
        except Exception:
            pass
        await cb.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {e}", show_alert=True)

