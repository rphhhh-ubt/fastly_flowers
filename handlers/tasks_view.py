# handlers/tasks_view.py

import pytz, io, uuid, os, asyncio, re, math
from aiogram import Router, types, F
from utils.check_access import admin_only
from keyboards.back_menu import back_to_main_menu_keyboard
from app.memory_storage import bulk_profile_tasks_storage
from keyboards.task_list_keyboard import task_list_keyboard
from utils.task_card_helpers import format_task_card, get_accounts_count
from app.db import (
    get_tasks_by_type,
    get_task_by_id,
    get_task_logs_by_task_id,
    get_task_del_logs_by_task_id,
    get_connection,
    get_all_accounts,
    delete_task,
    get_account_by_id,
    get_all_join_groups_tasks,
    get_join_group_task_by_id,
    get_task_summary,
    get_join_groups_logs,
    delete_task_from_db,
    get_twofa_tasks,
    read_twofa_task,
    read_twofa_logs,
    count_twofa_logs,
)
from keyboards.tasks_view_keyboards import tasks_type_keyboard
from keyboards.task_card_keyboard import get_task_card_keyboard
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, CallbackQuery
from aiogram.fsm.context import FSMContext
from handlers.bulk_profile_update_task import start_bulk_update
from keyboards.delete_channels_keyboards import delete_channels_select_accounts_keyboard as build_delete_accounts_keyboard
from handlers.delete_channels_selected import handle_task_delete_channels_del
# from handlers.create_channels_task import start_create_channels  ‚Üê –±—É–¥—É—â–∏–π –∏–º–ø–æ—Ä—Ç
from handlers.channel_creation import get_task_create_logs  # –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π –∏–∑ app.db
from keyboards.create_task_keyboards import create_task_type_keyboard
from utils.freeze_checker import run_freeze_check
from aiogram.filters import Command
from .join_groups_task_view import create_join_groups_task_card
from collections import defaultdict
from .like_task_view import create_like_task_card
from .twofa_task_view import create_twofa_task_card
from typing import List, Dict, Any, Tuple, Optional
from aiogram.exceptions import TelegramBadRequest
from utils.task_cards import build_reauth_task_card_text
from .comment_check_task_view import create_cchk_task_card





TASK_CREATE_HANDLERS = {
    "bulk_profile_update": start_bulk_update,
    #"delete_channels": repeat_delete_channels_task,
    #"create_channels": start_create_channels, ‚Üê –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ
}

router = Router()

async def _render_task_card_smart(message: types.Message, task: dict):
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–Ω–¥–µ—Ä–æ–º.
    –ï—Å–ª–∏ —Ç–∏–ø–∞ –Ω–µ—Ç –≤ —Ä–µ–µ—Å—Ç—Ä–µ ‚Äî –ø–∞–¥–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ format_task_card().
    """
    t = (task.get("type") or "").strip()

    # –†–µ–µ—Å—Ç—Ä: —Ç–∏–ø -> –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–∞–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç message
    ASYNC_RENDERERS = {
        "like_comments": render_like_task,  # —É–∂–µ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏–∂–µ –≤ —Ñ–∞–π–ª–µ
        # —Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã, –µ—Å–ª–∏ —É –Ω–∏—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä
    }

    # –†–µ–µ—Å—Ç—Ä: —Ç–∏–ø -> —Ñ—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è (text, kb)
    PLAIN_RENDERERS = {
        "check_comments": create_cchk_task_card,  # –Ω–∞—à–∞ –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
    }

    if t in ASYNC_RENDERERS:
        await ASYNC_RENDERERS[t](message, task["id"])
        return

    if t in PLAIN_RENDERERS:
        text, kb = PLAIN_RENDERERS[t](task)
        await message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        return

    # Fallback: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
    text = format_task_card(task)
    keyboard = get_task_card_keyboard(task["type"], task["id"])
    await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")


async def render_like_task(message: types.Message, task_id: int):
    from app.db import get_task_by_id, get_connection
    import json

    task = get_task_by_id(task_id)
    if not task:
        await message.edit_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    payload = task.get("payload") or {}
    if isinstance(payload, str):
        try:
            payload = json.loads(payload)
        except Exception:
            payload = {}
    task_data = {**task, **payload}
    

    # –∞–≥—Ä–µ–≥–∞—Ç—ã –∏–∑ –ª–æ–≥–æ–≤
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT
            COALESCE(SUM(CASE WHEN status='ok'   THEN 1 END), 0) AS likes_done,
            COALESCE(SUM(CASE WHEN status='skip' THEN 1 END), 0) AS skipped,
            COALESCE(SUM(CASE WHEN status='fail' THEN 1 END), 0) AS errors
        FROM like_comments_log
        WHERE task_id = %s
    """, (task_id,))
    likes_done, skipped, errors = cur.fetchone() or (0, 0, 0)
    cur.close(); conn.close()

    # –ø–æ–¥–º–µ—à–∏–≤–∞–µ–º
    task_data["likes_done"] = task_data.get("likes_done") or likes_done
    task_data["skipped"]    = task_data.get("skipped")    or skipped
    task_data["errors"]     = task_data.get("errors")     or errors

    channels = task_data.get("channels") or []
    posts_last = task_data.get("posts_last")
    if (task_data.get("total_posts") in (None, 0)) and channels and isinstance(posts_last, int):
        task_data["total_posts"] = len(channels) * posts_last

    # === üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ò –û–®–ò–ë–ö–ò ===
    status = task_data.get("status", "unknown")
    last_error = task_data.get("last_error")

    if status == "error":
        status_emoji = "üî¥"
        status_text = f"<b>–û—à–∏–±–∫–∞</b>"
        error_hint = f"\n\n<code>{last_error}</code>" if last_error else "\n\n<em>–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞</em>"
    elif status == "completed":
        status_emoji = "üü¢"
        status_text = "<b>–ó–∞–≤–µ—Ä—à–µ–Ω–∞</b>"
        error_hint = ""
    else:
        status_emoji = "üü°"
        status_text = f"<b>{status.capitalize()}</b>"
        error_hint = ""
    
    # –∫–∞—Ä—Ç–æ—á–∫–∞
    from .like_task_view import create_like_task_card
    text, kb = create_like_task_card(task_data)

    try:
        await message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    except Exception as e:
        # –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º 'message is not modified' –∏ –ø–æ—Ö–æ–∂–∏–µ
        if "message is not modified" not in str(e).lower():
            raise




@router.callback_query(F.data == "repeat_task_delete_channels")
@admin_only
async def repeat_delete_channels_task(callback: types.CallbackQuery):
    print("[DEBUG] üîÅ –ü–æ–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏: delete_channels")
    await handle_task_delete_channels_del(callback)
    await callback.answer()



# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á —Ç–∏–ø–∞ ¬´–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è¬ª
@router.callback_query(F.data == "tasktype_bulk_profile_update")
@admin_only
async def view_bulk_profile_tasks(callback: types.CallbackQuery):
    tasks = get_tasks_by_type("bulk_profile_update", limit=10)

    if not tasks:
        await callback.message.edit_text(
            "üîÑ <b>–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.",
            reply_markup=back_to_main_menu_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    for task in tasks:
        task_id = task["id"]
        status = task["status"]
        accounts = get_accounts_count(task)
        start_date = task["scheduled_at"].astimezone(pytz.timezone("Europe/Moscow")).strftime("%d.%m.%Y %H:%M")

        status_symbol = {
            "completed": "‚úÖ",
            "active": "üü¢",
            "error": "‚úÖ"
        }.get(status, "‚è≥")

        text = f"üìã #{task_id} | üë§ {accounts} | {status_symbol} | üïì {start_date}"
        callback_data = f"view_task_{task_id}"
        keyboard.inline_keyboard.append([InlineKeyboardButton(text=text, callback_data=callback_data)])

    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_main")])

    await callback.message.edit_text(
        "üîÑ <b>–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "tasktype_delete_channels")
@admin_only
async def view_delete_channels_tasks(callback: types.CallbackQuery):
    tasks = get_tasks_by_type("delete_channels")  # –ø–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞

    if not tasks:
        await callback.message.edit_text(
            "üßπ <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.",
            reply_markup=back_to_main_menu_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    for task in tasks:
        task_id = task["id"]
        status = task["status"]
        accounts = get_accounts_count(task)
        start_date = task["scheduled_at"].astimezone(pytz.timezone("Europe/Moscow")).strftime("%d.%m.%Y %H:%M")

        status_map = {
            "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
            "active": "üü¢ –ê–∫—Ç–∏–≤–Ω–∞",
            "pending": "‚è≥ –í –æ—á–µ—Ä–µ–¥–∏",
            "error": "‚ùå –û—à–∏–±–∫–∞"
        }
        status_text = status_map.get(task["status"], "‚è≥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        account_count = get_accounts_count(task)
        account_part = f"{account_count} –∞–∫–∫–∞—É–Ω—Ç" if account_count == 1 else f"{account_count} –∞–∫–∫–∞—É–Ω—Ç–∞"

        text = f"üßπ #{task_id} | {status_text} | üë§ {account_part} | üïì {start_date}"

        callback_data = f"view_task_{task_id}"
        keyboard.inline_keyboard.append([InlineKeyboardButton(text=text, callback_data=callback_data)])

    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_main")])

    await callback.message.edit_text(
        "üßπ <b>–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()



# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ ID
@router.callback_query(F.data.startswith("view_task_"))
@admin_only
async def view_task_details(callback: types.CallbackQuery):
    try:
        task_id = int(callback.data.split("_")[2])
        task = get_task_by_id(task_id)
        if not task:
            await callback.answer("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        await _render_task_card_smart(callback.message, task)
        await callback.answer()

    except Exception as e:
        print(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á–∏: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∑–∞–¥–∞—á–∏.", show_alert=True)
        
@router.callback_query(F.data.startswith("repeat_task_"))
@admin_only
async def repeat_task(callback: types.CallbackQuery, state: FSMContext):
    task_type = callback.data.split("_", 2)[2]
    handler = TASK_CREATE_HANDLERS.get(task_type)

    if handler:
        await handler(callback, state)
    else:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä –¥–ª—è –∑–∞–¥–∞—á–∏ —Ç–∏–ø–∞ '{task_type}' –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.",
            reply_markup=back_to_main_menu_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()


@router.callback_query(F.data.startswith("show_logs_"))
@admin_only
async def show_task_logs(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[-1])
    print(f"[DEBUG] show_task_logs –≤—ã–∑–≤–∞–Ω –¥–ª—è task_id={task_id}")
    
    task = get_task_by_id(task_id)
    if task and task["type"] == "delete_channels":
        logs = get_task_del_logs_by_task_id(task_id)
        if not logs:
            await callback.message.answer("‚ö†Ô∏è –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        content = "\n\n".join(
            [f"üî∏ –ê–∫–∫–∞—É–Ω—Ç ID {row['account_id']}\n{row['log_text'].strip()}" for row in logs]
        )
        path = f"/tmp/task_{task_id}_log.txt"
        with open(path, "w", encoding="utf-8") as f:
            f.write(content)

        await callback.message.answer_document(
            document=FSInputFile(path),
            caption=f"üìÅ –õ–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ #{task_id}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ OK (–£–¥–∞–ª–∏—Ç—å –ª–æ–≥)", callback_data="delete_log_message")]
            ])
        )
        os.remove(path)
        await callback.answer()
        return

    conn = get_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT timestamp, message FROM task_logs 
        WHERE task_id = %s 
        ORDER BY timestamp
    """, (task_id,))
    rows = cur.fetchall()
    cur.close()
    conn.close()

    if not rows:
        await callback.message.answer("‚ö†Ô∏è –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.")
        return

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏ (—Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫)
    seen = set()
    unique_lines = []
    for row in rows:
        line = f"{row[0].strftime('%Y-%m-%d %H:%M:%S')} ‚Äî {row[1]}"
        if line not in seen:
            seen.add(line)
            unique_lines.append(line)

    full_log = "\n".join(unique_lines)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ .log —Ñ–∞–π–ª
    log_path = f"/tmp/task_log_{task_id}_{uuid.uuid4().hex}.log"
    with open(log_path, "w", encoding="utf-8") as f:
        f.write(full_log)

    try:
        await callback.message.answer_document(
            document=FSInputFile(log_path),
            caption=f"üìÅ –õ–æ–≥–∏ –∑–∞–¥–∞—á–∏ #{task_id}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ OK (–£–¥–∞–ª–∏—Ç—å –ª–æ–≥)", callback_data="delete_log_message")]
            ])
        )
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤: {e}")

    try:
        os.remove(log_path)
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")

    await callback.answer()
    
@router.callback_query(F.data.startswith("delete_task_"))
@admin_only
async def delete_task(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[-1])

    # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("DELETE FROM tasks WHERE id = %s", (task_id,))
    conn.commit()
    cur.close()
    conn.close()

    await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
    await show_task_types_menu(callback)


@router.callback_query(F.data.startswith("confirm_delete_task_"))
@admin_only
async def confirm_delete_task(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[-1])
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_task_{task_id}")],
        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"view_task_{task_id}")]
    ])
    await callback.message.edit_text(
        f"‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É #{task_id}?",
        reply_markup=keyboard
    )
    await callback.answer()




@router.callback_query(F.data == "menu_task_execution")
@admin_only
async def show_task_types_menu(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á:",
        reply_markup=tasks_type_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "tasktype_create_and_set_channel")
@admin_only
async def view_create_channel_tasks(callback: types.CallbackQuery):
    

    tasks = get_tasks_by_type("create_and_set_channel", limit=10)
    

    if not tasks:
        await callback.message.edit_text(
            "üì° <b>–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–æ–≤</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.",
            reply_markup=back_to_main_menu_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    
    for task in tasks:
        task_id = task["id"]
        status = task["status"]
        accounts = task.get("accounts_count", 0)


        start_date = task["scheduled_at"].astimezone(pytz.timezone("Europe/Moscow")).strftime("%d.%m.%Y %H:%M")

        status_symbol = {
            "completed": "‚úÖ",
            "active": "üü¢",
            "error": "‚ùå"
        }.get(status, "‚è≥")

        text = f"üìã #{task_id} | üë§ {accounts} | {status_symbol} | üïì {start_date}"
        callback_data = f"view_create_channel_task_{task_id}"
        keyboard.inline_keyboard.append([InlineKeyboardButton(text=text, callback_data=callback_data)])

    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_main")])

    await callback.message.edit_text(
        "üì° <b>–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("view_create_channel_task_"))
@admin_only
async def view_create_channel_task_details(callback: types.CallbackQuery):
    

    try:
        task_id = int(callback.data.split("_")[-1])
        task = get_task_by_id(task_id)

        if not task:
            await callback.answer("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        text = format_task_card(task)
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥ –∑–∞–¥–∞—á–∏", callback_data=f"show_create_log_{task_id}")],
            [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞–¥–∞—á—É", callback_data="show_create_task_menu")],            
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"delete_create_channel_task_{task_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tasktype_create_and_set_channel")]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        print(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á–∏: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∑–∞–¥–∞—á–∏.", show_alert=True)

@router.callback_query(F.data.startswith("show_create_log_"))
@admin_only
async def show_create_task_log(callback: types.CallbackQuery):
    

    task_id = int(callback.data.split("_")[-1])
    logs = get_task_create_logs(task_id)
    

    if not logs:
        await callback.message.answer("‚ö†Ô∏è –õ–æ–≥–∏ –ø–æ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    log_lines = [f"–ê–∫–∫–∞—É–Ω—Ç {account_id}:\n{log_text}" for account_id, log_text in logs]
    log_str = "\n\n".join(log_lines)
    path = f"/tmp/create_channels_log_{task_id}.txt"
    with open(path, "w", encoding="utf-8") as f:
        f.write(log_str)

    await callback.message.answer_document(
        FSInputFile(path),
        caption=f"üìÑ –õ–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ #{task_id}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–ö", callback_data="delete_log_message")]
        ])
    )
    import os
    os.remove(path)
    await callback.answer()



@router.callback_query(F.data == "show_create_task_menu")
@admin_only
async def show_create_task_menu(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üÜï <b>–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:",
        reply_markup=create_task_type_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()



@router.callback_query(F.data.startswith("delete_create_channel_task_"))
@admin_only
async def confirm_delete_create_channel_task(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[-1])
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete_task_{task_id}"),
            InlineKeyboardButton(text="üóë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"confirm_delete_task_{task_id}"),
        ]
    ])
    await callback.message.edit_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ <b>—É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É #{task_id}</b>?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ —É–¥–∞–ª–∏—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("cancel_delete_task_"))
@admin_only
async def cancel_delete_task(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[-1])
    # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–¥–∞—á–∏
    await callback.message.edit_text(
        "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á", callback_data="tasktype_create_and_set_channel")]]
        )
    )
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete_task_"))
@admin_only
async def do_delete_task(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[-1])
    delete_task(task_id)
    await callback.message.edit_text(
        f"üóëÔ∏è –ó–∞–¥–∞—á–∞ #{task_id} —É–¥–∞–ª–µ–Ω–∞.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á", callback_data="tasktype_create_and_set_channel")]]
        )
    )
    await callback.answer()


@router.callback_query(F.data == "task_check_freeze")
@admin_only
async def show_freeze_task(callback: CallbackQuery):
    accounts = get_all_accounts()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{acc['id']} ‚Äî @{acc.get('username', '–±–µ–∑ username')}", callback_data=f"start_freeze_check:{acc['id']}")]
        for acc in accounts if acc.get("username")
    ])
    await callback.message.edit_text("üßä –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("start_freeze_check:"))
@admin_only
async def start_freeze_check(callback: CallbackQuery):
    account_id = int(callback.data.split(":")[1])
    account = get_account_by_id(account_id)

    if not account or not account.get("session_string"):
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ—Ç —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.", show_alert=True)
        return

    await callback.message.edit_text("üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –∑–∞–º–æ—Ä–æ–∑–∫—É. –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...")

    asyncio.create_task(run_freeze_check(account))  # –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    await callback.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "menu_join_groups_tasks")
async def show_join_groups_tasks(callback: types.CallbackQuery):
    from app.db import get_all_join_groups_tasks  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ!
    tasks = get_all_join_groups_tasks()
    if not tasks:
        await callback.message.edit_text("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã.")
        return

    keyboard = []
    for task in tasks:
        # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ payload, –µ—Å–ª–∏ –æ–Ω–æ —Ç–∞–º –µ—Å—Ç—å
        total_accounts = "-"
        total_groups = "-"
        payload = task.get("payload")
        if payload:
            import json
            try:
                data = json.loads(payload) if isinstance(payload, str) else payload
                total_accounts = data.get("total_accounts", "-")
                total_groups = data.get("total_groups", "-")
            except Exception:
                pass
        keyboard.append([
            InlineKeyboardButton(
                text=f"–ó–∞–¥–∞—á–∞ #{task['id']} | {total_accounts} –∞–∫–∫. | {total_groups} –≥—Ä—É–ø–ø",
                callback_data=f"show_join_groups_task_{task['id']}"
            )
        ])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")])
    await callback.message.edit_text(
        "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á ¬´–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã¬ª:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@router.callback_query(F.data.startswith("show_join_groups_task_"))
async def show_join_groups_task_card(callback: types.CallbackQuery):
    from app.db import get_join_group_task_by_id
    task_id = int(callback.data.split("_")[-1])
    task_data = get_join_group_task_by_id(task_id)
    if not task_data:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return

    # –î–æ–±–∞–≤—å task_id –≤—Ä—É—á–Ω—É—é:
    if isinstance(task_data, dict):
        task_data["task_id"] = task_id
    elif isinstance(task_data, tuple):
        # –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É —Ç–µ–±—è tuple –≤–∏–¥–∞ (id, ...), —Ç–æ —Ç–∞–∫:
        task_data = {
            "task_id": task_id,
            # –¥–∞–ª—å—à–µ —Ä–∞—Å–ø–∞–∫—É–π –ø–æ –Ω—É–∂–Ω—ã–º –∏–Ω–¥–µ–∫—Å–∞–º,
            # –Ω–∞–ø—Ä–∏–º–µ—Ä "total_accounts": task_data[1], ...
        }
    card_text, card_markup = create_join_groups_task_card(task_data)
    await callback.message.edit_text(card_text, reply_markup=card_markup, parse_mode="HTML")


@router.callback_query(F.data.startswith("show_join_task_log_"))
async def show_join_task_log(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[-1])
    logs = get_join_groups_logs(task_id)
    if not logs:
        await callback.message.answer("‚ö†Ô∏è –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    
    acc_blocks = defaultdict(lambda: defaultdict(list))
    all_accs = set()

    # –ü–æ–¥—Å—Ç—Ä–æ–π –∏–Ω–¥–µ–∫—Å—ã –ø–æ–¥ —Å–≤–æ–π —Ñ–æ—Ä–º–∞—Ç!
    for row in logs:
        acc_id = row[2]           # <-- —Ç–≤–æ–π account_id (–ø—Ä–æ–≤–µ—Ä—å –∏–Ω–¥–µ–∫—Å!)
        group_link = row[3]
        status = row[4]
        msg = row[5]
        all_accs.add(acc_id)
        acc_blocks[acc_id][status].append((group_link, msg))

    log_lines = []
    log_lines.append(f"–ó–∞–¥–∞—á–∞ ‚Ññ{task_id}")
    log_lines.append(f"üìù –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(all_accs)}\n")
    for acc_id in all_accs:
        log_lines.append(f"\n–ê–∫–∫–∞—É–Ω—Ç ID {acc_id}:\n")
        if acc_blocks[acc_id].get("no_captcha"):
            links = [g for g, _ in acc_blocks[acc_id]["no_captcha"]]
            log_lines.append("‚úÖ –í—Å—Ç—É–ø–∏–ª –≤ –≥—Ä—É–ø–ø—ã –±–µ–∑ –∫–∞–ø—á–∏:\n" + "\n".join(links))
        if acc_blocks[acc_id].get("with_captcha"):
            links = [g for g, _ in acc_blocks[acc_id]["with_captcha"]]
            log_lines.append("ü§ñ –í—Å—Ç—É–ø–∏–ª –≤ –≥—Ä—É–ø–ø—ã —Å –∫–∞–ø—á–µ–π:\n" + "\n".join(links))
        if acc_blocks[acc_id].get("requested"):
            links = [g for g, _ in acc_blocks[acc_id]["requested"]]
            log_lines.append("‚è≥ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ–¥–∞–Ω–∞ (–æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞):\n" + "\n".join(links))
        if acc_blocks[acc_id].get("fail"):
            fails = [f"{g} ‚Äî {m}" for g, m in acc_blocks[acc_id]["fail"]]
            log_lines.append("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—ã:\n" + "\n".join(fails))

    log_str = "\n".join(log_lines)
    path = f"/tmp/join_groups_log_{task_id}.txt"
    with open(path, "w", encoding="utf-8") as f:
        f.write(log_str)

    await callback.message.answer_document(
        document=FSInputFile(path),
        caption=f"üìÑ –õ–æ–≥ –∑–∞–¥–∞—á–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã ‚Ññ{task_id}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ OK (–£–¥–∞–ª–∏—Ç—å –ª–æ–≥)", callback_data="join_groups_delete_log_msg")]
        ])
    )
    import os
    os.remove(path)
    await callback.answer()



@router.callback_query(F.data.startswith("delete_join_task_"))
async def delete_join_task(callback: types.CallbackQuery):
    import re
    match = re.match(r"delete_join_task_(\d+)", callback.data)
    if not match:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∑–∞–¥–∞—á–∏.", show_alert=True)
        return
    task_id = int(match.group(1))
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É ‚Ññ{task_id}?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_join_task_{task_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"show_join_groups_task_{task_id}")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete_join_task_"))
async def confirm_delete_join_task(callback: types.CallbackQuery):
    import re
    match = re.match(r"confirm_delete_join_task_(\d+)", callback.data)
    if not match:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∑–∞–¥–∞—á–∏.", show_alert=True)
        return
    task_id = int(match.group(1))
    delete_task_from_db(task_id)
    await callback.message.edit_text(
        "üóëÔ∏è –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_join_groups_tasks")]
        ])
    )
    await callback.answer()





# --- –õ–∞–π–∫–∏–Ω–≥ –∑–∞–¥–∞—á–∏ ---

def status_to_emoji(status: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ —Ü–≤–µ—Ç–Ω–æ–π —ç–º–æ–¥–∑–∏ + —Ç–µ–∫—Å—Ç.
    """
    emoji_map = {
        "running": "üü°",
        "completed": "‚úÖ",
        "error": "üî¥",
        "skip": "‚ö™",
        "pending": "‚è≥",
        "paused": "‚è∏Ô∏è",
        None: "‚ùì"
    }
    emoji = emoji_map.get(status.lower(), "‚ùì")
    return f"{emoji} {status}"

@router.callback_query(F.data == "menu_like_tasks")
async def show_like_tasks(callback: types.CallbackQuery):
    from app.db import get_tasks_by_type

    tasks = get_tasks_by_type("like_comments", limit=10)

    if not tasks:
        await callback.message.edit_text("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ –ª–∞–π–∫–∏–Ω–≥.", reply_markup=back_to_main_menu_keyboard())
        return

    keyboard = []
    for task in tasks:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ payload (–µ—Å–ª–∏ –æ–Ω —Ç–∞–º, –∞ –Ω–µ –≤ –∫–æ—Ä–Ω–µ —Ç–∞–±–ª–∏—Ü—ã)
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –≤ –∫–æ—Ä–Ω–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ task['status']
        # –ï—Å–ª–∏ –≤ payload ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ task['payload'].get('status', 'unknown')
        #status = task.get('status')  # ‚Üê –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ–ª–µ
        # –ò–õ–ò –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –≤–Ω—É—Ç—Ä–∏ payload:
        status = task.get('payload', {}).get('status', 'unknown')

        display_status = status_to_emoji(status)
        button_text = f"–ó–∞–¥–∞—á–∞ #{task['id']} | {display_status}"

        keyboard.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"show_like_task_{task['id']}"
            )
        ])

    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")])

    await callback.message.edit_text(
        "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á ¬´–õ–∞–π–∫–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤¬ª:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data.startswith("show_like_task_"))
async def show_like_task(callback: types.CallbackQuery):
    from app.db import get_task_by_id, get_connection
    import json

    task_id = int(callback.data.split("_")[-1])
    task_data = get_task_by_id(task_id)
    if not task_data:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return

    # payload ‚Üí dict
    payload = task_data.get("payload") or {}
    if isinstance(payload, str):
        try:
            payload = json.loads(payload)
        except Exception:
            payload = {}
    task_data.update(payload)

    # === NEW: –∞–≥—Ä–µ–≥–∞—Ç—ã –∏–∑ –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –≤ payload –ø—É—Å—Ç–æ/–Ω—É–ª–∏ ===
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT
            COALESCE(SUM(CASE WHEN status='ok'   THEN 1 ELSE 0 END), 0) AS likes_done,
            COALESCE(SUM(CASE WHEN status='skip' THEN 1 ELSE 0 END), 0) AS skipped,
            COALESCE(SUM(CASE WHEN status='fail' THEN 1 ELSE 0 END), 0) AS errors
        FROM like_comments_log
        WHERE task_id = %s
    """, (task_id,))
    agg = cur.fetchone() or (0, 0, 0)
    cur.close(); conn.close()

    # –µ—Å–ª–∏ –≤ payload —ç—Ç–∏—Ö –ø–æ–ª–µ–π –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ 0 ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é
    task_data["likes_done"] = task_data.get("likes_done") or agg[0] or 0
    task_data["skipped"]    = task_data.get("skipped")    or agg[1] or 0
    task_data["errors"]     = task_data.get("errors")     or agg[2] or 0

    # –ø–æ—Å—á–∏—Ç–∞–µ–º total_posts, –µ—Å–ª–∏ 0 –∏ –µ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    channels = task_data.get("channels") or []
    posts_last = task_data.get("posts_last")
    if (task_data.get("total_posts") in (None, 0)) and channels and isinstance(posts_last, int):
        task_data["total_posts"] = len(channels) * posts_last

    # –∫–∞—Ä—Ç–æ—á–∫–∞
    from .like_task_view import create_like_task_card
    card_text, card_markup = create_like_task_card(task_data)
    await callback.message.edit_text(card_text, reply_markup=card_markup, parse_mode="HTML")


@router.callback_query(F.data == "like_delete_log_message")
async def like_delete_log_message(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
        await callback.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    except Exception:
        # fallback: –ø—Ä–æ—Å—Ç–æ —Å–Ω–∏–º–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except:
            pass
        await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, —Å–Ω—è–ª –∫–Ω–æ–ø–∫–∏.")


@router.callback_query(F.data.startswith("show_like_log_"))
async def show_like_task_log(callback: types.CallbackQuery):
    from app.db import get_connection
    from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
    import uuid, os

    task_id = int(callback.data.split("_")[-1])

    conn = get_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT 
            COALESCE(created_at, NOW()) AS t,
            COALESCE(account_id, 0),
            COALESCE(channel, ''),
            COALESCE(post_id, 0),
            COALESCE(comment_id, 0),
            COALESCE(reaction, ''),
            COALESCE(status, ''),
            COALESCE(message, '')
        FROM like_comments_log
        WHERE task_id = %s
        ORDER BY t
    """, (task_id,))
    rows = cur.fetchall()
    cur.close(); conn.close()

    if not rows:
        await callback.message.answer("‚ö†Ô∏è –õ–æ–≥–∏ –ø–æ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback.answer()
        return

    lines = []
    for t, acc_id, channel, post_id, comment_id, reaction, status, message in rows:
        ts = t.strftime("%Y-%m-%d %H:%M:%S")
        line = f"{ts} | acc:{acc_id} | ch:{channel} | post:{post_id} | cm:{comment_id} | {status}"
        if reaction: line += f" | rx:'{reaction}'"
        if message:  line += f" | msg:{message}"
        lines.append(line)

    path = f"/tmp/like_task_{task_id}_{uuid.uuid4().hex}.txt"
    with open(path, "w", encoding="utf-8") as f:
        f.write("\n".join(lines))

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–ö (–£–¥–∞–ª–∏—Ç—å –ª–æ–≥)", callback_data="like_delete_log_message")]
    ])
    await callback.message.answer_document(
        document=FSInputFile(path),
        caption=f"üìÅ –õ–æ–≥ –ª–∞–π–∫–∏–Ω–≥–∞ #{task_id}",
        reply_markup=kb
    )
    try: os.remove(path)
    except: pass
    await callback.answer()



@router.callback_query(F.data.startswith("delete_like_task_"))
async def delete_like_task(callback: types.CallbackQuery):
    from app.db import get_connection
    task_id = int(callback.data.split("_")[-1])

    conn = get_connection()
    cur = conn.cursor()
    # —É–¥–∞–ª—è–µ–º —Å–∞–º—É –∑–∞–¥–∞—á—É —Ç–∏–ø–∞ like_comments
    cur.execute("DELETE FROM tasks WHERE id = %s AND type = 'like_comments'", (task_id,))
    tasks_deleted = cur.rowcount

    # —É–¥–∞–ª—è–µ–º –ª–æ–≥–∏ –ø–æ –∑–∞–¥–∞—á–µ
    cur.execute("DELETE FROM like_comments_log WHERE task_id = %s", (task_id,))
    logs_deleted = cur.rowcount

    conn.commit()
    cur.close(); conn.close()

    await callback.answer(f"üóë –£–¥–∞–ª–µ–Ω–æ: –∑–∞–¥–∞—á={tasks_deleted}, –ª–æ–≥–æ–≤={logs_deleted}", show_alert=True)

    # –≤–µ—Ä–Ω—ë–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    from app.db import get_tasks_by_type
    tasks = get_tasks_by_type("like_comments", limit=10) or []
    keyboard = [[InlineKeyboardButton(
        text=f"–ó–∞–¥–∞—á–∞ #{t['id']} | {t['status']}",
        callback_data=f"show_like_task_{t['id']}"
    )] for t in tasks]
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")])

    await callback.message.edit_text(
        "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á ¬´–õ–∞–π–∫–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤¬ª:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data.startswith("show_like_task_"))
async def show_like_task(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[-1])
    await render_like_task(callback.message, task_id)
    await callback.answer()

@router.callback_query(F.data.startswith("refresh_like_task_"))
async def refresh_like_task(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[-1])
    await render_like_task(callback.message, task_id)
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")





# twofa —Ö–µ–Ω–¥–ª–µ—Ä—ã

@router.callback_query(F.data == "menu_twofa_tasks")
@admin_only
async def show_twofa_tasks(callback: types.CallbackQuery):
    tasks = get_twofa_tasks(limit=20)
    if not tasks:
        await callback.message.edit_text(
            "üîê <b>2FA</b>\n\n–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=back_to_main_menu_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()
        return

    kb = []
    tz = pytz.timezone("Europe/Moscow")
    for t in tasks:
        task_id = t["id"]
        status = t["status"]
        accs = t["payload"].get("accounts_count", 0)
        dt = (t.get("scheduled_at") or t.get("created_at"))
        dt_txt = dt.astimezone(tz).strftime("%d.%m.%Y %H:%M") if dt else "‚Äî"
        status_symbol = {
            "completed": "‚úÖ",
            "done": "‚úÖ",
            "running": "üü°",
            "active": "üü¢",
            "pending": "‚è≥",
            "error": "‚ùå",
        }.get((status or "").lower(), "‚ùì")
        text = f"üîê #{task_id} | üë§ {accs} | {status_symbol} | üïì {dt_txt}"
        kb.append([InlineKeyboardButton(text=text, callback_data=f"view_twofa_task_{task_id}")])
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_task_execution")])

    await callback.message.edit_text(
        "üîê <b>2FA ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("view_twofa_task_"))
@admin_only
async def view_twofa_task(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[-1])
    task = read_twofa_task(task_id)
    if not task:
        await callback.answer("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    logs_cnt = count_twofa_logs(task_id)

    task_for_card = {
        "id": task["id"],
        "status": task["status"],
        "created_at": task["created_at"],
        "started_at": task["started_at"],
        # finished_at —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º ‚Äî —Ç–µ–±–µ –Ω–µ –Ω—É–∂–Ω–æ –µ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
        "payload": {
            "mode": task["mode"],
            "kill_other": task["kill_other"],
            "accounts": task["accounts_json"] or [],
            "new_password": task.get("new_password"),
            "old_password": task.get("old_password"),
            "logs_cnt": logs_cnt,  # ‚Üê –∫–ª—é—á–µ–≤–∞—è —à—Ç—É–∫–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        }
    }

    text, kb = create_twofa_task_card(task_for_card)
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("show_twofa_log_"))
@admin_only
async def show_twofa_log(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[-1])
    logs = read_twofa_logs(task_id, limit=5000)
    if not logs:
        await callback.message.answer("‚ö†Ô∏è –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback.answer()
        return

    lines = []
    for row in logs:
        ts = row["ts"].strftime("%Y-%m-%d %H:%M:%S")
        u  = row.get("username") or row.get("account_id")
        ok = "OK" if row["ok"] else "ERR"
        rm = "removed=1" if row["removed_other"] else "removed=0"
        msg= row.get("message") or ""
        lines.append(f"[{ts}] {u}: {ok} | {rm} | {msg}")

    import uuid, os
    path = f"/tmp/twofa_task_{task_id}_{uuid.uuid4().hex}.log"
    with open(path, "w", encoding="utf-8") as f:
        f.write("\n".join(lines))

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–ö (–£–¥–∞–ª–∏—Ç—å –ª–æ–≥)", callback_data="delete_log_message")]
    ])
    await callback.message.answer_document(FSInputFile(path),
                                           caption=f"üìÅ –õ–æ–≥ 2FA #{task_id}",
                                           reply_markup=kb)
    try: os.remove(path)
    except: pass
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete_task_"))
@admin_only
async def confirm_delete_any_task(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[-1])
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_task_{task_id}")],
        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"view_task_{task_id}")]
    ])
    await callback.message.edit_text(
        f"‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É #{task_id}?",
        reply_markup=keyboard
    )
    await callback.answer()
    


# –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!
# handlers/tasks_view.py
# -*- coding: utf-8 -*-


# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï SQL-–§–£–ù–ö–¶–ò–ò ----------

def _fetch_reauth_tasks(page: int, per_page: int = 10) -> Tuple[List[Dict[str, Any]], int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á reauthorize_accounts –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏).
    page - —Å 1.
    """
    conn = get_connection(); cur = conn.cursor()
    try:
        cur.execute("SELECT COUNT(*) FROM tasks WHERE type='reauthorize_accounts'")
        total = cur.fetchone()[0]
        offset = (page - 1) * per_page
        cur.execute("""
            SELECT
              id,
              type,
              status,
              to_char(created_at AT TIME ZONE 'Europe/Moscow','YYYY-MM-DD HH24:MI:SS') AS created_msk,
              payload
            FROM tasks
            WHERE type='reauthorize_accounts'
            ORDER BY created_at DESC NULLS LAST, id DESC
            LIMIT %s OFFSET %s
        """, (per_page, offset))
        rows = cur.fetchall()
        # rows -> dict
        cols = [d.name for d in cur.description]
        tasks = [dict(zip(cols, r)) for r in rows]
        return tasks, total
    finally:
        cur.close(); conn.close()


def _fetch_one_task(task_id: int) -> Optional[Dict[str, Any]]:
    conn = get_connection(); cur = conn.cursor()
    try:
        cur.execute("""
            SELECT
              id,
              type,
              status,
              to_char(created_at AT TIME ZONE 'Europe/Moscow','YYYY-MM-DD HH24:MI:SS') AS created_msk,
              payload
            FROM tasks
            WHERE id = %s
        """, (task_id,))
        row = cur.fetchone()
        if not row:
            return None
        cols = [d.name for d in cur.description]
        return dict(zip(cols, row))
    finally:
        cur.close(); conn.close()


def _fetch_task_logs(task_id: int, limit: int = 50) -> List[Dict[str, str]]:
    conn = get_connection(); cur = conn.cursor()
    try:
        cur.execute("""
            SELECT
              to_char("timestamp" AT TIME ZONE 'Europe/Moscow','YYYY-MM-DD HH24:MI:SS') AS ts,
              message
            FROM task_logs
            WHERE task_id = %s
            ORDER BY id ASC
            LIMIT %s
        """, (task_id, limit))
        rows = cur.fetchall()
        return [{"ts": r[0], "message": r[1]} for r in rows]
    finally:
        cur.close(); conn.close()


# ---------- –ö–õ–ê–í–ò–ê–¢–£–†–´ ----------

def _kb_tasks_root():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="task_reauth_list:1")],
        # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —Å—é–¥–∞ –¥–æ–±–∞–≤–∏—à—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu_main")],
    ])

def _kb_reauth_list(page: int, pages: int, items: List[Dict[str, Any]]):
    rows = []
    for t in items:
        t_id = t["id"]
        status = t.get("status") or "-"
        created = t.get("created_msk") or "-"
        btn_text = f"#{t_id} ‚Ä¢ {status} ‚Ä¢ {created}"
        rows.append([InlineKeyboardButton(text=btn_text, callback_data=f"task_reauth_open:{t_id}")])

    nav = []
    if page > 1:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"task_reauth_list:{page-1}"))
    if page < pages:
        nav.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"task_reauth_list:{page+1}"))
    if nav:
        rows.append(nav)

    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_task_execution")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def _kb_task_card(task_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"task_reauth_open:{task_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="task_reauth_list:1")],
    ])


# ---------- –•–ï–ù–î–õ–ï–†–´ ----------

@router.callback_query(F.data == "menu_task_execution")
@admin_only
async def tasks_root(call: types.CallbackQuery):
    await call.message.edit_text("üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á</b>\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", parse_mode="HTML",
                                 reply_markup=_kb_tasks_root())
    await call.answer()

@router.callback_query(F.data.startswith("task_reauth_list:"))
@admin_only
async def reauth_list(call: types.CallbackQuery):
    page = int(call.data.split(":")[1])
    page = max(1, page)
    per_page = 10

    items, total = _fetch_reauth_tasks(page, per_page)
    pages = max(1, math.ceil(total / per_page))

    text = f"üîÅ <b>–ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n–í—Å–µ–≥–æ –∑–∞–¥–∞—á: <b>{total}</b>\n–°—Ç—Ä. {page}/{pages}\n\n–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É:"
    kb = _kb_reauth_list(page, pages, items)
    try:
        await call.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise
    await call.answer()

@router.callback_query(F.data.startswith("task_reauth_open:"))
async def task_reauth_open(call: types.CallbackQuery):
    # –∏–∑–≤–ª–µ–∫–∞–µ–º task_id –∏–∑ callback_data
    parts = call.data.split(":")
    task_id = int(parts[1])

    # —á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–¥–∞—á–∏
    conn = get_connection(); cur = conn.cursor()
    cur.execute("""
        SELECT id, type, status, created_at, payload
        FROM tasks
        WHERE id = %s
    """, (task_id,))
    row = cur.fetchone()
    cur.close(); conn.close()

    if not row:
        await call.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # row -> dict
    task = {
        "id": row[0],
        "type": row[1],
        "status": row[2],
        "created_at": row[3],   # timezone-aware –≤ —Ç–≤–æ–µ–π –ë–î
        "payload": row[4],
    }

    text = build_reauth_task_card_text(task)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßæ –õ–æ–≥–∏", callback_data=f"task_reauth_logs:{task['id']}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"task_reauth_delete:{task['id']}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="accounts_list")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á", callback_data="task_reauth_list:1")],
        
    ])

    await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await call.answer()

@router.callback_query(F.data.startswith("task_reauth_logs:"))
async def task_reauth_logs(call: types.CallbackQuery):
    task_id = int(call.data.split(":")[1])

    # —Ç—è–Ω–µ–º –≤—Å–µ –ª–æ–≥–∏ –ø–æ –∑–∞–¥–∞—á–µ
    conn = get_connection(); cur = conn.cursor()
    cur.execute("""
        SELECT to_char("timestamp" AT TIME ZONE 'Europe/Moscow','YYYY-MM-DD HH24:MI:SS') AS ts_msk,
               message
        FROM task_logs
        WHERE task_id = %s
        ORDER BY id ASC
    """, (task_id,))
    logs = cur.fetchall()
    cur.close(); conn.close()

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    if not logs:
        content = f"–ó–∞–¥–∞—á–∞ #{task_id}\n–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
    else:
        lines = [f"–ó–∞–¥–∞—á–∞ #{task_id} ‚Äî –ª–æ–≥–∏\n"]
        for ts, msg in logs:
            # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å—Ç—Ä–∞—Ö—É–µ–º—Å—è –æ—Ç None
            ts = ts or "-"
            msg = msg or ""
            lines.append(f"{ts}  ‚Äî  {msg}")
        content = "\n".join(lines)

    # –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    from aiogram.types import BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton
    doc = BufferedInputFile(content.encode("utf-8"), filename=f"reauth_task_{task_id}_logs.txt")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="OK", callback_data="task_logs_close")]
    ])
    await call.message.answer_document(
        document=doc,
        caption=f"–õ–æ–≥–∏ –∑–∞–¥–∞—á–∏ #{task_id}",
        reply_markup=kb
    )
    await call.answer()

@router.callback_query(F.data == "task_logs_close")
async def task_logs_close(call: types.CallbackQuery):
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–¥–µ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ OK
        await call.message.delete()
    except Exception:
        pass
    await call.answer("–ó–∞–∫—Ä—ã—Ç–æ")

@router.callback_query(F.data.startswith("task_reauth_delete:"))
async def task_reauth_delete(call: types.CallbackQuery):
    tid = int(call.data.split(":")[1])
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"task_reauth_delete_confirm:{tid}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data=f"task_reauth_open:{tid}")],
    ])
    try:
        await call.message.edit_reply_markup(reply_markup=kb)
    except TelegramBadRequest:
        # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç/–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å ‚Äî –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º –≤—Å—é –∫–∞—Ä—Ç–æ—á–∫—É
        await task_reauth_open(call)
    await call.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏.")

def _delete_task_and_logs(task_id: int) -> bool:
    conn = get_connection(); cur = conn.cursor()
    try:
        # —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –ª–æ–≥–∏, –ø–æ—Ç–æ–º —Å–∞–º—É –∑–∞–¥–∞—á—É
        cur.execute("DELETE FROM task_logs WHERE task_id = %s", (task_id,))
        cur.execute("DELETE FROM tasks WHERE id = %s", (task_id,))
        deleted = cur.rowcount  # –∫–æ–ª-–≤–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–ø—Ä–æ—Å–µ
        conn.commit()
        return deleted == 1
    finally:
        try:
            cur.close(); conn.close()
        except Exception:
            pass

@router.callback_query(F.data.startswith("task_reauth_delete_confirm:"))
async def task_reauth_delete_confirm(call: types.CallbackQuery):
    tid = int(call.data.split(":")[1])
    ok = _delete_task_and_logs(tid)
    if ok:
        text = f"üß© –ó–∞–¥–∞—á–∞ #{tid} —É–¥–∞–ª–µ–Ω–∞."
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á", callback_data="task_reauth_list:1")],
        ])
        await call.message.edit_text(text, reply_markup=kb)
        await call.answer("–£–¥–∞–ª–µ–Ω–æ.")
    else:
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

@router.callback_query(F.data == "tasktype_check_comments")
@admin_only
async def view_check_comments_tasks(callback: types.CallbackQuery):
    from app.db import get_tasks_by_type
    tasks = get_tasks_by_type("check_comments", limit=20)
    if not tasks:
        await callback.message.edit_text("üí¨ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.", reply_markup=back_to_main_menu_keyboard(), parse_mode="HTML")
        await callback.answer(); return

    kb = []
    for t in tasks:
        tid = t["id"]; st = t["status"]
        kb.append([InlineKeyboardButton(text=f"#{tid} | {st}", callback_data=f"view_task_{tid}")])
    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_task_execution")])
    await callback.message.edit_text("üí¨ –ó–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:", reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
    await callback.answer()

@router.callback_query(F.data.startswith("show_cchk_log_"))
@admin_only
async def show_cchk_log(callback: types.CallbackQuery):
    from app.db import get_comment_check_logs
    import uuid, os
    task_id = int(callback.data.split("_")[-1])
    rows = get_comment_check_logs(task_id)  # account_id, channel, can_comment, mode, message, ts
    if not rows:
        await callback.message.answer("‚ö†Ô∏è –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback.answer(); return

    lines = []
    for acc_id, ch, can, mode, msg, ts in rows:
        can_txt = "YES" if can is True else ("NO" if can is False else "UNK")
        lines.append(f"{ts:%Y-%m-%d %H:%M:%S} | acc:{acc_id or '-'} | {ch:<32} | {can_txt:<3} | {mode or '-'} | {msg or ''}")

    path = f"/tmp/cchk_{task_id}_{uuid.uuid4().hex}.txt"
    with open(path, "w", encoding="utf-8") as f:
        f.write("\n".join(lines))
    await callback.message.answer_document(FSInputFile(path), caption=f"üìÅ –õ–æ–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ #{task_id}")
    try: os.remove(path)
    except: pass
    await callback.answer()
